#define DEBUG

#include "drivers.h"
#include "app.h"
#include "api.h"

#include "lwip\sockets.h"
#include "lwip\netif.h"
#include "lwip\dns.h"
#include "lwip\api.h"
#include "lwip\tcp.h"

#include "cfg80211.h"
#include "defs.h"
#include "type.h"
#include "types.h"

#include "tcpapp.h"
#include "wifi.h"
#include "debug.h"
#include "lwip/dhcp.h"
#include "sys_misc.h"

#include "web_cfg.h"

#include <mosquitto.h>
#include <mosquitto_internal.h>
#include <cjson.h>

#define MQTT_MAX_SEND_QUEUE_LEN 32

#define MSGMODE_NONE 0
#define MSGMODE_CMD 1
#define MSGMODE_STDIN_LINE 2
#define MSGMODE_STDIN_FILE 3
#define MSGMODE_FILE 4
#define MSGMODE_NULL 5

#define STATUS_CONNECTING 0
#define STATUS_CONNACK_RECVD 1
#define STATUS_WAITING 2

//struct mosquitto *mosq = NULL;
struct mosquitto *sub_mosq = NULL;


unsigned int max_inflight = 20;
/*
static char *will_payload = "will_payload";
static long will_payloadlen = 12;
static int will_qos = 0;
static bool will_retain = false;
static char *will_topic = "will_topic";
*/
static char *message = "";
static long msglen = 0;

static char sub_id[32];
static char pub_id[32];
int sub_qos = 0;
int pub_qos = 0;
char *pub_topic = "system";
static char *username = "test";
static char *password = "test";
char *host = "easynetworking.cn";
int port = 1883;

int mqtt_connected = 0;

static int retain = 0;
static int mode = MSGMODE_NONE;
//static int status = STATUS_CONNECTING;
static int mid_sent = 0;
//static int last_mid = -1;
//static int last_mid_sent = -1;
//static bool connected = true;

//static bool disconnect_sent = false;
static bool quiet = false;


char *bind_address = NULL;
int keepalive = 60;
	
struct userdata {
	char **topics;
	int topic_count;
	int topic_qos;
	char **filter_outs;
	int filter_out_count;
	char *username;
	char *password;
	int verbose;
	char quiet;
	char no_retain;
	char eol;
};
struct userdata ud;

void test_mqtt_sub(void);
void sub_mqtt_thread(void *arg);
void handle_mqtt_sub_recv(void *buff, int len);

void sub_message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)
{
	struct userdata *ud;
	int i;
	bool res;
	//p_dbg_enter;
	assert(obj);
	ud = (struct userdata *)obj;

	if(message->retain && ud->no_retain) return;
	if(ud->filter_outs){
		for(i=0; i<ud->filter_out_count; i++){
			mosquitto_topic_matches_sub(ud->filter_outs[i], message->topic, &res);
			if(res) return;
		}
	}

	if(ud->verbose){
		if(message->payloadlen){
			handle_mqtt_sub_recv(message->payload, message->payloadlen);
		}else{
			if(ud->eol){
				printf("%s (null)\n", message->topic);
			}
		}
		//fflush(stdout);
	}else{
		if(message->payloadlen){
			handle_mqtt_sub_recv(message->payload, message->payloadlen);
		}
	}
}


void sub_connect_callback(struct mosquitto *mosq, void *obj, int result)
{
	int i;
	struct userdata *ud;
	p_dbg_enter;
#if ENABLE_LCD == 1
	gui_show_info("mqtt connect ok");
#endif
	assert(obj);
	ud = (struct userdata *)obj;
	p_dbg("connect result:%d, %d", result, ud->topic_count);
	if(!result){
		mqtt_connected = 1;
		
		for(i=0; i<ud->topic_count; i++){
			p_dbg("sub:%s, qos:%d", ud->topics[i], ud->topic_qos);

			mosquitto_subscribe(mosq, NULL, ud->topics[i], ud->topic_qos);
		}
	}else{
		if(result && !ud->quiet){
			p_err("%s\n", mosquitto_connack_string(result));
		}
	}
}

void sub_subscribe_callback(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos)
{

	p_dbg_enter;
	assert(obj);
//	ud = (struct userdata *)obj;
/*
	if(!ud->quiet) p_dbg("Subscribed (mid: %d): %d", mid, granted_qos[0]);
	for(i=1; i<qos_count; i++){
		if(!ud->quiet) p_dbg(", %d", granted_qos[i]);
	}
	if(!ud->quiet) p_dbg("\n");*/
}

void my_log_callback(struct mosquitto *mosq, void *obj, int level, const char *str)
{
	//p_dbg_enter;
	//p_dbg("%s\n", str);
}

void my_connect_callback(struct mosquitto *mosq, void *obj, int result)
{
	int rc = MOSQ_ERR_SUCCESS;
	p_dbg_enter;
	if(!result){
		switch(mode){
			case MSGMODE_CMD:
			case MSGMODE_FILE:
			case MSGMODE_STDIN_FILE:
				rc = mosquitto_publish(mosq, &mid_sent, pub_topic, msglen, message,pub_qos, retain);
				break;
			case MSGMODE_NULL:
				rc = mosquitto_publish(mosq, &mid_sent, pub_topic, 0, NULL, pub_qos, retain);
				break;
			case MSGMODE_STDIN_LINE:
				//status = STATUS_CONNACK_RECVD;
				break;
		}
		if(rc){
			if(!quiet){
				switch(rc){
					case MOSQ_ERR_INVAL:
						p_err("Error: Invalid input. Does your topic contain '+' or '#'?\n");
						break;
					case MOSQ_ERR_NOMEM:
						p_err("Error: Out of memory when trying to publish message.\n");
						break;
					case MOSQ_ERR_NO_CONN:
						p_err("Error: Client not connected when trying to publish.\n");
						break;
					case MOSQ_ERR_PROTOCOL:
						p_err("Error: Protocol error when communicating with broker.\n");
						break;
					case MOSQ_ERR_PAYLOAD_SIZE:
						p_err("Error: Message payload is too large.\n");
						break;
				}
			}
			mosquitto_disconnect(mosq);
		}
	}else{
		if(result && !quiet){
			p_err("%s\n", mosquitto_connack_string(result));
		}
	}
}


void my_disconnect_callback(struct mosquitto *mosq, void *obj, int rc)
{
	p_dbg_enter;
	mqtt_connected = 0;

}

void my_publish_callback(struct mosquitto *mosq, void *obj, int mid)
{
//	last_mid_sent = mid;
	//p_dbg_enter;
	//if(mode == MSGMODE_STDIN_LINE){
	//	if(mid == last_mid){
	//		mosquitto_disconnect(mosq);
	//		disconnect_sent = true;
	//	}
	//}else if(disconnect_sent == false){
	//	//mosquitto_disconnect(mosq);
	//	//disconnect_sent = true;
	//}
}

int is_buff_zero(uint8_t *buff, int size)
{
	int i;
	for(i = 0 ; i < size; i++)
	{
		if(buff[i])
			break;
	}

	if(i == size)
		return 1;

	return 0;
}

int init_sub_mqtt(WEB_CFG *web_cfg)
{
	int ret, i;
	p_dbg_enter;
	mosquitto_lib_init();

	memset(&ud, 0, sizeof(struct userdata));
	ud.eol = true;
	ud.topic_qos = sub_qos;
	ud.topic_count = 0;
	ud.topics = (char**)mem_malloc(4*MAX_BOND_NUM);

	for(i = 0; i < MAX_BOND_NUM; i++)
	{
		if(!is_buff_zero((uint8_t*)web_cfg->work_cfg.bond[i].mac, 12))
		{
			ud.topics[i] = (char*)web_cfg->work_cfg.bond[i].sn;
			p_dbg("topic %d :%s", i, web_cfg->work_cfg.bond[i].sn);
			ud.topic_count++;
		}
	}

	p_dbg("topic_count:%d", ud.topic_count);

	sub_mosq = mosquitto_new(sub_id, true, &ud);
	if(!sub_mosq){
		p_err("err :%x, %d", __FUNCTION__, __LINE__);
		mosquitto_lib_cleanup();
		return -1;
	}

	mosquitto_log_callback_set(sub_mosq, my_log_callback);
/*
	ret = mosquitto_will_set(sub_mosq, will_topic, will_payloadlen, will_payload, will_qos, will_retain);
	if(ret)
	{
		p_err("err :%x, %d", __FUNCTION__, __LINE__);
		mosquitto_lib_cleanup();
		return -1;
	}
*/
	ret = mosquitto_username_pw_set(sub_mosq, username, password);
	if(ret)
	{
		p_err("err :%x, %d", __FUNCTION__, __LINE__);
		mosquitto_lib_cleanup();
		return -1;
	}

	mosquitto_max_inflight_messages_set(sub_mosq, max_inflight);
	mosquitto_connect_callback_set(sub_mosq, sub_connect_callback);
	mosquitto_message_callback_set(sub_mosq, sub_message_callback);
	mosquitto_disconnect_callback_set(sub_mosq, my_disconnect_callback);
	//mosquitto_publish_callback_set(sub_mosq, sub_subscribe_callback);

	thread_create(sub_mqtt_thread, 0, TASK_SUB_MQTT_PRIO, 0, 512, "sub_mqtt_thread");
	
	return 0;
}

int get_mqtt_state()
{
	if(sub_mosq)
		return sub_mosq->state;

	return -1;
}

int sub_mqtt_connect()
{
	int ret;
	ret = mosquitto_connect_bind(sub_mosq, host, port, keepalive, bind_address);
	if(ret)
	{
		p_err("mosquitto_connect err %d", ret);
	}
	return ret;
}

void sub_mqtt_thread(void *arg)
{
	int ret;
	while(1)
	{
		ret = sub_mqtt_connect();
		
		if(ret == 0)
			mosquitto_loop_forever(sub_mosq, -1, 1);

		sleep(1000);
	}
}

void sub_mqtt_disconnect()
{
	if(sub_mosq)
	{
		mosquitto_disconnect(sub_mosq);
		mosquitto_destroy(sub_mosq);
		mosquitto_lib_cleanup();
		sub_mosq = 0;
	}
}

void handle_mqtt_sub_recv(void *buff, int len)
{
	char *p_data;
	struct mqtt_pkg_head pkg_head;
	
	p_data = (char*)buff;
	
	memcpy(&pkg_head, buff, sizeof(struct mqtt_pkg_head));

	//p_dbg("r:%d,%d", len, pkg_head.msg_id);
	if(pkg_head.dir != MSG_DIR_APP2DEV)
		return;
	//dump_hex("r", buff, len);
	switch(pkg_head.msg_id)
	{
		case MQTT_MSG_SENSERS:
		
		break;
		case MQTT_MSG_SWITCH:
		{
			p_data += sizeof(sizeof(struct mqtt_pkg_head));
			
			p_dbg("led %d", p_data[0]);
			if(p_data[0]){
				IND2_ON;
			}else{
				IND2_OFF;
			}
		}
		break;
		case MQTT_MSG_AUDIO:
#if SUPPORT_AUDIO
		handle_audio_stream((uint8_t*)buff + sizeof(struct mqtt_pkg_head), 
			len - sizeof(struct mqtt_pkg_head));
#endif
		break;
		case MQTT_MSG_IMAGE:
		{
			
			p_data += sizeof(struct mqtt_pkg_head);

			//p_dbg("get img %d", p_data[0]);
			camera_cfg.remote_capture_img = TRUE;
			//start_capture_img();    //disable mqtt capture
		}
		break;
		case MQTT_MSG_TIME:
		{
			int year;
			p_data += sizeof(struct mqtt_pkg_head);

			year = p_data[0] + p_data[1]*256;
		
			RTC_Time_Set(year , p_data[2], p_data[3], p_data[4], p_data[5], p_data[6], p_data[7]);
		}
		break;
		case MQTT_MSG_LISTEN:
		{
#if SUPPORT_AUDIO
			p_data += sizeof(struct mqtt_pkg_head);
			if(p_data[0])
			{
				audio_cfg.recording = TRUE;
				IND2_ON;
			}else{
				audio_cfg.recording = FALSE;
				IND2_OFF;
			}
#endif
		}
		break;
		case MQTT_MSG_AIR:
		{
			p_data += sizeof(struct mqtt_pkg_head);
			//data[0]代表开关, data[1]代表温度
			p_dbg("ir, onoff[%d], temp[%d]", p_data[0], p_data[1]);
			if(p_data[0])	
			{
	
				ir_send_kelon_cmd(0, 
				0, 
				0, 
				1,  //开关
				0, 
				p_data[1], //温度18-32
				0, 
				2,  //制冷
				0);
				
			}else{

				ir_send_kelon_cmd(0, 
				0, 
				0, 
				0,  //开关
				0, 
				p_data[1], //温度18-32
				0, 
				2,  //制冷
				0);
				
			}
			
		}
		break;
		case MQTT_MSG_RALAY:
		{
			p_data += sizeof(sizeof(struct mqtt_pkg_head));
			
			p_dbg("switch %d,%d", p_data[0], p_data[1]);
			//p_data[0]代表继电器编号,p_data[1]代表开关值
			//目前只有一路继电器
			if(p_data[1]){
			
				RELAY_ON;

			}else{

				RELAY_OFF;

			}
		}
		break;
		case MQTT_MSG_JSON:  //json格式命令,目前还没实现具体控制功能
		{
			cJSON *json;

			p_data += sizeof(struct mqtt_pkg_head);
			json = cJSON_Parse(p_data);

			if(json)
			{
				char *str = cJSON_Print(json);
				if(str)
				{
					p_dbg("[%s]",str);
					mem_free(str);
				}
				cJSON_Delete(json);
			}
			
		}
		break;
		default:

		break;
	}
}

void mqtt_pub(void *buff, int len)
{
	int ret;
	//p_dbg("pub topic:%s", pub_topic);
	if(sub_mosq && sub_mosq->out_packet_queue_len > MQTT_MAX_SEND_QUEUE_LEN){
		p_err("mqtt send queue over");
		return;
	}
	
	ret = mosquitto_publish(sub_mosq, &mid_sent, pub_topic, len, buff, pub_qos, retain);
	if(ret){
		p_err("publish err:%d", ret);
	}
}

static char host_addr[16];
void init_mqtt(WEB_CFG *web_cfg, struct iot_work_struct *work)
{
	int ret;
	struct WEB_CFG_MQTT *cfg = &web_cfg->remote[0];
	p_dbg_enter;
	
	sub_qos = cfg->qos_sub;
	pub_qos = cfg->qos_pub;
	pub_topic = work->self_sn.sn;
	username = cfg->usr_name;
	password = cfg->password;
	host = host_addr;
	memset(host_addr, 0, 16);

	snprintf(host, 16, "%u.%u.%u.%u", ip4_addr1(&cfg->server_ip), 
		ip4_addr2(&cfg->server_ip), 
		ip4_addr3(&cfg->server_ip), 
		ip4_addr4(&cfg->server_ip) 
		);
	
	port = cfg->port;

	p_dbg("qos:%d,%d,user:%s, pwd:%s, host:%s, port:%d",
		sub_qos, pub_qos,
		username, password,
		host, port);

	snprintf(sub_id, 32, "mosq_sub_%x", *CPU_ID);
	snprintf(pub_id, 32, "mosq_pub_%x", *CPU_ID);

	//ret = init_pub_mqtt();
	//if(ret)
	//	p_err_fun;

	ret = init_sub_mqtt(web_cfg);
	if(ret)
		p_err_fun;
}

























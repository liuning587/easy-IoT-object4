<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\wifi.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\wifi.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Sun Jun 24 18:53:49 2018
<BR><P>
<H3>Maximum Stack Usage =       5332 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mad_layer_III &rArr; III_decode &rArr; III_imdct_l &rArr; imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d44]">CPU_IntDis</a>
 <LI><a href="#[d45]">CPU_IntEn</a>
 <LI><a href="#[1a0]">CPU_SR_Save</a>
 <LI><a href="#[1a1]">CPU_SR_Restore</a>
 <LI><a href="#[d46]">CPU_WaitForInt</a>
 <LI><a href="#[d47]">CPU_WaitForExcept</a>
 <LI><a href="#[1e5]">CPU_CntLeadZeros</a>
 <LI><a href="#[d48]">CPU_CntTrailZeros</a>
 <LI><a href="#[d49]">CPU_RevBits</a>
 <LI><a href="#[1c2]">OSStartHighRdy</a>
 <LI><a href="#[1bb]">OSCtxSw</a>
 <LI><a href="#[1b9]">OSIntCtxSw</a>
 <LI><a href="#[e]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2b5]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b5]">netconn_drain</a><BR>
 <LI><a href="#[785]">skb_release_all</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[781]">skb_release_data</a><BR>
 <LI><a href="#[404]">woal_request_fw_dpc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[403]">woal_request_fw</a><BR>
 <LI><a href="#[2e6]">lwip_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e7]">lwip_send</a><BR>
 <LI><a href="#[b63]">x509_crt_verify_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b63]">x509_crt_verify_child</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">DCMI_IRQHandler</a> from camera.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream6_IRQHandler</a> from audio_low_level.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream1_IRQHandler</a> from camera.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream4_IRQHandler</a> from audio_low_level.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">ETH_IRQHandler</a> from lan8720.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32f4xx_it.o(.emb_text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c2]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[1a6]">OS_IdleTask</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[203]">OS_StatTask</a> from os_stat.o(.text) referenced from os_stat.o(.text)
 <LI><a href="#[65]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[21f]">OS_TickTask</a> from os_tick.o(.text) referenced from os_tick.o(.text)
 <LI><a href="#[22f]">OS_TmrTask</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from os_cpu_a.o(CODE) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">SDIO_IRQHandler</a> from sdcard.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from w25p80.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from os_cpu_c.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[12]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from hard_timer.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from audio_low_level.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[bf]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[c0]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[be]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[c4]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[c5]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[7b]">accept_function</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[a3]">adc_recv_thread</a> from audio_low_level.o(.text) referenced from audio_low_level.o(.text)
 <LI><a href="#[12f]">aes_crypt_cbc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[12e]">aes_crypt_ecb_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[132]">aes_ctx_alloc</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[133]">aes_ctx_free</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[131]">aes_setkey_dec_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[130]">aes_setkey_enc_wrap</a> from cipher_wrap.o(.text) referenced from cipher_wrap.o(.constdata)
 <LI><a href="#[bba]">ai_image_task</a> from baidu_ai_face.o(.text) referenced from baidu_ai_face.o(.text)
 <LI><a href="#[bc4]">ai_voice_task</a> from baidu_ai_voice.o(.text) referenced from baidu_ai_voice.o(.text)
 <LI><a href="#[ba8]">aliyun_iot_net_connect</a> from aliyun_iot_common_net.o(.text) referenced from aliyun_iot_common_net.o(.text)
 <LI><a href="#[ba7]">aliyun_iot_net_disconnect</a> from aliyun_iot_common_net.o(.text) referenced from aliyun_iot_common_net.o(.text)
 <LI><a href="#[ba5]">aliyun_iot_net_read</a> from aliyun_iot_common_net.o(.text) referenced from aliyun_iot_common_net.o(.text)
 <LI><a href="#[ba6]">aliyun_iot_net_write</a> from aliyun_iot_common_net.o(.text) referenced from aliyun_iot_common_net.o(.text)
 <LI><a href="#[89]">arp_timer</a> from _timers.o(.text) referenced from _timers.o(.text)
 <LI><a href="#[26c]">comm_timer_callback</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[83]">dhcp_recv</a> from dhcp.o(.text) referenced from dhcp.o(.text)
 <LI><a href="#[8a]">dhcp_timer_coarse</a> from _timers.o(.text) referenced from _timers.o(.text)
 <LI><a href="#[8b]">dhcp_timer_fine</a> from _timers.o(.text) referenced from _timers.o(.text)
 <LI><a href="#[84]">dns_recv</a> from dns.o(.text) referenced from dns.o(.text)
 <LI><a href="#[8d]">dns_timer</a> from _timers.o(.text) referenced from _timers.o(.text)
 <LI><a href="#[6a]">do_bind</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[71]">do_close</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[6b]">do_connect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[7a]">do_connected</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[68]">do_delconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[6c]">do_disconnect</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[7c]">do_dns_found</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[69]">do_getaddr</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[73]">do_gethostbyname</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[72]">do_join_leave_group</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[6d]">do_listen</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[67]">do_newconn</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[6e]">do_recv</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[6f]">do_send</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[70]">do_write</a> from api_msg.o(.text) referenced from api_lib.o(.text)
 <LI><a href="#[76]">err_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[a8]">eth_ethernetif_init</a> from eth_ethernetif.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[a5]">eth_int_thread</a> from eth_ethernetif.o(.text) referenced from lan8720.o(.text)
 <LI><a href="#[91]">eth_low_level_output</a> from eth_ethernetif.o(.text) referenced from eth_ethernetif.o(.text)
 <LI><a href="#[8f]">etharp_output</a> from etharp.o(.text) referenced 2 times from ethernetif.o(.text)
 <LI><a href="#[a7]">ethernetif_init</a> from ethernetif.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[7d]">event_callback</a> from sockets.o(.text) referenced 2 times from sockets.o(.text)
 <LI><a href="#[119]">forced_pitch_quant</a> from ltp.o(.text) referenced 2 times from modes.o(.constdata)
 <LI><a href="#[11a]">forced_pitch_unquant</a> from ltp.o(.text) referenced 2 times from modes.o(.constdata)
 <LI><a href="#[c3]">fputc</a> from usart.o(.text) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[c3]">fputc</a> from usart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[ac]">get_no_padding</a> from cipher.o(.text) referenced from cipher.o(.text)
 <LI><a href="#[92]">handle_dhcp</a> from dhcpserver.o(.text) referenced from dhcpserver.o(.text)
 <LI><a href="#[8c]">igmp_timer</a> from _timers.o(.text) referenced from _timers.o(.text)
 <LI><a href="#[851]">img_send_thread</a> from camera.o(.text) referenced from camera.o(.text)
 <LI><a href="#[95b]">ind4_timer_callback</a> from sys_misc.o(.text) referenced from sys_misc.o(.text)
 <LI><a href="#[88]">ip_reass_timer</a> from _timers.o(.text) referenced from _timers.o(.text)
 <LI><a href="#[8e]">ipfrag_free_pbuf_custom</a> from ip_frag.o(.text) referenced from ip_frag.o(.text)
 <LI><a href="#[a4]">ir_timer_callback</a> from ir_control.o(.text) referenced from ir_control.o(.text)
 <LI><a href="#[c1]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[912]">key_detect_timer_callback</a> from key.o(.text) referenced from key.o(.text)
 <LI><a href="#[90]">low_level_output</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[117]">lsp_quant_lbr</a> from quant_lsp.o(.text) referenced 5 times from modes.o(.constdata)
 <LI><a href="#[120]">lsp_quant_nb</a> from quant_lsp.o(.text) referenced 3 times from modes.o(.constdata)
 <LI><a href="#[118]">lsp_unquant_lbr</a> from quant_lsp.o(.text) referenced 5 times from modes.o(.constdata)
 <LI><a href="#[121]">lsp_unquant_nb</a> from quant_lsp.o(.text) referenced 3 times from modes.o(.constdata)
 <LI><a href="#[7e]">lwip_getsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[7f]">lwip_setsockopt_internal</a> from sockets.o(.text) referenced from sockets.o(.text)
 <LI><a href="#[12b]">mad_layer_I</a> from layer12.o(.text) referenced from frame.o(.constdata)
 <LI><a href="#[12c]">mad_layer_II</a> from layer12.o(.text) referenced from frame.o(.constdata)
 <LI><a href="#[12d]">mad_layer_III</a> from layer3.o(.text) referenced from frame.o(.constdata)
 <LI><a href="#[62]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[963]">main_thread</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[137]">mbedtls_md5</a> from md5.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[bc]">mbedtls_net_recv</a> from net.o(.text) referenced from aliyun_iot_network_ssl.o(.text)
 <LI><a href="#[bb]">mbedtls_net_recv_timeout</a> from net.o(.text) referenced from aliyun_iot_network_ssl.o(.text)
 <LI><a href="#[bd]">mbedtls_net_send</a> from net.o(.text) referenced from aliyun_iot_network_ssl.o(.text)
 <LI><a href="#[13f]">mbedtls_sha1</a> from sha1_1.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13a]">md5_clone_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[138]">md5_ctx_alloc</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[139]">md5_ctx_free</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[136]">md5_finish_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13b]">md5_process_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[134]">md5_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[135]">md5_update_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[82]">mem_free</a> from memory.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[d7]">moal_alloc_mlan_buffer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ef]">moal_assert</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ea]">moal_free_lock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d8]">moal_free_mlan_buffer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e6]">moal_free_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d0]">moal_get_fw_data</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e4]">moal_get_system_time</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d1]">moal_init_fw_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e9]">moal_init_lock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e5]">moal_init_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d6]">moal_ioctl_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[dd]">moal_malloc</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e2]">moal_memcmp</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e0]">moal_memcpy</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e1]">moal_memmove</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[df]">moal_memset</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[de]">moal_mfree</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ed]">moal_print</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ee]">moal_print_netintf</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[dc]">moal_read_data_sync</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[da]">moal_read_reg</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d5]">moal_recv_event</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d4]">moal_recv_packet</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d3]">moal_send_packet_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d2]">moal_shutdown_fw_complete</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[eb]">moal_spin_lock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[ec]">moal_spin_unlock</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e7]">moal_start_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e8]">moal_stop_timer</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[e3]">moal_udelay</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[db]">moal_write_data_sync</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[d9]">moal_write_reg</a> from moal_shim.o(.text) referenced from moal_shim.o(.constdata)
 <LI><a href="#[9b6]">mp3_delay_timer_cb</a> from audio.o(.text) referenced from audio.o(.text)
 <LI><a href="#[ba]">mqtt_ssl_debug</a> from aliyun_iot_network_ssl.o(.text) referenced from aliyun_iot_network_ssl.o(.text)
 <LI><a href="#[b9]">mqtt_ssl_random</a> from aliyun_iot_network_ssl.o(.text) referenced from aliyun_iot_network_ssl.o(.text)
 <LI><a href="#[128]">nb_decode</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[12a]">nb_decoder_ctl</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[127]">nb_decoder_destroy</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[126]">nb_decoder_init</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[125]">nb_encode</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[129]">nb_encoder_ctl</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[124]">nb_encoder_destroy</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[123]">nb_encoder_init</a> from nb_celp.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[122]">nb_mode_query</a> from speex.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[a1]">noise_codebook_quant</a> from cb_search.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[a1]">noise_codebook_quant</a> from cb_search.o(.text) referenced from nb_celp.o(.text)
 <LI><a href="#[11b]">noise_codebook_unquant</a> from cb_search.o(.text) referenced from modes.o(.constdata)
 <LI><a href="#[932]">nrf2401_recv_thread</a> from 24l01.o(.text) referenced from 24l01.o(.text)
 <LI><a href="#[66]">os_workqueue_thread</a> from task.o(.text) referenced from task.o(.text)
 <LI><a href="#[81]">pbuf_free_int</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[85]">pbuf_free_ooseq_callback</a> from pbuf.o(.text) referenced from pbuf.o(.text)
 <LI><a href="#[11e]">pitch_search_3tap</a> from ltp.o(.text) referenced 6 times from modes.o(.constdata)
 <LI><a href="#[11f]">pitch_unquant_3tap</a> from ltp.o(.text) referenced 6 times from modes.o(.constdata)
 <LI><a href="#[75]">poll_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[9b4]">record_to_flash_timeout_cb</a> from audio.o(.text) referenced from audio.o(.text)
 <LI><a href="#[78]">recv_raw</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[77]">recv_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[79]">recv_udp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[155]">rsa_alloc_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[14f]">rsa_can_do</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[154]">rsa_check_pair_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[157]">rsa_debug</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[152]">rsa_decrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[153]">rsa_encrypt_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[156]">rsa_free_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[14e]">rsa_get_bitlen</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[151]">rsa_sign_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[150]">rsa_verify_wrap</a> from pk_wrap.o(.text) referenced from pk_wrap.o(.constdata)
 <LI><a href="#[983]">scan_result_fun</a> from test_wifi.o(.text) referenced from test_wifi.o(.text)
 <LI><a href="#[9bd]">senser_poll_callback</a> from sensers.o(.text) referenced from sensers.o(.text)
 <LI><a href="#[74]">sent_tcp</a> from api_msg.o(.text) referenced from api_msg.o(.text)
 <LI><a href="#[142]">sha1_clone_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[140]">sha1_ctx_alloc</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[141]">sha1_ctx_free</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13e]">sha1_finish_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[143]">sha1_process_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13c]">sha1_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[13d]">sha1_update_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14a]">sha224_clone_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[148]">sha224_ctx_alloc</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[149]">sha224_ctx_free</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[146]">sha224_finish_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[14b]">sha224_process_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[144]">sha224_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[145]">sha224_update_wrap</a> from md_wrap.o(.text) referenced 2 times from md_wrap.o(.constdata)
 <LI><a href="#[147]">sha224_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14c]">sha256_starts_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[14d]">sha256_wrap</a> from md_wrap.o(.text) referenced from md_wrap.o(.constdata)
 <LI><a href="#[a2]">speex_default_user_handler</a> from speex_callbacks.o(.text) referenced from nb_celp.o(.text)
 <LI><a href="#[11c]">split_cb_search_shape_sign</a> from cb_search.o(.text) referenced 7 times from modes.o(.constdata)
 <LI><a href="#[11d]">split_cb_shape_sign_unquant</a> from cb_search.o(.text) referenced 7 times from modes.o(.constdata)
 <LI><a href="#[ad]">ssl3_prf</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[af]">ssl_calc_finished_ssl</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b2]">ssl_calc_finished_tls</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b5]">ssl_calc_finished_tls_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[ae]">ssl_calc_verify_ssl</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b1]">ssl_calc_verify_tls</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b4]">ssl_calc_verify_tls_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b6]">ssl_update_checksum_md5sha1</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b7]">ssl_update_checksum_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b8]">ssl_update_checksum_start</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[aa]">synth_full</a> from synth.o(.text) referenced from synth.o(.text)
 <LI><a href="#[ab]">synth_half</a> from synth.o(.text) referenced from synth.o(.text)
 <LI><a href="#[86]">tcp_accept_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[99b]">tcp_camera_task</a> from test_tcpip.o(.text) referenced from test_tcpip.o(.text)
 <LI><a href="#[36a]">tcp_recv_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[997]">tcp_send_thread</a> from test_tcpip.o(.text) referenced from test_tcpip.o(.text)
 <LI><a href="#[a9]">tcpip_init_end</a> from tcpapp.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[a6]">tcpip_input</a> from tcpip.o(.text) referenced from tcpapp.o(.text)
 <LI><a href="#[87]">tcpip_tcp_timer</a> from _timers.o(.text) referenced from _timers.o(.text)
 <LI><a href="#[80]">tcpip_thread</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[3]">threading_mutex_free_pthread</a> from threading.o(.text) referenced 2 times from threading.o(.data)
 <LI><a href="#[2]">threading_mutex_init_pthread</a> from threading.o(.text) referenced 2 times from threading.o(.data)
 <LI><a href="#[4]">threading_mutex_lock_pthread</a> from threading.o(.text) referenced 2 times from threading.o(.data)
 <LI><a href="#[5]">threading_mutex_unlock_pthread</a> from threading.o(.text) referenced 2 times from threading.o(.data)
 <LI><a href="#[b0]">tls1_prf</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[b3]">tls_prf_sha256</a> from ssl_tls.o(.text) referenced from ssl_tls.o(.text)
 <LI><a href="#[9b]">wlan_11d_is_enabled</a> from mlan_11d.o(.text) referenced from mlan_cfp.o(.text)
 <LI><a href="#[93]">wlan_11h_is_dfs_master</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[95]">wlan_11h_is_dfs_slave</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[94]">wlan_11h_is_master_active_on_dfs_chan</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[96]">wlan_11h_is_slave_active_on_dfs_chan</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[98]">wlan_11h_radar_detected_callback</a> from mlan_11h.o(.text) referenced 2 times from mlan_11h.o(.text)
 <LI><a href="#[9c]">wlan_cmd_timeout_func</a> from mlan_cmdevt.o(.text) referenced from mlan_init.o(.text)
 <LI><a href="#[99]">wlan_flush_data</a> from mlan_11n_rxreorder.o(.text) referenced from mlan_11n_rxreorder.o(.text)
 <LI><a href="#[97]">wlan_is_intf_active</a> from mlan_11h.o(.text) referenced from mlan_11h.o(.text)
 <LI><a href="#[9a]">wlan_is_station</a> from mlan_11d.o(.text) referenced from mlan_cfp.o(.text)
 <LI><a href="#[109]">wlan_ops_sta_init_cmd</a> from mlan_sta_cmd.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[10a]">wlan_ops_sta_ioctl</a> from mlan_sta_ioctl.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[10b]">wlan_ops_sta_prepare_cmd</a> from mlan_sta_cmd.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[10c]">wlan_ops_sta_process_cmdresp</a> from mlan_sta_cmdresp.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[10e]">wlan_ops_sta_process_event</a> from mlan_sta_event.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[10d]">wlan_ops_sta_process_rx_packet</a> from mlan_sta_rx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[10f]">wlan_ops_sta_process_txpd</a> from mlan_sta_tx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[110]">wlan_ops_uap_init_cmd</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[111]">wlan_ops_uap_ioctl</a> from mlan_uap_ioctl.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[112]">wlan_ops_uap_prepare_cmd</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[113]">wlan_ops_uap_process_cmdresp</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[115]">wlan_ops_uap_process_event</a> from mlan_uap_cmdevent.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[114]">wlan_ops_uap_process_rx_packet</a> from mlan_uap_txrx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[116]">wlan_ops_uap_process_txpd</a> from mlan_uap_txrx.o(.text) referenced from mlan_shim.o(.constdata)
 <LI><a href="#[9f]">wlan_uap_callback_11h_channel_check_req</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[9d]">wlan_uap_callback_bss_ioctl_start</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[9e]">wlan_uap_callback_domain_info</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[a0]">wlan_uap_callback_snmp_mib_11h</a> from mlan_uap_ioctl.o(.text) referenced from mlan_uap_ioctl.o(.text)
 <LI><a href="#[102]">woal_cfg80211_add_beacon</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[f1]">woal_cfg80211_add_key</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f0]">woal_cfg80211_change_virtual_intf</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f7]">woal_cfg80211_connect</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[104]">woal_cfg80211_del_beacon</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[f2]">woal_cfg80211_del_key</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f8]">woal_cfg80211_disconnect</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f5]">woal_cfg80211_dump_station</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f4]">woal_cfg80211_get_station</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f9]">woal_cfg80211_join_ibss</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[fa]">woal_cfg80211_leave_ibss</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[100]">woal_cfg80211_mgmt_frame_register</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[fd]">woal_cfg80211_mgmt_tx</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f6]">woal_cfg80211_scan</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[103]">woal_cfg80211_set_beacon</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[101]">woal_cfg80211_set_channel</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[ff]">woal_cfg80211_set_cqm_rssi_config</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[f3]">woal_cfg80211_set_default_key</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[fe]">woal_cfg80211_set_power_mgmt</a> from moal_sta_cfg80211.o(.text) referenced from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[fc]">woal_cfg80211_set_tx_power</a> from moal_sta_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[fb]">woal_cfg80211_set_wiphy_params</a> from moal_cfg80211.o(.text) referenced 2 times from moal_sta_cfg80211.o(.constdata)
 <LI><a href="#[c7]">woal_close</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[ce]">woal_get_stats</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[c8]">woal_hard_start_xmit</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[42f]">woal_main_work_queue</a> from moal_main.o(.text) referenced from moal_main.o(.text)
 <LI><a href="#[c6]">woal_open</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[3e0]">woal_reassoc_timer_func</a> from moal_main.o(.text) referenced from moal_main.o(.text)
 <LI><a href="#[42c]">woal_reassociation_thread</a> from moal_main.o(.text) referenced from moal_main.o(.text)
 <LI><a href="#[cf]">woal_select_queue</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[c9]">woal_set_mac_address</a> from moal_main.o(.text) referenced 2 times from moal_main.o(.constdata)
 <LI><a href="#[ca]">woal_set_multicast_list</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[cd]">woal_tx_timeout</a> from moal_main.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[107]">woal_uap_cfg80211_connect</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[108]">woal_uap_cfg80211_disconnect</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[105]">woal_uap_cfg80211_get_station</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[106]">woal_uap_cfg80211_scan</a> from moal_uap_cfg80211.o(.text) referenced from moal_uap_cfg80211.o(.constdata)
 <LI><a href="#[cc]">woal_uap_do_ioctl</a> from moal_uap.o(.text) referenced from moal_main.o(.constdata)
 <LI><a href="#[cb]">woal_uap_set_multicast_list</a> from moal_uap.o(.text) referenced 2 times from moal_main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[bed]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[158]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bd4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bee]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[bef]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bf0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bf1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bf2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_it.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardFault_Handler &rArr; hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[878]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
</UL>

<P><STRONG><a name="[82c]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_recv_enable
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dht11
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DAC1Configuration
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[bf3]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[bf4]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[bf5]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>ETH_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DeInit &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[8a7]"></a>ETH_StructInit</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[15e]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[160]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Get_Speed
</UL>

<P><STRONG><a name="[15d]"></a>ETH_Init</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = ETH_Init &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[166]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[165]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[164]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[163]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[162]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[161]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_init
</UL>

<P><STRONG><a name="[bf6]"></a>ETH_GetFlowControlBusyStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bf7]"></a>ETH_InitiatePauseControlFrame</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bf8]"></a>ETH_BackPressureActivationCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bf9]"></a>ETH_GetMACFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bfa]"></a>ETH_GetMACITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bfb]"></a>ETH_MACITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_init
</UL>

<P><STRONG><a name="[bfc]"></a>ETH_GetMACAddress</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bfd]"></a>ETH_MACAddressPerfectFilterCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bfe]"></a>ETH_MACAddressFilterConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[bff]"></a>ETH_MACAddressMaskBytesFilterConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>ETH_Get_Received_Frame</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Get_Received_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_input
</UL>

<P><STRONG><a name="[c00]"></a>ETH_Get_Received_Frame_interrupt</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>ETH_Prepare_Transmit_Descriptors</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_output
</UL>

<P><STRONG><a name="[3c4]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_init
</UL>

<P><STRONG><a name="[3ca]"></a>ETH_CheckFrameReceived</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
</UL>

<P><STRONG><a name="[3c3]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_init
</UL>

<P><STRONG><a name="[c01]"></a>ETH_GetDMATxDescFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c02]"></a>ETH_GetDMATxDescCollisionCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c03]"></a>ETH_SetDMATxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c04]"></a>ETH_DMATxDescTransmitITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c05]"></a>ETH_DMATxDescFrameSegmentConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c06]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c07]"></a>ETH_DMATxDescCRCCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c08]"></a>ETH_DMATxDescSecondAddressChainedCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c09]"></a>ETH_DMATxDescShortFramePaddingCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c0a]"></a>ETH_DMATxDescBufferSizeConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c0b]"></a>ETH_GetDMARxDescFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c0c]"></a>ETH_GetDMAPTPRxDescExtendedFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c0d]"></a>ETH_SetDMARxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
</UL>

<P><STRONG><a name="[c0e]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c0f]"></a>ETH_GetDMARxDescBufferSize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32f4x7_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFrameLength
</UL>

<P><STRONG><a name="[c10]"></a>ETH_EnhancedDescriptorCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[8a5]"></a>ETH_SoftwareReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[8a6]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[c11]"></a>ETH_GetDMAFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c12]"></a>ETH_DMAClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[8a8]"></a>ETH_DMAITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[c13]"></a>ETH_GetDMAITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
</UL>

<P><STRONG><a name="[c14]"></a>ETH_GetTransmitProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c15]"></a>ETH_GetReceiveProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c16]"></a>ETH_GetFlushTransmitFIFOStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c17]"></a>ETH_GetDMAOverflowStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c18]"></a>ETH_GetRxOverflowMissedFrameCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c19]"></a>ETH_GetBufferUnavailableMissedFrameCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c1a]"></a>ETH_GetCurrentTxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c1b]"></a>ETH_GetCurrentRxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c1c]"></a>ETH_GetCurrentTxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c1d]"></a>ETH_GetCurrentRxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c1e]"></a>ETH_ResumeDMATransmission</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c1f]"></a>ETH_ResumeDMAReception</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c20]"></a>ETH_SetReceiveWatchdogTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>ETH_PHYLoopBackCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
</UL>

<P><STRONG><a name="[c21]"></a>ETH_ResetWakeUpFrameFilterRegisterPointer</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c22]"></a>ETH_SetWakeUpFrameFilterRegister</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c23]"></a>ETH_GlobalUnicastWakeUpCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c24]"></a>ETH_GetPMTFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c25]"></a>ETH_WakeUpFrameDetectionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c26]"></a>ETH_MagicPacketDetectionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c27]"></a>ETH_PowerDownCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c28]"></a>ETH_MMCCounterFullPreset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c29]"></a>ETH_MMCCounterHalfPreset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c2a]"></a>ETH_MMCCounterFreezeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c2b]"></a>ETH_MMCResetOnReadCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c2c]"></a>ETH_MMCCounterRolloverCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c2d]"></a>ETH_MMCCountersReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c2e]"></a>ETH_MMCITConfig</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c2f]"></a>ETH_GetMMCITStatus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[c30]"></a>ETH_GetMMCRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
</UL>

<P><STRONG><a name="[845]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_InitAdc
</UL>

<P><STRONG><a name="[c31]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c32]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c33]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[848]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_InitAdc
</UL>

<P><STRONG><a name="[c34]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c35]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c36]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c37]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c38]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[846]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetAdc
</UL>

<P><STRONG><a name="[94e]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetAdc
</UL>

<P><STRONG><a name="[c39]"></a>ADC_SoftwareSTOPConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c3a]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c3b]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c3c]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c3d]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c3e]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[950]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetAdc
</UL>

<P><STRONG><a name="[c3f]"></a>MY_ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c40]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c41]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c42]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c43]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c44]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c45]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c46]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c47]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c48]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c49]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c4a]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c4b]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c4c]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c4d]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[847]"></a>ADC_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
</UL>

<P><STRONG><a name="[94f]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetAdc
</UL>

<P><STRONG><a name="[c4e]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c4f]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[c50]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>DAC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[831]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[c51]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[836]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[c52]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c53]"></a>DAC_DualSoftwareTriggerCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c54]"></a>DAC_WaveGenerationCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c55]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c56]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c57]"></a>DAC_SetDualChannelData</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c58]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[837]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[832]"></a>DAC_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[c59]"></a>DAC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c5a]"></a>DAC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c5b]"></a>DAC_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[c5c]"></a>DAC_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dac.o(.text), UNUSED)

<P><STRONG><a name="[84f]"></a>DCMI_DeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_camera
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_camera
</UL>

<P><STRONG><a name="[855]"></a>DCMI_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
</UL>

<P><STRONG><a name="[c5d]"></a>DCMI_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[c5e]"></a>DCMI_CROPConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[c5f]"></a>DCMI_CROPCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[c60]"></a>DCMI_SetEmbeddedSynchroCodes</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[858]"></a>DCMI_JPEGCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
</UL>

<P><STRONG><a name="[84e]"></a>DCMI_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_camera
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_camera
</UL>

<P><STRONG><a name="[85b]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_capture_img
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture_img
</UL>

<P><STRONG><a name="[c61]"></a>DCMI_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[856]"></a>DCMI_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
</UL>

<P><STRONG><a name="[c62]"></a>DCMI_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[c63]"></a>DCMI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[c64]"></a>DCMI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[861]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[8e1]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
</UL>

<P><STRONG><a name="[82b]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DAC1Configuration
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
</UL>

<P><STRONG><a name="[82a]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DAC1Configuration
</UL>

<P><STRONG><a name="[829]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_camera
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_camera
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DAC1Configuration
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
</UL>

<P><STRONG><a name="[c65]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[8e2]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
</UL>

<P><STRONG><a name="[c66]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c67]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c68]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c69]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c6a]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c6b]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c6c]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[c6d]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[862]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[828]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DAC1Configuration
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
</UL>

<P><STRONG><a name="[827]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DAC1Configuration
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[840]"></a>DMA_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[841]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[c6e]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[86d]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_recv_enable
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dht11
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[c6f]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[c70]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[c71]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[c72]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[8e9]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[86f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_recv_enable
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[16e]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[87c]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>

<P><STRONG><a name="[c73]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c74]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[942]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadSlaveAck
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadByte
</UL>

<P><STRONG><a name="[c75]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c76]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c77]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[93e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Start
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendByte
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadSlaveAck
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadByte
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendACK
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Stop
</UL>

<P><STRONG><a name="[93d]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Start
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendByte
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadSlaveAck
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadByte
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendACK
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Stop
</UL>

<P><STRONG><a name="[c78]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c79]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c7a]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[853]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[170]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[8bd]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[c7b]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c7c]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c7d]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c7e]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c7f]"></a>PWR_MainRegulatorModeConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c80]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c81]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c82]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c83]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c84]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[c85]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c86]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[171]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[c87]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c88]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8be]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[c89]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8a]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8b]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8c]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8d]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8e]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[854]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
</UL>

<P><STRONG><a name="[c8f]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c91]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c92]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c93]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c94]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hard_timer_clk
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_switch_samplerate
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[8bf]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[8c0]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[c95]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c96]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[82f]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_init
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[850]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rng
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_camera
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_camera
</UL>

<P><STRONG><a name="[c97]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[82e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_us_timer
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[844]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_init
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_InitAdc
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[16f]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[174]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_DeInit
</UL>

<P><STRONG><a name="[c98]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[16b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_InitAdc
</UL>

<P><STRONG><a name="[c99]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9a]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9b]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9c]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9d]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9e]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9f]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ca0]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ca1]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RNG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_rng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
</UL>

<P><STRONG><a name="[87a]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rng
</UL>

<P><STRONG><a name="[87b]"></a>RNG_GetRandomNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
</UL>

<P><STRONG><a name="[ca2]"></a>RNG_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[ca3]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[ca4]"></a>RNG_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[ca5]"></a>RNG_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[ca6]"></a>RNG_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rng.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[176]"></a>RTC_EnterInitMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[175]"></a>RTC_DeInit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[179]"></a>RTC_ExitInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[178]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[ca7]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[ca8]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RTC_RefClockCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[ca9]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>RTC_SetTime</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[caa]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>RTC_GetTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeShow
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
</UL>

<P><STRONG><a name="[cab]"></a>RTC_GetSubSecond</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>RTC_SetDate</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
</UL>

<P><STRONG><a name="[cac]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>RTC_GetDate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
</UL>

<P><STRONG><a name="[181]"></a>RTC_SetAlarm</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[cad]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RTC_GetAlarm</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmShow
</UL>

<P><STRONG><a name="[cae]"></a>RTC_AlarmCmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[caf]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb0]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb1]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb2]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb3]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb4]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb5]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb6]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb7]"></a>RTC_OutputConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[184]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[cb8]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cb9]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cba]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cbb]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[cbc]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cbd]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cbe]"></a>RTC_TamperCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cbf]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cc0]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cc1]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cc2]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cc3]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[8bb]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[8c2]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[cc4]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cc5]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cc6]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[cc7]"></a>RTC_ITConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cc8]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[8c3]"></a>RTC_ClearFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[cc9]"></a>RTC_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cca]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8db]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ccb]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[8de]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8dd]"></a>SDIO_SetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[ccc]"></a>SDIO_GetPowerState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[8cc]"></a>SDIO_SendCommand</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>

<P><STRONG><a name="[ccd]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[8c8]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
</UL>

<P><STRONG><a name="[8c9]"></a>SDIO_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
</UL>

<P><STRONG><a name="[8e7]"></a>SDIO_DataConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[cce]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[ccf]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd0]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd1]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd2]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd3]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd4]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[8df]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8dc]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[cd5]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd6]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd7]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cd8]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[8e5]"></a>SDIO_DMACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
</UL>

<P><STRONG><a name="[8c5]"></a>SDIO_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sdio_int
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
</UL>

<P><STRONG><a name="[8cb]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[8c7]"></a>SDIO_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp4Error
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
</UL>

<P><STRONG><a name="[cd9]"></a>SDIO_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[cda]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[90c]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
</UL>

<P><STRONG><a name="[cdb]"></a>I2S_Init</STRONG> (Thumb, 350 bytes, Stack size 36 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[cdc]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[cdd]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[90d]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
</UL>

<P><STRONG><a name="[cde]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[cdf]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce0]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce1]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce2]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce3]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce4]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8fa]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>

<P><STRONG><a name="[8fb]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>

<P><STRONG><a name="[ce5]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce6]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce7]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce8]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[ce9]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[cea]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[8f9]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>

<P><STRONG><a name="[ceb]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[cec]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[90e]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[ced]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[86c]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_recv_enable
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dht11
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[8a3]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[cee]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[cef]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_us_timer
</UL>

<P><STRONG><a name="[833]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_us_timer
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[cf0]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cf1]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cf2]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cf3]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[83a]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_timer_by_counter
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_switch_samplerate
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
</UL>

<P><STRONG><a name="[880]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_count
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
</UL>

<P><STRONG><a name="[cf4]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cf5]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cf6]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[835]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_us_timer
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[cf7]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cf8]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[838]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_timer_by_counter
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_timer
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_timer
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_us_timer
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[cf9]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[88f]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
</UL>

<P><STRONG><a name="[cfa]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cfb]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cfc]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[889]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SelectOCxM
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_pwm_disable
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_pwm_enable
</UL>

<P><STRONG><a name="[cfd]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cfe]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[cff]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d00]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d01]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d02]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d03]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d04]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d05]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[891]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
</UL>

<P><STRONG><a name="[d06]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d07]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d08]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d09]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0a]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0b]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0c]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0d]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0e]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d0f]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d10]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d11]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d12]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d13]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d14]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d15]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d16]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d17]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d18]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[191]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18f]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18d]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18b]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[d19]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[d1a]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d1b]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d1c]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d1d]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[890]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
</UL>

<P><STRONG><a name="[d1e]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[892]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
</UL>

<P><STRONG><a name="[d1f]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d20]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[83c]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
</UL>

<P><STRONG><a name="[d21]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d22]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[883]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>

<P><STRONG><a name="[84b]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[83d]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
</UL>

<P><STRONG><a name="[d23]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d24]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d25]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d26]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[195]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[197]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[199]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[198]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[19a]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[834]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[d27]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d28]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d29]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d2a]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[d2b]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[19c]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[d2c]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d2d]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d2e]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8ec]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[d2f]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d30]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d31]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d32]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d33]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d34]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d35]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d36]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d37]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d38]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d39]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d3a]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d3b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d3c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d3d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d3e]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d3f]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[d40]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8ed]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[d41]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8f5]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
</UL>

<P><STRONG><a name="[d42]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[8ee]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[d43]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[d44]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[d45]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskTimeQuantaSet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemSet
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[1a1]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskTimeQuantaSet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemSet
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[d46]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[d47]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[d48]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[d49]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>OSIdleTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[1ab]"></a>OSInitHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[204]"></a>OSStatTaskHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[209]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[20c]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[21d]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[208]"></a>OSTaskStkInit</STRONG> (Thumb, 596 bytes, Stack size 20 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[c2]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[223]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[19f]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d4a]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>OSCfg_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_cfg_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1a6]"></a>OS_IdleTask</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1a8]"></a>OS_IdleTaskInit</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ad]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1aa]"></a>OSInit</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4b]"></a>OSIntEnter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>OSIntExit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[1ba]"></a>OSSched</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[1bc]"></a>OSSchedLock</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[1bd]"></a>OSSchedUnlock</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[1be]"></a>OSSchedRoundRobinCfg</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c0]"></a>OS_RdyListMoveHeadToTail</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
</UL>

<P><STRONG><a name="[1bf]"></a>OSSchedRoundRobinYield</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[1c1]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4c]"></a>OSVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1c9]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1c8]"></a>OS_PendDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1c3]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[1c5]"></a>OS_TaskBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1c7]"></a>OS_Pend</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[1cc]"></a>OS_PendListRemove1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>

<P><STRONG><a name="[1cb]"></a>OS_PendListRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
</UL>

<P><STRONG><a name="[1d4]"></a>OS_PendAbort1</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
</UL>

<P><STRONG><a name="[1d0]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1cf]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1cd]"></a>OS_RdyListInsert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
</UL>

<P><STRONG><a name="[1d1]"></a>OS_TaskRdy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
</UL>

<P><STRONG><a name="[1d3]"></a>OS_PendAbort</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort1
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
</UL>

<P><STRONG><a name="[1da]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1d5]"></a>OS_PendListChangePrio</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[1de]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemClr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexClr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[d4d]"></a>OS_PendListInsertHead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>OS_PendObjDel1</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendObjDel1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
</UL>

<P><STRONG><a name="[1d6]"></a>OS_PendObjDel</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_PendObjDel &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel1
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[1d9]"></a>OS_Post1</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1d8]"></a>OS_Post</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>

<P><STRONG><a name="[1db]"></a>OS_SchedRoundRobin</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_SchedRoundRobin &rArr; OS_RdyListMoveHeadToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1b6]"></a>OS_Dbg_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1dc]"></a>OS_MsgPoolCreate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
</UL>

<P><STRONG><a name="[1ae]"></a>OS_MsgPoolInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_MsgPoolInit &rArr; OS_MsgPoolCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ea]"></a>OS_MsgQFreeAll</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
</UL>

<P><STRONG><a name="[1e7]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1ef]"></a>OS_MsgQGet</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_MsgQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[1f1]"></a>OS_MsgQPut</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[1df]"></a>OS_MutexDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[1dd]"></a>OSMutexCreate</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListAdd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>

<P><STRONG><a name="[1e0]"></a>OS_MutexClr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[1e2]"></a>OS_MutexDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[1e1]"></a>OSMutexDel</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListRemove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexClr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_destory
</UL>

<P><STRONG><a name="[1e3]"></a>OSMutexPend</STRONG> (Thumb, 616 bytes, Stack size 64 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[1e4]"></a>OSMutexPost</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
</UL>

<P><STRONG><a name="[1af]"></a>OS_MutexInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ac]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b8]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[1ce]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1c4]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[1e8]"></a>OS_QDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[1e6]"></a>OSQCreate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QDbgListAdd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
</UL>

<P><STRONG><a name="[1e9]"></a>OS_QClr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QClr &rArr; OS_MsgQFreeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[1ec]"></a>OS_QDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[1eb]"></a>OSQDel</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSQDel &rArr; OS_PendObjDel &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QDbgListRemove
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfree
</UL>

<P><STRONG><a name="[1ed]"></a>OSQFlush</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>

<P><STRONG><a name="[1ee]"></a>OSQPend</STRONG> (Thumb, 482 bytes, Stack size 72 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQGet
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgrcv
</UL>

<P><STRONG><a name="[1f0]"></a>OS_QPost</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[1f2]"></a>OSQPost</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
</UL>

<P><STRONG><a name="[1b0]"></a>OS_QInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1f4]"></a>OS_SemDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[1f3]"></a>OSSemCreate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListAdd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
</UL>

<P><STRONG><a name="[1f5]"></a>OS_SemClr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SemClr
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[1f7]"></a>OS_SemDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[1f6]"></a>OSSemDel</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSSemDel &rArr; OS_PendObjDel &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListRemove
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemClr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destory
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
</UL>

<P><STRONG><a name="[1f8]"></a>OSSemPend</STRONG> (Thumb, 406 bytes, Stack size 64 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_wait
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
</UL>

<P><STRONG><a name="[1f9]"></a>OS_SemPost</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[1fa]"></a>OSSemPost</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_post
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>

<P><STRONG><a name="[1fb]"></a>OSSemSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
</UL>

<P><STRONG><a name="[1b1]"></a>OS_SemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1fc]"></a>OSStatReset</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStatReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrResetPeak
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListResetPeak
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[1ff]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSStatTaskCPUUsageInit &rArr; OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[203]"></a>OS_StatTask</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>OS_StatTaskInit</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[206]"></a>OSTaskChangePrio</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[20a]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[207]"></a>OS_TaskInitTCB</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1a9]"></a>OSTaskCreate</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[20d]"></a>OS_TaskDbgListRemove</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[20b]"></a>OSTaskDel</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListRemove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
</UL>

<P><STRONG><a name="[20e]"></a>OSTaskQFlush</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>

<P><STRONG><a name="[20f]"></a>OSTaskQPend</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQGet
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[210]"></a>OS_TaskQPost</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
</UL>

<P><STRONG><a name="[211]"></a>OSTaskQPost</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
</UL>

<P><STRONG><a name="[212]"></a>OSTaskRegGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[213]"></a>OSTaskRegGetID</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[214]"></a>OSTaskRegSet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[215]"></a>OS_TaskResume</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskResume &rArr; OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[202]"></a>OSTaskResume</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_TaskResume &rArr; OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[216]"></a>OSTaskSemPend</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[217]"></a>OSTaskSemPendAbort</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[218]"></a>OS_TaskSemPost</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>

<P><STRONG><a name="[219]"></a>OSTaskSemPost</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[21a]"></a>OSTaskSemSet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[205]"></a>OSTaskStkChk</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[21b]"></a>OS_TaskSuspend</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[200]"></a>OSTaskSuspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[21c]"></a>OSTaskTimeQuantaSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[1b2]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[65]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[1d2]"></a>OS_TickListRemove</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
</UL>

<P><STRONG><a name="[21e]"></a>OS_TickListUpdate</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdate &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[21f]"></a>OS_TickTask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>OS_TickListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
</UL>

<P><STRONG><a name="[1b3]"></a>OS_TickTaskInit</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c6]"></a>OS_TickListInsert</STRONG> (Thumb, 430 bytes, Stack size 36 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[1fd]"></a>OS_TickListResetPeak</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, os_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[201]"></a>OSTimeDly</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[221]"></a>OSTimeGet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[222]"></a>OSTimeSet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[1a2]"></a>OSTimeTick</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[225]"></a>OS_TmrDbgListAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[224]"></a>OSTmrCreate</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmrCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
</UL>

<P><STRONG><a name="[229]"></a>OS_TmrClr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[228]"></a>OS_TmrUnlink</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[227]"></a>OS_TmrDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[226]"></a>OSTmrDel</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmrDel &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrDbgListRemove
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrClr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
</UL>

<P><STRONG><a name="[22a]"></a>OSTmrRemainGet</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[22c]"></a>OS_TmrLink</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrLink
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
</UL>

<P><STRONG><a name="[22b]"></a>OSTmrStart</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmrStart &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
</UL>

<P><STRONG><a name="[22d]"></a>OSTmrStateGet</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[22e]"></a>OSTmrStop</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSTmrStop &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
</UL>

<P><STRONG><a name="[22f]"></a>OS_TmrTask</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>OS_TmrInit</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1fe]"></a>OS_TmrResetPeak</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[1a4]"></a>enter_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atomic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>exit_interrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = exit_interrupt &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[230]"></a>local_irq_save</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = local_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add_return
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_set
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_spin_lock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
</UL>

<P><STRONG><a name="[231]"></a>local_irq_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add_return
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test_set
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_spin_unlock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
</UL>

<P><STRONG><a name="[232]"></a>enter_critical</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[233]"></a>exit_critical</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[234]"></a>atomic_test_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>

<P><STRONG><a name="[235]"></a>atomic_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = atomic_set &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[236]"></a>atomic_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = atomic_read &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
</UL>

<P><STRONG><a name="[237]"></a>atomic_add</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = atomic_add &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_lock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_malloc
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[238]"></a>atomic_sub</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = atomic_sub &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_lock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_mfree
</UL>

<P><STRONG><a name="[239]"></a>atomic_add_return</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>

<P><STRONG><a name="[23a]"></a>atomic_sub_return</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = atomic_sub_return &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skbmem
</UL>

<P><STRONG><a name="[23b]"></a>mem_slide_check</STRONG> (Thumb, 1858 bytes, Stack size 88 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>

<P><STRONG><a name="[876]"></a>sys_meminit</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_meminit
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_init
</UL>

<P><STRONG><a name="[82]"></a>mem_free</STRONG> (Thumb, 704 bytes, Stack size 32 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_delete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destory
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_destory
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfree
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wep_key
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wpa_enable
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_encrypt_mode
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_auth_mode
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_deep_sleep
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_deep_sleep
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_pm_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_mode
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_shutdown_fw
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_coarse_tmr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_stop
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_put_bss
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_dtim_period
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wps_cfg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_timer
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_mfree
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skbmem
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_free
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forced_pitch_quant
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_to_lpc
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_to_lsp
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicomb
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmf_synth
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmf_decomp
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_impulse_response
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_percep_zero16
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;residue_percep_zero16
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noise_codebook_quant
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_shape_sign_unquant
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_weighted_codebook
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_destroy
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_free_picture
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_camera
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Mem_Free
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_s
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_stereo
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_finish
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_finish
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_record_audio
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_mp3_format
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mp3_format
<LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_voice_task
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_image_recog_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[d4e]"></a>get_mem_size</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, memory.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>mem_check</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[241]"></a>mem_trim</STRONG> (Thumb, 730 bytes, Stack size 48 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_trim &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[242]"></a>mem_malloc_ex</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_new
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_init
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_timer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_malloc
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forced_pitch_quant
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_to_lpc
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_to_lsp
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicomb
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmf_synth
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmf_decomp
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_impulse_response
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_percep_zero16
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;residue_percep_zero16
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noise_codebook_quant
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_shape_sign_unquant
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_weighted_codebook
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Mem_Malloc
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_s
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_stereo
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_record_audio
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[243]"></a>mem_calloc_ex</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_alloc
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_init
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_and_encode_text_event
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mp3_format
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;url_encode_utf8_text
</UL>

<P><STRONG><a name="[85e]"></a>mem_get_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[85f]"></a>mem_get_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[245]"></a>mem_realloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mem_realloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_realloc
</UL>

<P><STRONG><a name="[247]"></a>thread_create</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = thread_create &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send
</UL>

<P><STRONG><a name="[24a]"></a>thread_exit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = thread_exit &rArr; OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_camera_task
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_camera_server
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
</UL>

<P><STRONG><a name="[3cc]"></a>thread_myself</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
</UL>

<P><STRONG><a name="[250]"></a>initList</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
</UL>

<P><STRONG><a name="[24b]"></a>insertTailList</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = insertTailList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
</UL>

<P><STRONG><a name="[24c]"></a>removeHeadList</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = removeHeadList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
</UL>

<P><STRONG><a name="[d4f]"></a>getListSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[d50]"></a>delEntryList</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>create_workqueue</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = create_workqueue &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initList
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_tasklet
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[252]"></a>destroy_workqueue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = destroy_workqueue &rArr; del_event &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_terminate_workqueue
</UL>

<P><STRONG><a name="[253]"></a>init_timer_tasklet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_timer_tasklet &rArr; create_workqueue &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work_thread
</UL>

<P><STRONG><a name="[26f]"></a>init_work</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[254]"></a>schedule_work</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timer_tasklet
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_interrupt
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[256]"></a>schedule_timer_tasklet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = schedule_timer_tasklet &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tasklet_callback
</UL>

<P><STRONG><a name="[257]"></a>timer_tasklet_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = timer_tasklet_callback &rArr; schedule_timer_tasklet &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timer_tasklet
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_timer_callback
</UL>

<P><STRONG><a name="[258]"></a>init_work_thread</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = init_work_thread &rArr; init_timer_tasklet &rArr; create_workqueue &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer_tasklet
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[259]"></a>mem_malloc2</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, memory2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_malloc
</UL>

<P><STRONG><a name="[249]"></a>mem_free2</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, memory2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc2
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data_list
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_free
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[248]"></a>mem_calloc2</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memory2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc2
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[25c]"></a>sys_meminit2</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, memory2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sys_meminit2 &rArr; prvHeapInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_init
</UL>

<P><STRONG><a name="[860]"></a>mem_get_size2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memory2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[25d]"></a>mem_get_free2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memory2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_get_free2
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[25f]"></a>mem_realloc2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, memory2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[260]"></a>msgget</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, msg_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_open
</UL>

<P><STRONG><a name="[261]"></a>msgsnd</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, msg_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_and_encode_text_event
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_voice_recording_event
</UL>

<P><STRONG><a name="[262]"></a>msgrcv</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, msg_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = msgrcv &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_voice_ai_event
</UL>

<P><STRONG><a name="[263]"></a>msgfree</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, msg_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = msgfree &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_close
</UL>

<P><STRONG><a name="[96f]"></a>msg_q_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, msg_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[264]"></a>mutex_init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mutex_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_module
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensers
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[265]"></a>mutex_lock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_free_picture
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_get_picture
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img_local
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_host_by_name
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_test_recv
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_camera_server
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_send_data
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
</UL>

<P><STRONG><a name="[266]"></a>mutex_unlock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = mutex_unlock &rArr; OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_free_picture
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;web_get_picture
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img_local
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_host_by_name
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_test_recv
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_camera_server
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_send_data
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
</UL>

<P><STRONG><a name="[267]"></a>mutex_destory</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[268]"></a>sem_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>

<P><STRONG><a name="[269]"></a>sem_wait</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = sem_wait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[26a]"></a>sem_post</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[305]"></a>is_sem_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>

<P><STRONG><a name="[26b]"></a>sem_destory</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sem_destory &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[26e]"></a>mstoticks</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
</UL>

<P><STRONG><a name="[26c]"></a>comm_timer_callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = comm_timer_callback &rArr; timer_tasklet_callback &rArr; schedule_timer_tasklet &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tasklet_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[23c]"></a>os_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destory
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_post
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_wait
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_destory
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgrcv
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_set_bus_clock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_netdev
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_broadcast_event
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_select_queue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_close
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_netif_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_input
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ibss_joined
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_connect_result
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_cqm_rssi_notify
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ready_on_channel
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_remain_on_channel_expired
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_michael_mic_failure
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_under_panic
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_over_panic
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_speex_fatal
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ir_recv
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_start_send
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dbg_switch
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rst_stat
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img_local
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_capture_img
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture_img
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_switch_samplerate
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_voice_ai_event
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_and_encode_text_event
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_voice_recording_event
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ai_audio_pcm_data_len
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ai_event
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_recv_thread
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_stats
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_leave_adhoc
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop_ap
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_web_cfg
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_relay_status
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_dbg
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sys_info
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_bright
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_switch
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_tx
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Mode
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Mode
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_recv_thread
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_poll_callback
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_record_to_flash
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Read
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_web_cfg
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_end
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_to_flash_timeout_cb
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_record_audio
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_mp3_stream
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_open
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_speex_decode
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_loopback_test
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_camera_task
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_camera_server
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send_stop
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_join
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_send_data
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_client
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_disable
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stop_ap
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_get_stats
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_leave_adhoc
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_disconnect
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_mp3_format
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mp3_format
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFrameInfo
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
</UL>

<P><STRONG><a name="[26d]"></a>timer_setup</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstoticks
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_timer
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;misc_init
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_record_to_flash
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key_dev
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_senser_poll
</UL>

<P><STRONG><a name="[270]"></a>timer_pending</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_pending &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
</UL>

<P><STRONG><a name="[271]"></a>mod_timer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mod_timer &rArr; OSTmrStart &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mod_timer
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_led_twink_start
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_record_to_flash
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_senser_poll
</UL>

<P><STRONG><a name="[272]"></a>add_timer</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = add_timer &rArr; OSTmrStart &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;misc_init
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key_dev
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_mp3
</UL>

<P><STRONG><a name="[273]"></a>del_timer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_led_twink_stop
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_led_twink_start
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_mp3
</UL>

<P><STRONG><a name="[274]"></a>timer_free</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = timer_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_timer
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_to_flash_timeout_cb
</UL>

<P><STRONG><a name="[15f]"></a>sleep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstoticks
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sched_timeout
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_udelay
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_start_read
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetAdc
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Delay
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
</UL>

<P><STRONG><a name="[24f]"></a>init_event</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sta_dev
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_uap_dev
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_recv_thread
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[276]"></a>wait_event</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wait_ioctl_complete
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[24d]"></a>wait_event_timeout</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wait_ioctl_complete
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ai_audio_pcm_data_len
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_recv_thread
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_recv_thread
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[255]"></a>wake_up</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_cac_block
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassoc_timer_func
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_work_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_shutdown_fw_complete
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_init_fw_complete
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ai_event
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_next
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EXTI11_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[251]"></a>del_event</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = del_event &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_camera
</UL>

<P><STRONG><a name="[277]"></a>clear_wait_event</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = clear_wait_event &rArr; OSSemSet
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
</UL>

<P><STRONG><a name="[278]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[27f]"></a>netconn_delete</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[281]"></a>netconn_getaddr</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[282]"></a>netconn_bind</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[283]"></a>netconn_connect</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[284]"></a>netconn_disconnect</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = netconn_disconnect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[285]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[286]"></a>netconn_accept</STRONG> (Thumb, 788 bytes, Stack size 24 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = netconn_accept &rArr; sys_arch_mbox_fetch &rArr; msgrcv &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[289]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[28a]"></a>netconn_recv</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[28b]"></a>netconn_recved</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = netconn_recved &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[28c]"></a>netconn_send</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = netconn_send &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
</UL>

<P><STRONG><a name="[28d]"></a>netconn_sendto</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[28e]"></a>netconn_write_partly</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netconn_write_partly &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[291]"></a>netconn_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[292]"></a>netconn_shutdown</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[293]"></a>netconn_join_leave_group</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, api_lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[294]"></a>netconn_gethostbyname</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_host_by_name
</UL>

<P><STRONG><a name="[280]"></a>netconn_free</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; sem_destory &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[279]"></a>netconn_alloc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[67]"></a>do_newconn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = do_newconn &rArr; pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>do_delconn</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>do_bind</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_debug &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>do_connect</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>do_disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_disconnect &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>do_listen</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>do_send</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>do_recv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>do_write</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = do_write &rArr; do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>do_getaddr</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_getaddr &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>do_close</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = do_close &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>do_join_leave_group</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>do_gethostbyname</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = do_gethostbyname &rArr; dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(.text)
</UL>
<P><STRONG><a name="[2ca]"></a>netbuf_new</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
</UL>

<P><STRONG><a name="[29c]"></a>netbuf_delete</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
</UL>

<P><STRONG><a name="[2cb]"></a>netbuf_alloc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2cc]"></a>netbuf_free</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[2cd]"></a>netbuf_ref</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, netbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[2ce]"></a>netbuf_chain</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2d0]"></a>netbuf_data</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2d1]"></a>netbuf_next</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2d2]"></a>netbuf_first</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, netbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2d3]"></a>lwip_gethostbyname</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, netdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[2d4]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, netdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2d6]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lwip_freeaddrinfo &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
</UL>

<P><STRONG><a name="[2d7]"></a>lwip_getaddrinfo</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, netdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
</UL>

<P><STRONG><a name="[33e]"></a>lwip_socket_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2dc]"></a>get_socket</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connect_stat
</UL>

<P><STRONG><a name="[2dd]"></a>lwip_accept</STRONG> (Thumb, 728 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lwip_accept &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_camera_task
</UL>

<P><STRONG><a name="[2de]"></a>lwip_bind</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
</UL>

<P><STRONG><a name="[2df]"></a>lwip_close</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_join
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_client
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_close
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
</UL>

<P><STRONG><a name="[2e0]"></a>lwip_connect</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = lwip_connect &rArr; netconn_connect &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
</UL>

<P><STRONG><a name="[2e1]"></a>lwip_listen</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
</UL>

<P><STRONG><a name="[2e2]"></a>lwip_recvfrom</STRONG> (Thumb, 714 bytes, Stack size 96 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
</UL>

<P><STRONG><a name="[2e4]"></a>lwip_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[2e5]"></a>lwip_recv</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_recv
</UL>

<P><STRONG><a name="[2e6]"></a>lwip_sendto</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_send_data
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
</UL>

<P><STRONG><a name="[2e7]"></a>lwip_send</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_test_recv
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_client
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_send
</UL>

<P><STRONG><a name="[2e8]"></a>lwip_socket</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
</UL>

<P><STRONG><a name="[2e9]"></a>lwip_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[2ec]"></a>lwip_select</STRONG> (Thumb, 988 bytes, Stack size 120 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lwip_select &rArr; sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_select
</UL>

<P><STRONG><a name="[2ed]"></a>lwip_shutdown</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_shutdown
</UL>

<P><STRONG><a name="[2ef]"></a>lwip_getpeername</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[2f0]"></a>lwip_getsockname</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>

<P><STRONG><a name="[2f1]"></a>lwip_getsockopt</STRONG> (Thumb, 440 bytes, Stack size 64 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>

<P><STRONG><a name="[2f2]"></a>lwip_setsockopt</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_camera_task
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_settimeout
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
</UL>

<P><STRONG><a name="[2f3]"></a>lwip_ioctl</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[2f4]"></a>lwip_fcntl</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_set_nonblock
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_set_block
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_get_nonblock
</UL>

<P><STRONG><a name="[a6]"></a>tcpip_input</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcpip_input &rArr; sys_mbox_trypost &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[296]"></a>tcpip_callback_with_block</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[2fb]"></a>tcpip_timeout</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[2fc]"></a>tcpip_untimeout</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[27a]"></a>tcpip_apimsg</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recved
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[2fd]"></a>tcpip_callbackmsg_new</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
</UL>

<P><STRONG><a name="[2fe]"></a>tcpip_callbackmsg_delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[2ff]"></a>tcpip_trycallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>

<P><STRONG><a name="[300]"></a>tcpip_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
</UL>

<P><STRONG><a name="[303]"></a>pbuf_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[304]"></a>mem_free_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[33c]"></a>sys_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[d51]"></a>sys_jiffies</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>

<P><STRONG><a name="[295]"></a>sys_sem_new</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_init
</UL>

<P><STRONG><a name="[27b]"></a>sys_sem_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[2ac]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[27d]"></a>sys_sem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sys_sem_free &rArr; sem_destory &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destory
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_destory
</UL>

<P><STRONG><a name="[29e]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_join_leave_group
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_unlock
</UL>

<P><STRONG><a name="[297]"></a>sys_arch_sem_wait</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = sys_arch_sem_wait &rArr; sem_wait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_lock
</UL>

<P><STRONG><a name="[2ad]"></a>sys_mbox_new</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[27c]"></a>sys_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[2ae]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[2fa]"></a>sys_mbox_post</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_wait
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_untimeout
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_timeout
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
</UL>

<P><STRONG><a name="[29b]"></a>sys_mbox_trypost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sys_mbox_trypost &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[287]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_fetch &rArr; msgrcv &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sem_empty
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_post
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgrcv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[2b6]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; msgrcv &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgrcv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[27e]"></a>sys_mbox_free</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sys_mbox_free &rArr; sem_destory &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destory
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfree
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[302]"></a>sys_thread_new</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, sys_arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sys_thread_new &rArr; thread_create &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice_client
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_client
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_create
</UL>

<P><STRONG><a name="[31b]"></a>dhcp_renew</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[31f]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
</UL>

<P><STRONG><a name="[321]"></a>dhcp_release</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[325]"></a>dhcp_fine_tmr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
</UL>

<P><STRONG><a name="[328]"></a>dhcp_set_struct</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[329]"></a>dhcp_cleanup</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[32a]"></a>dhcp_stop</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>

<P><STRONG><a name="[32c]"></a>dhcp_start</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
</UL>

<P><STRONG><a name="[32d]"></a>dhcp_inform</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[32e]"></a>dhcp_network_changed</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dhcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[330]"></a>dhcp_arp_reply</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[327]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>

<P><STRONG><a name="[333]"></a>dns_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dns_init &rArr; udp_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[99d]"></a>dns_getserver</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dns.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
</UL>

<P><STRONG><a name="[338]"></a>dns_tmr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
</UL>

<P><STRONG><a name="[2c9]"></a>dns_gethostbyname</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = dns_gethostbyname &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gethostbyname
</UL>

<P><STRONG><a name="[301]"></a>lwip_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout_debug &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[33d]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[314]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>

<P><STRONG><a name="[315]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>

<P><STRONG><a name="[313]"></a>netif_set_ipaddr</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>

<P><STRONG><a name="[343]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[344]"></a>netif_add</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_netif_init
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[349]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[312]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[347]"></a>netif_remove</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = netif_remove &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_netif_init
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[d52]"></a>netif_find</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>netif_set_up</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_netif_init
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[34c]"></a>netif_set_link_up</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[d53]"></a>netif_set_link_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>pbuf_free</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_input
</UL>

<P><STRONG><a name="[298]"></a>pbuf_alloc</STRONG> (Thumb, 1194 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_input
</UL>

<P><STRONG><a name="[350]"></a>pbuf_alloced_custom</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_alloced_custom &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[30f]"></a>pbuf_realloc</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[351]"></a>pbuf_header</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[37a]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[352]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = pbuf_ref &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[2cf]"></a>pbuf_cat</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[353]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[354]"></a>pbuf_dechain</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[299]"></a>pbuf_copy</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[2e3]"></a>pbuf_copy_partial</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[355]"></a>pbuf_take</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[356]"></a>pbuf_coalesce</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[358]"></a>pbuf_get_at</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[357]"></a>pbuf_memcmp</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[359]"></a>pbuf_memfind</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[35a]"></a>pbuf_strstr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[3a1]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2ba]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[2bd]"></a>raw_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[2b1]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[2c3]"></a>raw_sendto</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[2c2]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[2b8]"></a>raw_remove</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = raw_remove &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
</UL>

<P><STRONG><a name="[2b0]"></a>raw_new</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = raw_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[33b]"></a>stats_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stats.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[35d]"></a>sys_msleep</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sys_msleep &rArr; sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
</UL>

<P><STRONG><a name="[340]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[35e]"></a>tcp_seg_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[34e]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[35f]"></a>tcp_pcb_purge</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[360]"></a>tcp_slowtmr</STRONG> (Thumb, 1488 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[365]"></a>tcp_pcb_remove</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2a9]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[369]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[29d]"></a>tcp_recved</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_recv
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[36a]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[36b]"></a>tcp_process_refused_data</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[36c]"></a>tcp_fasttmr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[36d]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[2aa]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[36e]"></a>tcp_abandon</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2b7]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[2bc]"></a>tcp_bind</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_debug &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
</UL>

<P><STRONG><a name="[2c1]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout_debug &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[370]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[371]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[2bf]"></a>tcp_connect</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[d54]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>tcp_seg_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcp_seg_copy &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[376]"></a>tcp_alloc</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2b4]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[2a3]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[2a5]"></a>tcp_recv</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[2a6]"></a>tcp_sent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[2a8]"></a>tcp_err</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_err &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[2a4]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_listen
</UL>

<P><STRONG><a name="[2a7]"></a>tcp_poll</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_poll &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
</UL>

<P><STRONG><a name="[d55]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>tcp_input</STRONG> (Thumb, 2080 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[372]"></a>tcp_enqueue_flags</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[368]"></a>tcp_send_fin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2a0]"></a>tcp_write</STRONG> (Thumb, 1288 bytes, Stack size 96 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = tcp_write &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
</UL>

<P><STRONG><a name="[37b]"></a>tcp_send_empty_ack</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2a1]"></a>tcp_output</STRONG> (Thumb, 888 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[364]"></a>tcp_rst</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[362]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[37e]"></a>tcp_rexmit</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[379]"></a>tcp_rexmit_fast</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[363]"></a>tcp_keepalive</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[361]"></a>tcp_zero_window_probe</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[2f8]"></a>sys_timeout_debug</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sys_timeout_debug &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_timer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_fine
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timer_coarse
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[367]"></a>tcp_timer_needed</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout_debug &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[342]"></a>sys_timeouts_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout_debug &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[2f9]"></a>sys_untimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sys_untimeout &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[2f5]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_arch_mbox_fetch &rArr; msgrcv &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[33f]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[38c]"></a>udp_input</STRONG> (Thumb, 728 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2bb]"></a>udp_bind</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_bind
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_start
</UL>

<P><STRONG><a name="[310]"></a>udp_sendto_if</STRONG> (Thumb, 526 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2c5]"></a>udp_sendto</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
</UL>

<P><STRONG><a name="[2c4]"></a>udp_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send
</UL>

<P><STRONG><a name="[2be]"></a>udp_connect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[2c0]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disconnect
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_stop
</UL>

<P><STRONG><a name="[2b3]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_start
</UL>

<P><STRONG><a name="[2b9]"></a>udp_remove</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = udp_remove &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_stop
</UL>

<P><STRONG><a name="[2b2]"></a>udp_new</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = udp_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_start
</UL>

<P><STRONG><a name="[38f]"></a>icmp_input</STRONG> (Thumb, 668 bytes, Stack size 48 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[38d]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[393]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[341]"></a>igmp_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, igmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[d56]"></a>igmp_dump_group_list</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, igmp.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>igmp_lookfor_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[345]"></a>igmp_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[348]"></a>igmp_stop</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = igmp_stop &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[34b]"></a>igmp_report_groups</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer &rArr; get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[399]"></a>igmp_input</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2c6]"></a>igmp_joingroup</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = igmp_joingroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_join_leave_group
</UL>

<P><STRONG><a name="[2c7]"></a>igmp_leavegroup</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = igmp_leavegroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_join_leave_group
</UL>

<P><STRONG><a name="[38b]"></a>igmp_tmr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timer
</UL>

<P><STRONG><a name="[383]"></a>inet_chksum_pseudo</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[39f]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[391]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[390]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[35b]"></a>ip_route</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[2f7]"></a>ip_input</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[39b]"></a>ip_output_if_opt</STRONG> (Thumb, 634 bytes, Stack size 56 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[35c]"></a>ip_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[387]"></a>ip_output</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[382]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[d57]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ip_addr.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>ipaddr_aton</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[334]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ipaddr_addr &rArr; ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_web_cfg
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_send_data
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
</UL>

<P><STRONG><a name="[3a5]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[3a4]"></a>ipaddr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>

<P><STRONG><a name="[389]"></a>ip_reass_tmr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_timer
</UL>

<P><STRONG><a name="[3a0]"></a>ip_reass</STRONG> (Thumb, 498 bytes, Stack size 40 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[3a2]"></a>ip_frag</STRONG> (Thumb, 692 bytes, Stack size 96 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[3af]"></a>mac_data_xmit</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mac_data_xmit &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_hw_ok
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[3b4]"></a>ethernetif_input</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
</UL>

<P><STRONG><a name="[a7]"></a>ethernetif_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ethernetif_init &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[38a]"></a>etharp_tmr</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_timer
</UL>

<P><STRONG><a name="[346]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[3b9]"></a>etharp_find_addr</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[34a]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[317]"></a>etharp_query</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[8f]"></a>etharp_output</STRONG> (Thumb, 614 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(.text)
<LI> eth_ethernetif.o(.text)
</UL>
<P><STRONG><a name="[2f6]"></a>ethernet_input</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[3c0]"></a>eth_ethernetif_input</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, eth_ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = eth_ethernetif_input &rArr; eth_low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
</UL>

<P><STRONG><a name="[a5]"></a>eth_int_thread</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, eth_ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = eth_int_thread &rArr; lwip_eth_netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckFrameReceived
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_myself
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_work_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_netif_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8720.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>eth_ethernetif_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, eth_ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = eth_ethernetif_init &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[3d6]"></a>node_insert_to_list</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dhcpserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[3da]"></a>node_remove_from_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dhcpserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_coarse_tmr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_stop
</UL>

<P><STRONG><a name="[3d7]"></a>dhcps_start</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dhcps_start &rArr; udp_new &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_softap_init_dhcps_lease
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[3d9]"></a>dhcps_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = dhcps_stop &rArr; udp_remove &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_remove_from_list
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
</UL>

<P><STRONG><a name="[d58]"></a>wifi_softap_set_dhcps_lease</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, dhcpserver.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>dhcps_coarse_tmr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcpserver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_remove_from_list
</UL>

<P><STRONG><a name="[d59]"></a>woal_ssid_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, moal_main.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>woal_alloc_mlan_ioctl_req</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = woal_alloc_mlan_ioctl_req &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wep_key
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wpa_enable
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_encrypt_mode
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_auth_mode
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_deep_sleep
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_deep_sleep
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_pm_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_mode
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_shutdown_fw
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_dtim_period
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wps_cfg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[3dd]"></a>woal_get_mode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[3e0]"></a>woal_reassoc_timer_func</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = woal_reassoc_timer_func &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.text)
</UL>
<P><STRONG><a name="[3e6]"></a>woal_remove_interface</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = woal_remove_interface &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card_dpc
</UL>

<P><STRONG><a name="[3e9]"></a>woal_init_priv</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_priv
</UL>

<P><STRONG><a name="[3f0]"></a>woal_add_interface</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = woal_add_interface &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_netdev
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sta_dev
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_uap_dev
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card_dpc
</UL>

<P><STRONG><a name="[3f9]"></a>woal_sdio_reg_dbg</STRONG> (Thumb, 262 bytes, Stack size 192 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_main_work_queue
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
</UL>

<P><STRONG><a name="[3fc]"></a>woal_moal_debug_info</STRONG> (Thumb, 134 bytes, Stack size 152 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = woal_moal_debug_info &rArr; woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_version
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_tx_timeout
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[403]"></a>woal_request_fw</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228 + Unknown Stack Size
<LI>Call Chain = woal_request_fw &rArr; woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[c6]"></a>woal_open</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = woal_open
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_module_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>woal_close</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = woal_close &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_put
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>woal_set_mac_address</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_set_mac_address &rArr; woal_request_set_mac_address &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[40e]"></a>woal_mlan_debug_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_tx_timeout
</UL>

<P><STRONG><a name="[cd]"></a>woal_tx_timeout</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = woal_tx_timeout &rArr; woal_moal_debug_info &rArr; woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mlan_debug_info
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>woal_get_stats</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>woal_select_queue</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = woal_select_queue &rArr; mlan_select_wmm_queue &rArr; wlan_wmm_select_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_select_wmm_queue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[412]"></a>woal_get_tcp_sess</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = woal_get_tcp_sess
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
</UL>

<P><STRONG><a name="[410]"></a>woal_check_tcp_fin</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = woal_check_tcp_fin &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_tcp_sess
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[413]"></a>woal_process_tcp_ack</STRONG> (Thumb, 674 bytes, Stack size 88 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_tcp_sess
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[c8]"></a>woal_hard_start_xmit</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = woal_hard_start_xmit &rArr; skb_realloc_headroom &rArr; pskb_expand_head &rArr; skb_release_data &rArr; skb_drop_fraglist &rArr; skb_drop_list &rArr; kfree_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_fill_mlan_buffer
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[418]"></a>woal_ascii2hex</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[419]"></a>woal_atox</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = woal_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hexval
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mac2u8
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
</UL>

<P><STRONG><a name="[41c]"></a>woal_atoi</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = woal_atoi &rArr; woal_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atox
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
</UL>

<P><STRONG><a name="[41e]"></a>woal_strsep</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = woal_strsep &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mac2u8
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
</UL>

<P><STRONG><a name="[420]"></a>woal_mac2u8</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = woal_mac2u8 &rArr; woal_strsep &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atox
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[ca]"></a>woal_set_multicast_list</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = woal_set_multicast_list &rArr; woal_request_set_multicast_list &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[422]"></a>woal_reset_intf</STRONG> (Thumb, 306 bytes, Stack size 176 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = woal_reset_intf &rArr; woal_cancel_hs &rArr; woal_set_get_hs_params &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_hs
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
</UL>

<P><STRONG><a name="[4a7]"></a>woal_bss_index_to_priv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
</UL>

<P><STRONG><a name="[428]"></a>woal_alloc_mlan_buffer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = woal_alloc_mlan_buffer &rArr; dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_alloc_skb
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_alloc_mlan_buffer
</UL>

<P><STRONG><a name="[42a]"></a>woal_free_mlan_buffer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = woal_free_mlan_buffer &rArr; consume_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_mlan_buffer
</UL>

<P><STRONG><a name="[42b]"></a>woal_broadcast_event</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = woal_broadcast_event &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[42c]"></a>woal_reassociation_thread</STRONG> (Thumb, 656 bytes, Stack size 192 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = woal_reassociation_thread &rArr; woal_get_bss_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_myself
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.text)
</UL>
<P><STRONG><a name="[42e]"></a>woal_send_disconnect_to_system</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = woal_send_disconnect_to_system &rArr; woal_broadcast_event &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_broadcast_event
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[42f]"></a>woal_main_work_queue</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = woal_main_work_queue &rArr; mlan_main_process &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int_status
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_interrupt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.text)
</UL>
<P><STRONG><a name="[d5a]"></a>woal_interrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, moal_main.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>woal_add_card</STRONG> (Thumb, 542 bytes, Stack size 48 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292 + Unknown Stack Size
<LI>Call Chain = woal_add_card &rArr; woal_init_fw &rArr; woal_request_fw &rArr; woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_workqueue
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_update_card_type
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mac2u8
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sched_timeout
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_terminate_workqueue
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>

<P><STRONG><a name="[438]"></a>woal_remove_card</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sched_timeout
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_terminate_workqueue
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
</UL>

<P><STRONG><a name="[439]"></a>woal_switch_drv_mode</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_shutdown_fw
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_priv
</UL>

<P><STRONG><a name="[43a]"></a>woal_init_module</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324 + Unknown Stack Size
<LI>Call Chain = woal_init_module &rArr; woal_sdio_probe &rArr; woal_add_card &rArr; woal_init_fw &rArr; woal_request_fw &rArr; woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>

<P><STRONG><a name="[445]"></a>woal_get_wiphy_priv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, moal_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_channel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_tx_power
</UL>

<P><STRONG><a name="[444]"></a>woal_get_netdev_priv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, moal_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_register
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_channel
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_default_key
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_key
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_beacon
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_cqm_rssi_config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_power_mgmt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_leave_ibss
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_join_ibss
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_station
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_disconnect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
</UL>

<P><STRONG><a name="[43c]"></a>woal_cfg80211_set_key</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_key &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_key
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wep_keys
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[43d]"></a>woal_cfg80211_set_wep_keys</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_wep_keys &rArr; woal_cfg80211_set_key &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_default_key
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[442]"></a>woal_cfg80211_mgmt_frame_ie</STRONG> (Thumb, 828 bytes, Stack size 104 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_filter_beacon_ies
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_priv_by_mgmt_index
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_beacon
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
</UL>

<P><STRONG><a name="[f0]"></a>woal_cfg80211_change_virtual_intf</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_change_virtual_intf &rArr; woal_cfg80211_bss_role_cfg &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>woal_cfg80211_set_wiphy_params</STRONG> (Thumb, 232 bytes, Stack size 848 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_wiphy_params &rArr; woal_set_get_rts &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sys_config_invalid_data
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wiphy_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>woal_cfg80211_add_key</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_add_key &rArr; woal_cfg80211_set_key &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>woal_cfg80211_del_key</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_del_key &rArr; woal_cfg80211_set_key &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>woal_cfg80211_set_default_key</STRONG> (Thumb, 84 bytes, Stack size 176 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_default_key &rArr; woal_cfg80211_set_wep_keys &rArr; woal_cfg80211_set_key &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wep_keys
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>woal_cfg80211_set_channel</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_channel &rArr; woal_set_rf_channel &rArr; woal_change_adhoc_chan &rArr; woal_request_scan &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wiphy_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>woal_cfg80211_mgmt_frame_register</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_mgmt_frame_register &rArr; woal_reg_rx_mgmt_ind &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>woal_cfg80211_mgmt_tx</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_mgmt_tx &rArr; woal_alloc_mlan_buffer &rArr; dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[d5b]"></a>woal_parse_ie_tlv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, moal_cfg80211.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>woal_cfg80211_setup_ht_cap</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = woal_cfg80211_setup_ht_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[3de]"></a>woal_request_ioctl</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_ioctl
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wait_ioctl_complete
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cac_period_block_cmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sleeppd
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_qos_cfg
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_low_threshold
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wep_key
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wpa_enable
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_encrypt_mode
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_auth_mode
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_deep_sleep
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_deep_sleep
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_pm_info
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_soft_reset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reg_rx_mgmt_ind
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_multicast_list
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_set_mac_address
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_mode
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_shutdown_fw
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_dtim_period
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wps_cfg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[3f7]"></a>woal_request_set_mac_address</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_request_set_mac_address &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_mac_address
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[421]"></a>woal_request_set_multicast_list</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_request_set_multicast_list &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_multicast_list
</UL>

<P><STRONG><a name="[426]"></a>woal_disconnect</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_disconnect &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_leave_ibss
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_disconnect
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[453]"></a>woal_bss_start</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_bss_start &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[423]"></a>woal_get_bss_info</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_get_bss_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_default_key
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
</UL>

<P><STRONG><a name="[44a]"></a>woal_set_get_retry</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_set_get_retry &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[448]"></a>woal_set_get_rts</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_set_get_rts &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[449]"></a>woal_set_get_frag</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_set_get_frag &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
</UL>

<P><STRONG><a name="[454]"></a>woal_set_get_gen_ie</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_gen_ie &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
</UL>

<P><STRONG><a name="[455]"></a>woal_set_get_tx_power</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_tx_power &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_tx_power
</UL>

<P><STRONG><a name="[456]"></a>woal_set_get_power_mgmt</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_power_mgmt &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_powermode
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_powermode
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_power_mgmt
</UL>

<P><STRONG><a name="[457]"></a>woal_set_region_code</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_string_2_region_code
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[458]"></a>woal_set_get_data_rate</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3ed]"></a>woal_request_get_fw_info</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_request_get_fw_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_fw_info
</UL>

<P><STRONG><a name="[45a]"></a>woal_hostcmd_ioctl</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[45c]"></a>woal_custom_ie_ioctl</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_custom_ie_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[45d]"></a>woal_send_host_packet</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
</UL>

<P><STRONG><a name="[45e]"></a>woal_get_bss_type</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = woal_get_bss_type &rArr; copy_from_user &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[43f]"></a>woal_bss_role_cfg</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_bss_role_cfg &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_bss_role_cfg
</UL>

<P><STRONG><a name="[45f]"></a>woal_set_get_bss_role</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[460]"></a>woal_set_get_hs_params</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_hs_params &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_hs
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
</UL>

<P><STRONG><a name="[425]"></a>woal_cancel_hs</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_cancel_hs &rArr; woal_set_get_hs_params &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[461]"></a>woal_request_soft_reset</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[462]"></a>woal_set_wapi_enable</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_wapi_enable &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
</UL>

<P><STRONG><a name="[3fd]"></a>woal_get_version</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = woal_get_version &rArr; __c89snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89snprintf
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
</UL>

<P><STRONG><a name="[44d]"></a>woal_reg_rx_mgmt_ind</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_reg_rx_mgmt_ind &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_register
</UL>

<P><STRONG><a name="[464]"></a>woal_set_get_tx_bf_cfg</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_tx_bf_cfg &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
</UL>

<P><STRONG><a name="[4a8]"></a>woal_process_ioctl_resp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, moal_ioctl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_ioctl_complete
</UL>

<P><STRONG><a name="[465]"></a>woal_get_pm_info</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[466]"></a>woal_get_deep_sleep</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[467]"></a>woal_set_deep_sleep</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[468]"></a>woal_cancel_cac_block</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = woal_cancel_cac_block &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>

<P><STRONG><a name="[469]"></a>woal_11h_channel_check_ioctl</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[46a]"></a>woal_get_signal_info</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
</UL>

<P><STRONG><a name="[46b]"></a>woal_get_scan_table</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_get_scan_table &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[46c]"></a>woal_request_scan</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_request_scan &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[46d]"></a>woal_change_adhoc_chan</STRONG> (Thumb, 250 bytes, Stack size 168 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = woal_change_adhoc_chan &rArr; woal_request_scan &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
</UL>

<P><STRONG><a name="[46e]"></a>woal_find_best_network</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_find_best_network &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[46f]"></a>woal_get_auth_mode</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[470]"></a>woal_get_encrypt_mode</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[471]"></a>woal_get_wpa_enable</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[472]"></a>woal_set_auth_mode</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_auth_mode &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[473]"></a>woal_set_encrypt_mode</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_encrypt_mode &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_auth
</UL>

<P><STRONG><a name="[474]"></a>woal_set_wpa_enable</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_wpa_enable &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_auth
</UL>

<P><STRONG><a name="[475]"></a>woal_enable_wep_key</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[476]"></a>woal_request_userscan</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_request_userscan &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
</UL>

<P><STRONG><a name="[477]"></a>woal_set_scan_time</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_cfg
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
</UL>

<P><STRONG><a name="[478]"></a>woal_do_scan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_do_scan &rArr; woal_request_userscan &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
</UL>

<P><STRONG><a name="[424]"></a>woal_cancel_scan</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_cancel_scan &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[47a]"></a>woal_find_essid</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_find_essid &rArr; woal_find_best_network &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[47b]"></a>woal_request_bgscan</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reconfig_bgscan
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_stop_bg_scan
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
</UL>

<P><STRONG><a name="[47c]"></a>woal_get_band</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
</UL>

<P><STRONG><a name="[47d]"></a>woal_set_bg_scan</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_band
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[47e]"></a>woal_stop_bg_scan</STRONG> (Thumb, 50 bytes, Stack size 624 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[47f]"></a>woal_reconfig_bgscan</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
</UL>

<P><STRONG><a name="[480]"></a>woal_set_rssi_low_threshold</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[481]"></a>woal_set_rssi_threshold</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_set_rssi_threshold &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_cqm_rssi_config
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[482]"></a>woal_get_powermode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
</UL>

<P><STRONG><a name="[483]"></a>woal_set_scan_type</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_set_scan_type &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[484]"></a>woal_set_powermode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
</UL>

<P><STRONG><a name="[485]"></a>woal_set_combo_scan</STRONG> (Thumb, 444 bytes, Stack size 816 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[486]"></a>woal_set_band</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[d5c]"></a>woal_add_rxfilter</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, moal_ioctl.o(.text), UNUSED)

<P><STRONG><a name="[d5d]"></a>woal_remove_rxfilter</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, moal_ioctl.o(.text), UNUSED)

<P><STRONG><a name="[487]"></a>woal_set_qos_cfg</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[488]"></a>woal_set_sleeppd</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>

<P><STRONG><a name="[489]"></a>woal_set_scan_cfg</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
</UL>

<P><STRONG><a name="[d5e]"></a>roundup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[d5f]"></a>rounddown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>sdio_reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = sdio_reset &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[3fb]"></a>sdio_readb</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_reg
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_dump_sdio_reg
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[48e]"></a>sdio_writeb</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_reg
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[48f]"></a>sdio_writeb_readb</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, moal_sdio_mmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>

<P><STRONG><a name="[490]"></a>sdio_readsb</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = sdio_readsb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_data_sync
</UL>

<P><STRONG><a name="[491]"></a>sdio_writesb</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = sdio_writesb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_data_sync
</UL>

<P><STRONG><a name="[3fa]"></a>sdio_f0_readb</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = sdio_f0_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_dump_sdio_reg
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[492]"></a>sdio_f0_writeb</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = sdio_f0_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_read_write_cmd52
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
</UL>

<P><STRONG><a name="[493]"></a>sdio_set_block_size</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = sdio_set_block_size &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
</UL>

<P><STRONG><a name="[494]"></a>sdio_enable_func</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = sdio_enable_func &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>

<P><STRONG><a name="[495]"></a>sdio_disable_func</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = sdio_disable_func &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_probe
</UL>

<P><STRONG><a name="[496]"></a>sdio_claim_irq</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = sdio_claim_irq &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sdio_int
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
</UL>

<P><STRONG><a name="[498]"></a>sdio_release_irq</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = sdio_release_irq &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_unregister_dev
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_dev
</UL>

<P><STRONG><a name="[499]"></a>woal_dump_sdio_reg</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_dump_sdio_reg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_data_sync
</UL>

<P><STRONG><a name="[434]"></a>woal_sdio_update_card_type</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = woal_sdio_update_card_type
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[49a]"></a>woal_sdio_interrupt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = woal_sdio_interrupt &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[43b]"></a>woal_sdio_probe</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308 + Unknown Stack Size
<LI>Call Chain = woal_sdio_probe &rArr; woal_add_card &rArr; woal_init_fw &rArr; woal_request_fw &rArr; woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_module
</UL>

<P><STRONG><a name="[d60]"></a>woal_sdio_remove</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>woal_write_reg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = woal_write_reg &rArr; sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_write_reg
</UL>

<P><STRONG><a name="[49c]"></a>woal_read_reg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_read_reg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_read_reg
</UL>

<P><STRONG><a name="[49d]"></a>woal_write_data_sync</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = woal_write_data_sync &rArr; sdio_writesb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writesb
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_write_data_sync
</UL>

<P><STRONG><a name="[49e]"></a>woal_read_data_sync</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = woal_read_data_sync &rArr; sdio_readsb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_dump_sdio_reg
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readsb
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_read_data_sync
</UL>

<P><STRONG><a name="[d61]"></a>woal_bus_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[d62]"></a>woal_bus_unregister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, moal_sdio_mmc.o(.text), UNUSED)

<P><STRONG><a name="[436]"></a>woal_unregister_dev</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_unregister_dev &rArr; sdio_disable_func &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_release_irq
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[435]"></a>woal_register_dev</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_register_dev &rArr; sdio_claim_irq &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_release_irq
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[49f]"></a>woal_sdio_set_bus_clock</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, moal_sdio_mmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4a0]"></a>woal_sdio_read_write_cmd52</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, moal_sdio_mmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_writeb
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
</UL>

<P><STRONG><a name="[dd]"></a>moal_malloc</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = moal_malloc &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>moal_mfree</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = moal_mfree &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>moal_memset</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = moal_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>moal_memcpy</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = moal_memcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>moal_memmove</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = moal_memmove &rArr; memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>moal_memcmp</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = moal_memcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>moal_udelay</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = moal_udelay &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>moal_get_system_time</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = moal_get_system_time &rArr; do_gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>moal_init_timer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = moal_init_timer &rArr; timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>moal_free_timer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = moal_free_timer &rArr; timer_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>moal_start_timer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = moal_start_timer &rArr; woal_mod_timer &rArr; mod_timer &rArr; OSTmrStart &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mod_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>moal_stop_timer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = moal_stop_timer &rArr; woal_cancel_timer &rArr; del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>moal_init_lock</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = moal_init_lock &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>moal_free_lock</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = moal_free_lock &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>moal_spin_lock</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = moal_spin_lock &rArr; local_irq_save
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>moal_spin_unlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = moal_spin_unlock &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>moal_get_fw_data</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = moal_get_fw_data &rArr; read_firmware &rArr; m25p80_read &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>moal_init_fw_complete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = moal_init_fw_complete &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>moal_shutdown_fw_complete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = moal_shutdown_fw_complete &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>moal_ioctl_complete</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = moal_ioctl_complete &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_ioctl_resp
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>moal_alloc_mlan_buffer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = moal_alloc_mlan_buffer &rArr; woal_alloc_mlan_buffer &rArr; dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>moal_free_mlan_buffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = moal_free_mlan_buffer &rArr; woal_free_mlan_buffer &rArr; consume_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>moal_send_packet_complete</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = moal_send_packet_complete &rArr; woal_free_mlan_buffer &rArr; consume_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>moal_write_data_sync</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = moal_write_data_sync &rArr; woal_write_data_sync &rArr; sdio_writesb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_data_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>moal_read_data_sync</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = moal_read_data_sync &rArr; woal_read_data_sync &rArr; sdio_readsb &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_data_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>moal_write_reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = moal_write_reg &rArr; woal_write_reg &rArr; sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_write_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>moal_read_reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = moal_read_reg &rArr; woal_read_reg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>moal_recv_packet</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = moal_recv_packet &rArr; netif_rx &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_alloc_skb
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_trans
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>moal_recv_event</STRONG> (Thumb, 1162 bytes, Stack size 32 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = moal_recv_event &rArr; woal_moal_debug_info &rArr; woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_work
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_priv
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_mod_timer
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_hs
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_broadcast_event
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_index_to_priv
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_cqm_rssi_notify
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>moal_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>moal_print_netintf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>moal_assert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = moal_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_shim.o(.constdata)
</UL>
<P><STRONG><a name="[4b2]"></a>woal_band_cfg_to_ieee_band</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
</UL>

<P><STRONG><a name="[44b]"></a>woal_set_rf_channel</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = woal_set_rf_channel &rArr; woal_change_adhoc_chan &rArr; woal_request_scan &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_domain_info_cmd_fw
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_nl80211_iftype_to_mode
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_channel_type_to_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_channel
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4b5]"></a>woal_set_ewpa_mode</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_ewpa_mode &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4b6]"></a>woal_set_passphrase</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_passphrase &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4ac]"></a>woal_inform_bss_from_scan_result</STRONG> (Thumb, 422 bytes, Stack size 104 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = woal_inform_bss_from_scan_result &rArr; woal_get_scan_table &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_scan_table
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_put_bss
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[fc]"></a>woal_cfg80211_set_tx_power</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_tx_power &rArr; woal_set_get_tx_power &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_power
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_wiphy_priv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> moal_uap_cfg80211.o(.constdata)
<LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[3ea]"></a>woal_cfg80211_sta_init_wiphy</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_sta_init_wiphy &rArr; woal_set_get_rts &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_setup_ht_cap
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[3f4]"></a>woal_register_sta_cfg80211</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_register_sta_cfg80211 &rArr; woal_request_get_fw_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[102]"></a>woal_cfg80211_add_beacon</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_add_beacon &rArr; woal_cfg80211_beacon_config &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>woal_cfg80211_set_beacon</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_beacon &rArr; woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>woal_cfg80211_del_beacon</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_del_beacon &rArr; woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>woal_uap_cfg80211_get_station</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_cfg80211_get_station &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[3eb]"></a>woal_cfg80211_uap_init_wiphy</STRONG> (Thumb, 248 bytes, Stack size 848 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_setup_ht_cap
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[3f5]"></a>woal_register_uap_cfg80211</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = woal_register_uap_cfg80211 &rArr; woal_request_get_fw_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[447]"></a>woal_set_get_sys_config</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
</UL>

<P><STRONG><a name="[446]"></a>woal_set_sys_config_invalid_data</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = woal_set_sys_config_invalid_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wiphy_params
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
</UL>

<P><STRONG><a name="[4c7]"></a>woal_uap_bss_ctrl</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_cac_block
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_del_beacon
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_priv_ioctl
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl_ioctl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
</UL>

<P><STRONG><a name="[4e1]"></a>woal_uap_get_bss_param</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_uap_get_bss_param &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
</UL>

<P><STRONG><a name="[4c6]"></a>woal_uap_set_11n_status</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = woal_uap_set_11n_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
</UL>

<P><STRONG><a name="[4e2]"></a>woal_uap_ap_cfg_parse_data</STRONG> (Thumb, 1022 bytes, Stack size 64 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = woal_uap_ap_cfg_parse_data &rArr; woal_atoi &rArr; woal_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
</UL>

<P><STRONG><a name="[4e3]"></a>woal_uap_set_ap_cfg</STRONG> (Thumb, 382 bytes, Stack size 840 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = woal_uap_set_ap_cfg &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_11n_status
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_priv_ioctl
</UL>

<P><STRONG><a name="[cb]"></a>woal_uap_set_multicast_list</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, moal_uap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>woal_uap_do_ioctl</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = woal_uap_do_ioctl &rArr; woal_uap_do_priv_ioctl &rArr; woal_uap_set_ap_cfg &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_type
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_priv_ioctl
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl_ioctl
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_main.o(.constdata)
</UL>
<P><STRONG><a name="[4e5]"></a>woal_uap_get_version</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, moal_uap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89snprintf
</UL>

<P><STRONG><a name="[4e6]"></a>woal_uap_get_stats</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, moal_uap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4e4]"></a>woal_uap_do_priv_ioctl</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, moal_uap_priv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = woal_uap_do_priv_ioctl &rArr; woal_uap_set_ap_cfg &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4ed]"></a>wlan_11d_parse_domain_info</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_11d_parse_domain_info &rArr; wlan_11d_get_chan
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_get_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_process_country_info
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
</UL>

<P><STRONG><a name="[9a]"></a>wlan_is_station</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mlan_cfp.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>wlan_11d_is_enabled</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clear_parsedtable
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_snmp_mib_11h
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_cfp.o(.text)
</UL>
<P><STRONG><a name="[5cc]"></a>wlan_11d_priv_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_reset
</UL>

<P><STRONG><a name="[5cf]"></a>wlan_11d_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11d_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
</UL>

<P><STRONG><a name="[4f4]"></a>wlan_11d_enable</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_11d_enable &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_snmp_mib_11h
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_snmp_mib_11d
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl_enable
</UL>

<P><STRONG><a name="[67c]"></a>wlan_cmd_802_11d_domain_info</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_802_11d_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6ae]"></a>wlan_ret_802_11d_domain_info</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_ret_802_11d_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6cf]"></a>wlan_11d_chan_2_freq</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_11d_chan_2_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
</UL>

<P><STRONG><a name="[5c4]"></a>wlan_11d_set_universaltable</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
</UL>

<P><STRONG><a name="[4f5]"></a>wlan_11d_get_scan_type</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_channel_known
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[4f6]"></a>wlan_11d_clear_parsedtable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11d_clear_parsedtable
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clr_chan_table
</UL>

<P><STRONG><a name="[4f7]"></a>wlan_11d_create_dnld_countryinfo</STRONG> (Thumb, 244 bytes, Stack size 192 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wlan_11d_create_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_generate_domain_info
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_generate_parsed_region_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
</UL>

<P><STRONG><a name="[4f9]"></a>wlan_11d_parse_dnld_countryinfo</STRONG> (Thumb, 272 bytes, Stack size 360 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_domain_info
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_generate_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[4fa]"></a>wlan_11d_prepare_dnld_domain_info_cmd</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_sort_parsed_region_chan
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_process_country_info
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_update_chan_pwr_table
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[4fb]"></a>wlan_11d_cfg_domain_info</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_11d_cfg_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_domain_info
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_region_2_code
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
</UL>

<P><STRONG><a name="[4ff]"></a>wlan_11d_handle_uap_domain_info</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_11d_handle_uap_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_domain_info
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_region_2_code
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_domain_info
</UL>

<P><STRONG><a name="[4e8]"></a>wlan_11h_radar_detect_required</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cfp_radar_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_master_active_on_dfs_chan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_slave_active_on_dfs_chan
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_chan_rpt_req
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_channel_known
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[50f]"></a>wlan_11h_is_channel_under_nop</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_11h_is_channel_under_nop &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_find_dfs_timestamp
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_remove_dfs_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_switch_non_dfs_chan
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_uap_start_channel
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[521]"></a>wlan_11h_is_master_radar_det_active</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
</UL>

<P><STRONG><a name="[514]"></a>wlan_11h_config_master_radar_det</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11h_config_master_radar_det
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_master
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[515]"></a>wlan_11h_config_slave_radar_det</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_config_slave_radar_det &rArr; wlan_11h_is_dfs_slave
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_slave
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
</UL>

<P><STRONG><a name="[516]"></a>wlan_11h_check_update_radar_det_state</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_11h_check_update_radar_det_state &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_radar_det_state
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[524]"></a>wlan_11h_is_active</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_stop
</UL>

<P><STRONG><a name="[517]"></a>wlan_11h_tx_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_tx_enable &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[519]"></a>wlan_11h_tx_disable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_tx_disable &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[51a]"></a>wlan_11h_activate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_11h_activate &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_current_radar_detect_flags
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_snmp_mib_11h
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_stop
</UL>

<P><STRONG><a name="[5d0]"></a>wlan_11h_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
</UL>

<P><STRONG><a name="[51b]"></a>wlan_11h_cleanup</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_11h_cleanup &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL>

<P><STRONG><a name="[5cd]"></a>wlan_11h_priv_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_reset
</UL>

<P><STRONG><a name="[51c]"></a>wlan_11h_get_adhoc_start_channel</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_11h_get_adhoc_start_channel &rArr; wlan_11h_is_channel_under_nop &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_enabled
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_random_num
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[51d]"></a>wlan_11h_get_csa_closed_channel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wlan_11h_get_csa_closed_channel &rArr; wlan_set_chan_blacklist
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_chan_blacklist
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
</UL>

<P><STRONG><a name="[51f]"></a>wlan_11h_issue_radar_detect</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_11h_issue_radar_detect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_11h_channel_check_req
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>

<P><STRONG><a name="[522]"></a>wlan_11h_check_chan_report</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_check_chan_report
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
</UL>

<P><STRONG><a name="[520]"></a>wlan_11h_process_start</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = wlan_11h_process_start &rArr; wlan_11d_create_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_chan_report
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_master_radar_det_active
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_enabled
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
</UL>

<P><STRONG><a name="[523]"></a>wlan_11h_process_join</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_active
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_slave_radar_det
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_slave_radar_det_active
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_infra_join
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[526]"></a>wlan_11h_cmd_process</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_11h_cmd_process &rArr; wlan_11h_cmd_chan_rpt_req &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_chan_rpt_req
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_chan_sw_ann
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_tpc_info
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_tpc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6af]"></a>wlan_11h_cmdresp_process</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_cmdresp_process
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[62a]"></a>wlan_11h_process_bss_elem</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_process_bss_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interpret_bss_desc_with_ie
</UL>

<P><STRONG><a name="[52a]"></a>wlan_11h_handle_event_chanswann</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_11h_handle_event_chanswann &rArr; wlan_disconnect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_chan_blacklist
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clear_parsedtable
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[52c]"></a>wlan_11h_handle_event_chanrpt_ready</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_11h_handle_event_chanrpt_ready &rArr; wlan_11h_add_dfs_timestamp &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_add_dfs_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[658]"></a>wlan_11h_radar_detected_tx_blocked</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[52d]"></a>wlan_11h_radar_detected_handling</STRONG> (Thumb, 1544 bytes, Stack size 48 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_channel
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_beacon_dtim
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delay_func
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_disable
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_enable
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_add_dfs_timestamp
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_uap_start_channel
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_prepare_custom_ie_chansw
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_only_uap_priv_in_list
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_master
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[98]"></a>wlan_11h_radar_detected_callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_config
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mgmt_ie_list
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc_stop
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_deauthenticate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[535]"></a>wlan_11h_dfs_event_preprocessing</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_11h_dfs_event_preprocessing &rArr; wlan_get_privs_by_two_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_privs_by_two_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL>

<P><STRONG><a name="[537]"></a>wlan_11h_switch_non_dfs_chan</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_11h_switch_non_dfs_chan &rArr; wlan_11h_is_channel_under_nop &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_random_num
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
</UL>

<P><STRONG><a name="[53b]"></a>wlan_send_addba</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_send_addba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_update_addba_request
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[53f]"></a>wlan_send_delba</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_reorder_tbl
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_txbastream_tbl
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[546]"></a>wlan_fill_ht_cap_tlv</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wlan_fill_ht_cap_tlv &rArr; wlan_fill_cap_info
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_cap_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[5c2]"></a>wlan_show_dot11ndevcap</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
</UL>

<P><STRONG><a name="[5c3]"></a>wlan_show_devmcssupport</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
</UL>

<P><STRONG><a name="[548]"></a>wlan_11n_get_txbastream_tbl</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11n_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_txbastream_tbl
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_txbastream_tbl
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_bastream_setup
</UL>

<P><STRONG><a name="[549]"></a>wlan_11n_create_txbastream_tbl</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_11n_create_txbastream_tbl &rArr; wlan_11n_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[54b]"></a>wlan_ret_11n_delba</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wlan_ret_11n_delba &rArr; mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_txbastream_tbl
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_status
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[54d]"></a>wlan_ret_11n_addba_req</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_ret_11n_addba_req &rArr; mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_random_ba_threshold
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[67d]"></a>wlan_cmd_recfg_tx_buf</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_recfg_tx_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[67e]"></a>wlan_cmd_amsdu_aggr_ctrl</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_amsdu_aggr_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b0]"></a>wlan_ret_amsdu_aggr_ctrl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_amsdu_aggr_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[67f]"></a>wlan_cmd_11n_cfg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_11n_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b8]"></a>wlan_ret_11n_cfg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_11n_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[691]"></a>wlan_cmd_reject_addba_req</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_reject_addba_req
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6c1]"></a>wlan_ret_reject_addba_req</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_ret_reject_addba_req
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[680]"></a>wlan_cmd_tx_bf_cfg</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_tx_bf_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b9]"></a>wlan_ret_tx_bf_cfg</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_ret_tx_bf_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[551]"></a>wlan_cmd_append_11n_tlv</STRONG> (Thumb, 584 bytes, Stack size 56 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = wlan_cmd_append_11n_tlv &rArr; wlan_fill_ht_cap_tlv &rArr; wlan_fill_cap_info
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[553]"></a>wlan_11n_cfg_ioctl</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = wlan_11n_cfg_ioctl &rArr; wlan_11n_ioctl_delba &rArr; wlan_send_delba_to_entry_in_reorder_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_supported_mcs_set
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_aggr_prio_tbl
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_rejectaddbareq
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_addba_reject
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_addba_param
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_stream_cfg
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_tx_bf_cfg
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_tx_bf_cap
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_httxcfg
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_amsdu_aggr_ctrl
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_htusrcfg
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_max_tx_buf_size
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[55b]"></a>wlan_11n_delete_txbastream_tbl_entry</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_11n_delete_txbastream_tbl_entry &rArr; wlan_is_txbastreamptr_valid &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_txbastreamptr_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_txbastream_tbl
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deleteall_txbastream_tbl
</UL>

<P><STRONG><a name="[55c]"></a>wlan_11n_deleteall_txbastream_tbl</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_11n_deleteall_txbastream_tbl &rArr; wlan_11n_delete_txbastream_tbl_entry &rArr; wlan_is_txbastreamptr_valid &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
</UL>

<P><STRONG><a name="[55d]"></a>wlan_11n_delete_bastream</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wlan_11n_delete_bastream &rArr; mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[55e]"></a>wlan_get_rxreorder_tbl</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_get_rxreorder_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
</UL>

<P><STRONG><a name="[55f]"></a>wlan_get_txbastream_tbl</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
</UL>

<P><STRONG><a name="[560]"></a>wlan_11n_cleanup_txbastream_tbl</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_11n_cleanup_txbastream_tbl &rArr; wlan_11n_delete_txbastream_tbl_entry &rArr; wlan_is_txbastreamptr_valid &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[563]"></a>wlan_11n_deaggregate_pkt</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_num_aggrpkts
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_amsdu_pkt
</UL>

<P><STRONG><a name="[568]"></a>wlan_11n_aggregate_pkt</STRONG> (Thumb, 1076 bytes, Stack size 88 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wlan_11n_aggregate_pkt &rArr; wlan_check_last_packet_indication &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_form_amsdu_txpd
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_form_amsdu_pkt
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[579]"></a>wlan_11n_get_rxreorder_tbl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11n_get_rxreorder_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_reorder_tbl
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
</UL>

<P><STRONG><a name="[678]"></a>wlan_cmd_11n_addba_req</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_11n_addba_req
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[57d]"></a>wlan_cmd_11n_addba_rspgen</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlan_cmd_11n_addba_rspgen &rArr; wlan_11n_create_rxreorder_tbl &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[679]"></a>wlan_cmd_11n_delba</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_11n_delba
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[57e]"></a>mlan_11n_rxreorder_pkt</STRONG> (Thumb, 438 bytes, Stack size 64 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mlan_11n_rxreorder_pkt &rArr; wlan_11n_scan_and_dispatch &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_scan_and_dispatch
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_display_tbl_ptr
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_timer_restart
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
</UL>

<P><STRONG><a name="[54c]"></a>mlan_11n_delete_bastream_tbl</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mlan_11n_delete_bastream_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_bastream
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
</UL>

<P><STRONG><a name="[580]"></a>wlan_ret_11n_addba_resp</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wlan_ret_11n_addba_resp &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[581]"></a>wlan_11n_ba_stream_timeout</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_11n_ba_stream_timeout &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[582]"></a>wlan_11n_cleanup_reorder_tbl</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
</UL>

<P><STRONG><a name="[583]"></a>wlan_11n_rxba_sync_event</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_11n_rxba_sync_event &rArr; mlan_11n_rxreorder_pkt &rArr; wlan_11n_scan_and_dispatch &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[584]"></a>wlan_cleanup_reorder_tbl</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wlan_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[585]"></a>wlan_set_rxreorder_tbl_no_drop_flag</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_rxreorder_tbl
</UL>

<P><STRONG><a name="[586]"></a>wlan_update_rxreorder_tbl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_rxreorder_tbl_no_drop_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
</UL>

<P><STRONG><a name="[711]"></a>wlan_misc_country_2_cfp_table_code</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_misc_country_2_cfp_table_code
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_country_code
</UL>

<P><STRONG><a name="[587]"></a>wlan_index_to_data_rate</STRONG> (Thumb, 154 bytes, Stack size 152 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_index_to_data_rate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_tx_rate_query
</UL>

<P><STRONG><a name="[588]"></a>wlan_data_rate_to_index</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_data_rate_to_index &rArr; wlan_memchr
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
</UL>

<P><STRONG><a name="[58a]"></a>wlan_get_supported_rates</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wlan_get_supported_rates &rArr; wlan_copy_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_copy_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[58c]"></a>wlan_get_active_data_rates</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wlan_get_active_data_rates &rArr; wlan_get_supported_rates &rArr; wlan_copy_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_supported_rates
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_copy_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_supported_rate
</UL>

<P><STRONG><a name="[4ec]"></a>wlan_get_txpwr_of_chan_from_cfp</STRONG> (Thumb, 286 bytes, Stack size 28 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wlan_get_txpwr_of_chan_from_cfp
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_update_chan_pwr_table
</UL>

<P><STRONG><a name="[58f]"></a>wlan_get_cfp_by_band_and_channel</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_get_cfp_by_band_and_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
</UL>

<P><STRONG><a name="[58d]"></a>wlan_find_cfp_by_band_and_channel</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_find_cfp_by_band_and_channel &rArr; wlan_count_priv_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cfp_by_band_and_channel
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_channel
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
</UL>

<P><STRONG><a name="[590]"></a>wlan_find_cfp_by_band_and_freq</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_find_cfp_by_band_and_freq &rArr; wlan_count_priv_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_channel
</UL>

<P><STRONG><a name="[5bc]"></a>wlan_is_rate_auto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mlan_cfp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
</UL>

<P><STRONG><a name="[5bd]"></a>wlan_get_rate_index</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_get_rate_index
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
</UL>

<P><STRONG><a name="[4fd]"></a>wlan_set_regiontable</STRONG> (Thumb, 522 bytes, Stack size 64 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cfp_copy_dynamic
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_region_cfp_table
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_country_code
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_cfp_code_cfg
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_region
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
</UL>

<P><STRONG><a name="[500]"></a>wlan_get_cfp_radar_detect</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_get_cfp_radar_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>

<P><STRONG><a name="[622]"></a>wlan_bg_scan_type_is_passive</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_bg_scan_type_is_passive
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[625]"></a>wlan_is_chan_blacklisted</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_is_chan_blacklisted
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
</UL>

<P><STRONG><a name="[51e]"></a>wlan_set_chan_blacklist</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_set_chan_blacklist
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_csa_closed_channel
</UL>

<P><STRONG><a name="[593]"></a>wlan_atox</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_hexval
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_isxdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_cal_cfg
</UL>

<P><STRONG><a name="[5a1]"></a>wlan_release_cmd_lock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_release_cmd_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_process_cmdresp_error
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp_error
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[5a0]"></a>wlan_request_cmd_lock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_request_cmd_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_process_cmdresp_error
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp_error
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[59d]"></a>wlan_insert_cmd_to_free_q</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_cmd_node
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_cmd_buffer
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_process_cmdresp_error
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp_error
</UL>

<P><STRONG><a name="[518]"></a>wlan_recv_event</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmdresp_get_report
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_2040_coex_event
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_wakeup_event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_timeout_func
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_update_addba_request
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_disable
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_enable
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sta_assoc_event
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp_error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_802dot11_mgmt_pkt
</UL>

<P><STRONG><a name="[5a2]"></a>wlan_host_sleep_activated_event</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_rxreorder_tbl
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sleep_confirm_resp
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
</UL>

<P><STRONG><a name="[5a5]"></a>wlan_alloc_cmd_buffer</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_alloc_cmd_buffer &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_allocate_adapter
</UL>

<P><STRONG><a name="[5a6]"></a>wlan_free_cmd_buffer</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_free_cmd_buffer &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL>

<P><STRONG><a name="[5a7]"></a>wlan_process_event</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_process_event &rArr; wlan_11h_dfs_event_preprocessing &rArr; wlan_get_privs_by_two_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv_by_id
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_dfs_event_preprocessing
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[5a9]"></a>wlan_insert_cmd_to_pending_q</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[4f3]"></a>wlan_prepare_cmd</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_queue_scan_cmd
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_host_cmd
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_cmd_node
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_index
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_rate_index
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_rate_value
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_util_send_req
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_join
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_start
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_sdio_gpio_int
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ba_stream_timeout
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_rejectaddbareq
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_tx_bf_cfg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_httxcfg
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_amsdu_aggr_ctrl
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_channel
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_beacon_dtim
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_send_domain_info
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_queue_config
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_ts_status
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_queue_stats
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_delts_req
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_addts_req
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_deepsleep
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_sec_ioctl_set_encrypt_key
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_mode
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_misc_ioctl_txdatapause
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_misc_ioctl_soft_reset
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_sta_list
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_deauth_sta
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_config
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_stats
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_mac_address
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_reset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_stop
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mef_cfg
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_auto_arp_resp
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_subscribe_evt
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_thermal
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mac_control
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_soft_reset
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_sysclock
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_wws_cfg
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_esupp_mode
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_passphrase
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wpa_key
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wep_key
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wapi_key
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_sleep_params
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_sleep_pd
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_auto_deep_sleep
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_inactivity_timeout
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_ps_mode
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power_ext
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_get_power
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_query_passphrase
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_ibss_channel
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mode
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_set_multicast_list
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mac_address
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_snmp_mib_ioctl
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_stats
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_signal
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_aes_key
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_status_change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_init_cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_init_cmd
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_data_rate
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_ant_cfg
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_radio_ctl
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_hs_wakeup_reason
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_otp_user_data
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_rx_mgmt_ind
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ver_ext
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_mem_rw
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_read_eeprom
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_reg_rw
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_hscfg
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_init_shutdown
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_host_cmd
</UL>

<P><STRONG><a name="[5ad]"></a>wlan_exec_next_cmd</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_exec_next_cmd &rArr; wlan_dnld_cmd_to_fw &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[5ae]"></a>wlan_ret_802_11_hs_cfg</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_ret_802_11_hs_cfg &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5af]"></a>wlan_process_cmdresp</STRONG> (Thumb, 734 bytes, Stack size 56 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_process_cmdresp &rArr; wlan_ret_802_11_hs_cfg &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw_complete
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_host_cmd
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[9c]"></a>wlan_cmd_timeout_func</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_cmd_timeout_func &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw_complete
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_init.o(.text)
</UL>
<P><STRONG><a name="[5b2]"></a>wlan_flush_scan_queue</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp_error
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[5b3]"></a>wlan_cancel_all_pending_cmd</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
</UL>

<P><STRONG><a name="[5b4]"></a>wlan_cancel_pending_ioctl</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_cancel_pending_ioctl &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pending_ioctl_cmd
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_ioctl
</UL>

<P><STRONG><a name="[6aa]"></a>wlan_ret_ver_ext</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_ver_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6ab]"></a>wlan_ret_rx_mgmt_ind</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_ret_rx_mgmt_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5b5]"></a>wlan_check_ps_cond</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_check_ps_cond &rArr; wlan_dnld_sleep_confirm_cmd &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[5b6]"></a>wlan_host_sleep_wakeup_event</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>

<P><STRONG><a name="[5b7]"></a>wlan_process_hs_config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_process_hs_config &rArr; wlan_pm_wakeup_card
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_wakeup_card
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[5b9]"></a>wlan_process_sleep_confirm_resp</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_process_sleep_confirm_resp &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
</UL>

<P><STRONG><a name="[66c]"></a>wlan_cmd_enh_power_mode</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_enh_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6a1]"></a>wlan_ret_enh_power_mode</STRONG> (Thumb, 570 bytes, Stack size 44 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wlan_ret_enh_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5ba]"></a>wlan_ret_802_11_tx_rate_query</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wlan_ret_802_11_tx_rate_query &rArr; wlan_index_to_data_rate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_index_to_data_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[668]"></a>wlan_cmd_tx_rate_cfg</STRONG> (Thumb, 158 bytes, Stack size 28 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wlan_cmd_tx_rate_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5bb]"></a>wlan_ret_tx_rate_cfg</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_ret_tx_rate_cfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rate_index
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_rate_auto
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5be]"></a>wlan_adapter_init_cmd</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_adapter_init_cmd &rArr; wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_sdio_gpio_int
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_init_cmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_init_cmd
</UL>

<P><STRONG><a name="[664]"></a>wlan_cmd_get_hw_spec</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_get_hw_spec
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5c0]"></a>wlan_cmd_cfg_data</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_cmd_cfg_data &rArr; wlan_parse_cal_cfg &rArr; wlan_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_cal_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[69a]"></a>wlan_ret_cfg_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_ret_cfg_data
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5c1]"></a>wlan_ret_get_hw_spec</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wlan_ret_get_hw_spec &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_show_devmcssupport
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_show_dot11ndevcap
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[676]"></a>wlan_cmd_802_11_radio_control</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_802_11_radio_control
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6a7]"></a>wlan_ret_802_11_radio_control</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_802_11_radio_control
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[690]"></a>wlan_cmd_hs_wakeup_reason</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6c0]"></a>wlan_ret_hs_wakeup_reason</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_ret_hs_wakeup_reason
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[669]"></a>wlan_cmd_802_11_rf_antenna</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_802_11_rf_antenna
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6a9]"></a>wlan_ret_802_11_rf_antenna</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_rf_antenna
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[68a]"></a>wlan_cmd_reg_access</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6bb]"></a>wlan_ret_reg_access</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_ret_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[68b]"></a>wlan_cmd_mem_access</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_mem_access
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6bc]"></a>wlan_ret_mem_access</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_mem_access
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5ca]"></a>wlan_allocate_adapter</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_allocate_adapter &rArr; wlan_alloc_cmd_buffer &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_cmd_buffer
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[5cb]"></a>wlan_init_priv</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wlan_init_priv &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_bsspriotbl
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_priv_init
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_priv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
</UL>

<P><STRONG><a name="[5ce]"></a>wlan_init_adapter</STRONG> (Thumb, 736 bytes, Stack size 16 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = wlan_init_adapter &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
</UL>

<P><STRONG><a name="[5d2]"></a>wlan_init_lock_list</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_init_lock_list &rArr; util_scalar_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_init
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[5d4]"></a>wlan_free_lock_list</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_free_lock_list &rArr; util_scalar_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_free
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_free_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[652]"></a>wlan_init_timer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_init_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[653]"></a>wlan_free_timer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_free_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[5d7]"></a>wlan_init_fw</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = wlan_init_fw &rArr; mlan_main_process &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_init_fw
</UL>

<P><STRONG><a name="[5d8]"></a>wlan_free_adapter</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_free_adapter &rArr; wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_cmd_buffer
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
</UL>

<P><STRONG><a name="[5d9]"></a>wlan_free_priv</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_curr_bcn
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_list
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_bsspriotbl
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
</UL>

<P><STRONG><a name="[5b1]"></a>wlan_init_fw_complete</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_init_fw_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_timeout_func
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
</UL>

<P><STRONG><a name="[655]"></a>wlan_shutdown_fw_complete</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_shutdown_fw_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
</UL>

<P><STRONG><a name="[552]"></a>wlan_band_to_radio_type</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mlan_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
</UL>

<P><STRONG><a name="[5e0]"></a>wlan_cmd_802_11_associate</STRONG> (Thumb, 1462 bytes, Stack size 112 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = wlan_cmd_802_11_associate &rArr; wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_association_req
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_wapi_ie
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_tsf_tlv
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_generic_ie
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5e5]"></a>wlan_ret_802_11_associate</STRONG> (Thumb, 752 bytes, Stack size 144 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = wlan_ret_802_11_associate &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_save_curr_bcn
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_2040_coex_event
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_tsf_timestamps
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5eb]"></a>wlan_cmd_802_11_ad_hoc_start</STRONG> (Thumb, 1528 bytes, Stack size 112 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = wlan_cmd_802_11_ad_hoc_start &rArr; wlan_11h_process_start &rArr; wlan_11d_create_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cfp_by_band_and_channel
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5ec]"></a>wlan_cmd_802_11_ad_hoc_join</STRONG> (Thumb, 1058 bytes, Stack size 80 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wlan_cmd_802_11_ad_hoc_join &rArr; wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_band_to_radio_type
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_append_11n_tlv
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5ed]"></a>wlan_ret_802_11_ad_hoc</STRONG> (Thumb, 302 bytes, Stack size 152 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = wlan_ret_802_11_ad_hoc &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_save_curr_bcn
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5ef]"></a>wlan_associate</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_associate &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[5f0]"></a>wlan_adhoc_start</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_adhoc_start &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[5f1]"></a>wlan_adhoc_join</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_adhoc_join &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ssid_cmp
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[52b]"></a>wlan_disconnect</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_disconnect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_stop
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mode
</UL>

<P><STRONG><a name="[5f7]"></a>wlan_meas_util_send_req</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, mlan_meas.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[5f8]"></a>wlan_meas_cmd_process</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mlan_meas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_meas_cmd_process &rArr; wlan_meas_cmd_request
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmd_get_report
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmd_request
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[5fa]"></a>wlan_meas_cmdresp_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_meas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_meas_cmdresp_process &rArr; wlan_meas_cmdresp_get_report &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmdresp_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5fd]"></a>wlan_misc_ioctl_host_cmd</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_misc_ioctl_host_cmd &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[5fe]"></a>wlan_misc_ioctl_init_shutdown</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_misc_ioctl_init_shutdown &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[5ff]"></a>wlan_get_info_debug_info</STRONG> (Thumb, 1698 bytes, Stack size 48 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_get_info_debug_info &rArr; wlan_get_rxreorder_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_txbastream_tbl
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rxreorder_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[5b8]"></a>wlan_pm_wakeup_card</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_pm_wakeup_card
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_hs_config
</UL>

<P><STRONG><a name="[d63]"></a>wlan_pm_reset_card</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mlan_misc.o(.text), UNUSED)

<P><STRONG><a name="[600]"></a>wlan_pm_ioctl_hscfg</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_pm_ioctl_hscfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[565]"></a>wlan_alloc_mlan_buffer</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_allocate_adapter
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_cmd_buffer
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
</UL>

<P><STRONG><a name="[59b]"></a>wlan_free_mlan_buffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_free_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_cmd_buffer
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_cmd_node
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_packet
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_upload_uap_rx_packet
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
</UL>

<P><STRONG><a name="[533]"></a>wlan_delay_func</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_delay_func
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_fw_status
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prog_fw_w_helper
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_poll_card_status
</UL>

<P><STRONG><a name="[601]"></a>wlan_bss_ioctl_bss_role</STRONG> (Thumb, 392 bytes, Stack size 176 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl_bss_role &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[532]"></a>wlan_misc_ioctl_custom_ie_list</STRONG> (Thumb, 1374 bytes, Stack size 80 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_custom_ioctl_auto_delete
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_custom_ioctl_get_autoidx
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_custom_ie_index_unused
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[603]"></a>wlan_reg_mem_ioctl_reg_rw</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_reg_mem_ioctl_reg_rw &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[604]"></a>wlan_reg_mem_ioctl_read_eeprom</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_reg_mem_ioctl_read_eeprom &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[605]"></a>wlan_reg_mem_ioctl_mem_rw</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_reg_mem_ioctl_mem_rw &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[606]"></a>wlan_is_station_list_empty</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mlan_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>

<P><STRONG><a name="[54e]"></a>wlan_get_station_entry</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ampdu_allowed
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_queue_raptr
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_11n_enabled
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_amsdu_allowed
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_unicast_packet
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx_pause_event
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_entry
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_station_entry
</UL>

<P><STRONG><a name="[608]"></a>wlan_add_station_entry</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_add_station_entry &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_key_material
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[609]"></a>wlan_delete_station_entry</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_delete_station_entry &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[5dc]"></a>wlan_delete_station_list</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_delete_station_list &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[60b]"></a>wlan_get_info_ver_ext</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_get_info_ver_ext &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[60c]"></a>wlan_reg_rx_mgmt_ind</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_reg_rx_mgmt_ind &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[60d]"></a>wlan_process_802dot11_mgmt_pkt</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_process_802dot11_mgmt_pkt &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
</UL>

<P><STRONG><a name="[60e]"></a>wlan_misc_otp_user_data</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_misc_otp_user_data &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[729]"></a>wlan_is_wmm_ie_present</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_is_wmm_ie_present
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
</UL>

<P><STRONG><a name="[72a]"></a>wlan_get_specific_ie</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wlan_get_specific_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
</UL>

<P><STRONG><a name="[60f]"></a>wlan_get_pm_info</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_get_pm_info &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[612]"></a>wlan_get_hs_wakeup_reason</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_get_hs_wakeup_reason &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[613]"></a>wlan_radio_ioctl_radio_ctl</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_radio_ioctl_radio_ctl &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[614]"></a>wlan_radio_ioctl_ant_cfg</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_radio_ioctl_ant_cfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[619]"></a>wlan_rate_ioctl_cfg</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wlan_rate_ioctl_cfg &rArr; wlan_rate_ioctl_set_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_index
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_rate_index
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_set_rate_value
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_rate_value
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[61a]"></a>wlan_rate_ioctl_get_data_rate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_rate_ioctl_get_data_rate &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[713]"></a>wlan_misc_ioctl_txcontrol</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_misc_ioctl_txcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[61e]"></a>wlan_is_network_compatible</STRONG> (Thumb, 954 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wpa_oui_present
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rsn_oui_present
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network_in_list
</UL>

<P><STRONG><a name="[5e8]"></a>wlan_save_curr_bcn</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_save_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[5f2]"></a>wlan_ssid_cmp</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ssid_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_join
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
</UL>

<P><STRONG><a name="[62d]"></a>wlan_find_ssid_in_list</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wlan_find_ssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ssid_cmp
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_bss_info
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_delete_ssid_table_entry
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[716]"></a>wlan_flush_scan_table</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_flush_scan_table
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
</UL>

<P><STRONG><a name="[632]"></a>wlan_scan_networks</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wlan_scan_networks &rArr; wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_specific_ssid
</UL>

<P><STRONG><a name="[670]"></a>wlan_cmd_802_11_scan</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_802_11_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[635]"></a>wlan_ret_802_11_scan</STRONG> (Thumb, 934 bytes, Stack size 152 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = wlan_ret_802_11_scan &rArr; wlan_scan_process_results &rArr; wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_user_scan_result
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interpret_bss_desc_with_ie
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_get_tlv_ptrs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_bgscan_query
</UL>

<P><STRONG><a name="[688]"></a>wlan_cmd_802_11_scan_ext</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_802_11_scan_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[69e]"></a>wlan_ret_802_11_scan_ext</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[639]"></a>wlan_handle_event_ext_scan_report</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, mlan_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>

<P><STRONG><a name="[671]"></a>wlan_cmd_802_11_bg_scan_query</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_802_11_bg_scan_query
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[63b]"></a>wlan_cmd_bgscan_config</STRONG> (Thumb, 986 bytes, Stack size 104 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wlan_cmd_bgscan_config &rArr; wlan_bgscan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[69f]"></a>wlan_ret_bgscan_config</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_bgscan_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[63c]"></a>wlan_ret_802_11_bgscan_query</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = wlan_ret_802_11_bgscan_query &rArr; wlan_ret_802_11_scan &rArr; wlan_scan_process_results &rArr; wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[63d]"></a>wlan_find_bssid_in_list</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_find_bssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_passphrase
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_query_passphrase
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>

<P><STRONG><a name="[5ac]"></a>wlan_queue_scan_cmd</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_queue_scan_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[63e]"></a>wlan_find_best_network</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_find_best_network &rArr; wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>

<P><STRONG><a name="[63f]"></a>wlan_scan_specific_ssid</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wlan_scan_specific_ssid &rArr; wlan_scan_networks &rArr; wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_delete_ssid_table_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
</UL>

<P><STRONG><a name="[5db]"></a>wlan_free_curr_bcn</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_free_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
</UL>

<P><STRONG><a name="[654]"></a>wlan_check_winner_status</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_check_winner_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[646]"></a>wlan_check_fw_status</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_check_fw_status &rArr; wlan_delay_func
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delay_func
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_read_fw_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[648]"></a>wlan_dnld_fw</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_dnld_fw &rArr; wlan_prog_fw_w_helper &rArr; wlan_sdio_poll_card_status &rArr; wlan_delay_func
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prog_fw_w_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[649]"></a>wlan_sdio_probe</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_sdio_probe &rArr; wlan_disable_host_int &rArr; wlan_sdio_disable_host_int_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disable_host_int
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_init_ioport
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[432]"></a>read_int_status</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_int_status
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_main_work_queue
</UL>

<P><STRONG><a name="[660]"></a>wlan_interrupt</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_interrupt
</UL>

<P><STRONG><a name="[64b]"></a>wlan_enable_host_int</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_enable_host_int &rArr; wlan_sdio_enable_host_int_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_enable_host_int_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
</UL>

<P><STRONG><a name="[64d]"></a>wlan_process_int_status</STRONG> (Thumb, 604 bytes, Stack size 64 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = wlan_process_int_status &rArr; wlan_decode_rx_packet &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_card_to_host
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rd_port
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[56f]"></a>wlan_sdio_host_to_card</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_wr_port_data
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_cmd_to_fw
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
</UL>

<P><STRONG><a name="[5bf]"></a>wlan_set_sdio_gpio_int</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
</UL>

<P><STRONG><a name="[68d]"></a>wlan_cmd_sdio_gpio_int</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_sdio_gpio_int
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[3e3]"></a>mlan_register</STRONG> (Thumb, 1252 bytes, Stack size 32 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mlan_register &rArr; wlan_free_adapter &rArr; wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_timer
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_timer
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_lock_list
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_allocate_adapter
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_probe
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
</UL>

<P><STRONG><a name="[3e5]"></a>mlan_unregister</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mlan_unregister &rArr; wlan_free_adapter &rArr; wlan_cancel_all_pending_cmd &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_adapter
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_timer
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
</UL>

<P><STRONG><a name="[3ff]"></a>mlan_dnld_fw</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mlan_dnld_fw &rArr; wlan_dnld_fw &rArr; wlan_prog_fw_w_helper &rArr; wlan_sdio_poll_card_status &rArr; wlan_delay_func
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_host_int
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_probe
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_fw
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_fw_status
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_winner_status
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[400]"></a>mlan_set_init_param</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mlan_set_init_param &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[401]"></a>mlan_init_fw</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mlan_init_fw &rArr; wlan_init_fw &rArr; mlan_main_process &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[437]"></a>mlan_shutdown_fw</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_shutdown_fw_complete
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[431]"></a>mlan_main_process</STRONG> (Thumb, 806 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = mlan_main_process &rArr; mlan_shutdown_fw &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_wakeup_card
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw_complete
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_hs_config
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_tx_blocked
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_tx
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_bypass_tx
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_main_work_queue
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
</UL>

<P><STRONG><a name="[417]"></a>mlan_send_packet</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mlan_send_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_buf_bypass_txqueue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
</UL>

<P><STRONG><a name="[451]"></a>mlan_ioctl</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mlan_ioctl &rArr; wlan_cancel_pending_ioctl &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wait_ioctl_complete
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
</UL>

<P><STRONG><a name="[65e]"></a>mlan_recv_packet_complete</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mlan_shim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
</UL>

<P><STRONG><a name="[40f]"></a>mlan_select_wmm_queue</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mlan_select_wmm_queue &rArr; wlan_wmm_select_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_select_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_select_queue
</UL>

<P><STRONG><a name="[430]"></a>mlan_interrupt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mlan_interrupt &rArr; wlan_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_main_work_queue
</UL>

<P><STRONG><a name="[10b]"></a>wlan_ops_sta_prepare_cmd</STRONG> (Thumb, 1508 bytes, Stack size 48 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_prepare_cmd &rArr; wlan_cmd_802_11_associate &rArr; wlan_11h_process_join &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmd_process
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mem_access
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reg_access
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_rf_antenna
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_hs_wakeup_reason
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_radio_control
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_cfg_data
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_get_hw_spec
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_rate_cfg
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_enh_power_mode
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_delba
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_rspgen
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_req
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_bf_cfg
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reject_addba_req
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_cfg
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_amsdu_aggr_ctrl
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_recfg_tx_buf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11d_domain_info
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_ts_status
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_stats
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_config
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_delts_req
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_addts_req
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_inactivity_timeout
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_otp_user_data
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_subscribe_event
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_sysclock_cfg
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mgmt_ie_list
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_ibss_coalescing_status
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_rf_channel
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_supplicant_profile
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_supplicant_pmk
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_key_material
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_stop
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_deauthenticate
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mac_multicast_adr
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_sleep_params
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_sleep_period
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_mac_address
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_hs_cfg
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_rf_tx_power
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_power_cfg
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_get_log
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_snmp_mib
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mac_control
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_rssi_info
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_sdio_gpio_int
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_bg_scan_query
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_scan_ext
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>wlan_ops_sta_init_cmd</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wlan_ops_sta_init_cmd &rArr; wlan_adapter_init_cmd &rArr; wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>wlan_ops_sta_process_cmdresp</STRONG> (Thumb, 1602 bytes, Stack size 48 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_process_cmdresp &rArr; wlan_ret_802_11_ad_hoc &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmdresp_process
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mem_access
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reg_access
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rf_antenna
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_hs_wakeup_reason
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_radio_control
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_cfg_data
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_tx_rate_query
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_enh_power_mode
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_rx_mgmt_ind
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_ver_ext
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_bf_cfg
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reject_addba_req
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_cfg
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_amsdu_aggr_ctrl
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmdresp_process
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11d_domain_info
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_ts_status
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_queue_stats
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_queue_config
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_delts_req
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_addts_req
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_otp_user_data
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_subscribe_event
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_inactivity_timeout
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_sysclock_cfg
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mgmt_ie_list
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_ibss_coalescing_status
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rf_channel
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_supplicant_profile
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_supplicant_pmk
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_key_material
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc_stop
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_deauthenticate
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mac_multicast_adr
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_mac_address
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_sleep_params
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_sleep_period
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rf_tx_power
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_power_cfg
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_log
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_snmp_mib
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mac_control
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rssi_info
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp_error
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_bgscan_query
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_bgscan_config
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_ext
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[5ee]"></a>wlan_reset_connect_state</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wlan_reset_connect_state &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_disconnect_event
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_ad_hoc_stop
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_deauthenticate
</UL>

<P><STRONG><a name="[5ea]"></a>wlan_2040_coex_event</STRONG> (Thumb, 84 bytes, Stack size 120 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_2040_coex_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
</UL>

<P><STRONG><a name="[10e]"></a>wlan_ops_sta_process_event</STRONG> (Thumb, 1622 bytes, Stack size 152 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = wlan_ops_sta_process_event &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ba_stream_timeout
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_bastream
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanrpt_ready
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanswann
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_disable
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_tx_enable
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_status_change
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_disconnect_event
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_null_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[698]"></a>wlan_find_bss</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_find_bss &rArr; wlan_find_best_network &rArr; wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_find_bss
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_supplicant_pmk
</UL>

<P><STRONG><a name="[6d6]"></a>wlan_bss_ioctl_find_bss</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = wlan_bss_ioctl_find_bss &rArr; wlan_query_passphrase &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_query_passphrase
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[708]"></a>wlan_misc_ioctl_mac_control</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_misc_ioctl_mac_control &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[709]"></a>wlan_misc_ioctl_thermal</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_misc_ioctl_thermal &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[70a]"></a>wlan_misc_ioctl_subscribe_evt</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_misc_ioctl_subscribe_evt &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[70e]"></a>wlan_ipaddr_arp_filter</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_ipaddr_arp_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_ipaddr_cfg
</UL>

<P><STRONG><a name="[70b]"></a>wlan_ipaddr_auto_arp_resp</STRONG> (Thumb, 288 bytes, Stack size 120 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wlan_ipaddr_auto_arp_resp &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_ipaddr_cfg
</UL>

<P><STRONG><a name="[70c]"></a>wlan_misc_ioctl_mef_cfg</STRONG> (Thumb, 362 bytes, Stack size 112 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wlan_misc_ioctl_mef_cfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[70d]"></a>wlan_misc_ioctl_ipaddr_cfg</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wlan_misc_ioctl_ipaddr_cfg &rArr; wlan_ipaddr_auto_arp_resp &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_auto_arp_resp
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_arp_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[70f]"></a>wlan_misc_ioctl_cfp_code_cfg</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wlan_misc_ioctl_cfp_code_cfg &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[710]"></a>wlan_misc_ioctl_country_code</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wlan_misc_ioctl_country_code &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_country_2_cfp_table_code
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[d64]"></a>wlan_set_ewpa_mode</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mlan_sta_ioctl.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>wlan_ops_sta_ioctl</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = wlan_ops_sta_ioctl &rArr; wlan_misc_cfg_ioctl &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cfg_ioctl
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wps_cfg_ioctl
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_snmp_mib_ioctl
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[573]"></a>wlan_process_rx_packet</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, mlan_sta_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_process_rx_packet &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_rx_packet
</UL>

<P><STRONG><a name="[10d]"></a>wlan_ops_sta_process_rx_packet</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, mlan_sta_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlan_ops_sta_process_rx_packet &rArr; mlan_11n_rxreorder_pkt &rArr; wlan_11n_scan_and_dispatch &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_packet
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_802dot11_mgmt_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[56e]"></a>wlan_check_last_packet_indication</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, mlan_sta_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_check_last_packet_indication &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_txpd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[10f]"></a>wlan_ops_sta_process_txpd</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, mlan_sta_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_ops_sta_process_txpd &rArr; wlan_check_last_packet_indication &rArr; wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_compute_driver_packet_delay
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[65b]"></a>wlan_send_null_packet</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, mlan_sta_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_send_null_packet &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[645]"></a>wlan_handle_rx_packet</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_handle_rx_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
</UL>

<P><STRONG><a name="[56c]"></a>wlan_write_data_complete</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[71a]"></a>wlan_process_tx</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_process_tx &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_bypass_tx
</UL>

<P><STRONG><a name="[567]"></a>wlan_recv_packet_complete</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_recv_packet_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_recv_packet_complete
</UL>

<P><STRONG><a name="[65c]"></a>wlan_add_buf_bypass_txqueue</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_add_buf_bypass_txqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
</UL>

<P><STRONG><a name="[610]"></a>wlan_bypass_tx_list_empty</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_bypass_tx_list_empty &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
</UL>

<P><STRONG><a name="[6ee]"></a>wlan_cleanup_bypass_txq</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_cleanup_bypass_txq &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_port_ctrl_enable
</UL>

<P><STRONG><a name="[659]"></a>wlan_process_bypass_tx</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wlan_process_bypass_tx &rArr; wlan_process_tx &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[728]"></a>wlan_check_specific_ie</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_check_specific_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
</UL>

<P><STRONG><a name="[112]"></a>wlan_ops_uap_prepare_cmd</STRONG> (Thumb, 882 bytes, Stack size 56 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wlan_ops_uap_prepare_cmd &rArr; wlan_cmd_11n_addba_rspgen &rArr; wlan_11n_create_rxreorder_tbl &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_mem_access
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reg_access
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_rf_antenna
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_hs_wakeup_reason
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_radio_control
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_cfg_data
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_get_hw_spec
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_rate_cfg
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_enh_power_mode
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_delba
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_rspgen
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_req
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_tx_bf_cfg
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_reject_addba_req
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_cfg
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_amsdu_aggr_ctrl
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_recfg_tx_buf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11d_domain_info
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_key_material
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_sta_deauth
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_snmp_mib
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_sys_configure
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_txdatapause
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_802_11_hs_cfg
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_wmm_queue_config
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_sdio_gpio_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>wlan_ops_uap_process_cmdresp</STRONG> (Thumb, 1000 bytes, Stack size 56 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = wlan_ops_uap_process_cmdresp &rArr; wlan_uap_ret_sys_config &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_mem_access
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reg_access
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_rf_antenna
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_hs_wakeup_reason
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_radio_control
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_get_hw_spec
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_cfg_data
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_rate_cfg
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_tx_rate_query
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_enh_power_mode
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_rx_mgmt_ind
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_ver_ext
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_hs_cfg
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_bf_cfg
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_reject_addba_req
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_cfg
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_amsdu_aggr_ctrl
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmdresp_process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11d_domain_info
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sta_list
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_snmp_mib
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_config
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_reset
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_txdatapause
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_process_cmdresp_error
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_queue_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>wlan_ops_uap_process_event</STRONG> (Thumb, 1184 bytes, Stack size 64 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = wlan_ops_uap_process_event &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_list
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_reorder_tbl
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_rxba_sync_event
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ba_stream_timeout
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_txbastream_tbl
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_bastream
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanrpt_ready
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sta_assoc_event
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_update_wapi_info_tlv
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_sta_capability
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx_pause_event
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_entry
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_station_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>wlan_ops_uap_init_cmd</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wlan_ops_uap_init_cmd &rArr; wlan_adapter_init_cmd &rArr; wlan_set_sdio_gpio_int &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[534]"></a>wlan_uap_set_channel</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_uap_set_channel &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_callback_bss_ioctl_start
</UL>

<P><STRONG><a name="[52f]"></a>wlan_uap_get_channel</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_get_channel &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_snmp_mib_11h
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_11h_channel_check_req
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_domain_info
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_start
</UL>

<P><STRONG><a name="[530]"></a>wlan_uap_get_beacon_dtim</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_uap_get_beacon_dtim &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>

<P><STRONG><a name="[111]"></a>wlan_ops_uap_ioctl</STRONG> (Thumb, 1156 bytes, Stack size 72 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = wlan_ops_uap_ioctl &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_snmp_mib_11h
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_11h_channel_check_req
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_domain_info
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_snmp_mib_11d
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_deepsleep
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_bss_info
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_sec_ioctl_set_encrypt_key
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_sec_ioctl_wapi_enable
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_misc_ioctl_gen_ie
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_pm_ioctl_mode
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_misc_ioctl_txdatapause
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_misc_ioctl_soft_reset
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_sta_list
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_deauth_sta
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_config
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_stats
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_mac_address
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_reset
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_start
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_bss_ioctl_stop
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_txcontrol
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_data_rate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_ant_cfg
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_radio_ctl
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_hs_wakeup_reason
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_rx_mgmt_ind
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ver_ext
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_mem_rw
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_read_eeprom
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_reg_rw
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_hscfg
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_init_shutdown
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_host_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>wlan_ops_uap_process_txpd</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_ops_uap_process_txpd &rArr; wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[572]"></a>wlan_process_uap_rx_packet</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wlan_process_uap_rx_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drop_tx_pkts
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_unicast_packet
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
</UL>

<P><STRONG><a name="[114]"></a>wlan_ops_uap_process_rx_packet</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wlan_ops_uap_process_rx_packet &rArr; mlan_11n_rxreorder_pkt &rArr; wlan_11n_scan_and_dispatch &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_upload_uap_rx_packet
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_802dot11_mgmt_pkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_shim.o(.constdata)
</UL>
<P><STRONG><a name="[566]"></a>wlan_uap_recv_packet</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drop_tx_pkts
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_unicast_packet
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
</UL>

<P><STRONG><a name="[54f]"></a>wlan_wmm_get_ralist_node</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_wmm_get_ralist_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_queue_raptr
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
</UL>

<P><STRONG><a name="[550]"></a>wlan_get_random_ba_threshold</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_get_random_ba_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_req
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
</UL>

<P><STRONG><a name="[5e9]"></a>wlan_ralist_add</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_random_ba_threshold
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuing_ra_based
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_allocate_ralist_node
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_11n_enabled
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_queue_raptr
</UL>

<P><STRONG><a name="[56d]"></a>wlan_is_ralist_valid</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_is_ralist_valid &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[71f]"></a>wlan_updata_ralist_tx_pause</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_updata_ralist_tx_pause &rArr; wlan_wmm_get_ralist_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx_pause_event
</UL>

<P><STRONG><a name="[5da]"></a>wlan_clean_txrx</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_reorder_tbl
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deleteall_txbastream_tbl
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_all_ralist
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[770]"></a>wlan_wmm_default_queue_priorities</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_init
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
</UL>

<P><STRONG><a name="[72d]"></a>wlan_wmm_setup_queue_priorities</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_wmm_setup_queue_priorities &rArr; wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_default_queue_priorities
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_priorities_tid
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
</UL>

<P><STRONG><a name="[72c]"></a>wlan_wmm_setup_ac_downgrade</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_wmm_setup_ac_downgrade &rArr; wlan_wmm_eval_downgrade_ac
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_eval_downgrade_ac
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
</UL>

<P><STRONG><a name="[5d1]"></a>wlan_wmm_init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_wmm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_default_queue_priorities
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
</UL>

<P><STRONG><a name="[5e7]"></a>wlan_wmm_setup_queues</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_wmm_setup_queues &rArr; wlan_wmm_setup_queue_priorities &rArr; wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_ac_downgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_uap_capability
</UL>

<P><STRONG><a name="[6c3]"></a>wlan_cmd_wmm_status_change</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wlan_cmd_wmm_status_change &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[611]"></a>wlan_wmm_lists_empty</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_wmm_lists_empty &rArr; util_scalar_read
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_last_packet_indication
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_tx
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
</UL>

<P><STRONG><a name="[772]"></a>wlan_ralist_update</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, mlan_wmm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_random_ba_threshold
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuing_ra_based
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_11n_enabled
</UL>

<P><STRONG><a name="[65d]"></a>wlan_wmm_add_buf_txqueue</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuing_ra_based
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_queue_raptr
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_downgrade_tid
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_conditional_write
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_increment
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_tail
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
</UL>

<P><STRONG><a name="[6b1]"></a>wlan_ret_wmm_get_status</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wlan_ret_wmm_get_status &rArr; wlan_send_wmmac_host_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_ac_downgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[5e1]"></a>wlan_wmm_process_association_req</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_wmm_process_association_req
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[562]"></a>wlan_wmm_compute_driver_packet_delay</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_form_amsdu_txpd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_txpd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_txpd
</UL>

<P><STRONG><a name="[65a]"></a>wlan_wmm_process_tx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wlan_wmm_process_tx &rArr; wlan_dequeue_tx_packet &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[65f]"></a>wlan_wmm_select_queue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_wmm_select_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_convert_tos_to_ac
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_select_wmm_queue
</UL>

<P><STRONG><a name="[74e]"></a>wlan_drop_tx_pkts</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_drop_tx_pkts &rArr; wlan_del_tx_pkts_in_ralist &rArr; util_dequeue_list &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
</UL>

<P><STRONG><a name="[736]"></a>wlan_wmm_delete_peer_ralist</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_wmm_delete_peer_ralist &rArr; wlan_wmm_del_pkts_in_ralist_node &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[681]"></a>wlan_cmd_wmm_addts_req</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_wmm_addts_req
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b2]"></a>wlan_ret_wmm_addts_req</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_ret_wmm_addts_req
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[682]"></a>wlan_cmd_wmm_delts_req</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_wmm_delts_req
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b3]"></a>wlan_ret_wmm_delts_req</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_ret_wmm_delts_req &rArr; wlan_send_wmmac_host_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[684]"></a>wlan_cmd_wmm_queue_stats</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_wmm_queue_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b5]"></a>wlan_ret_wmm_queue_stats</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_ret_wmm_queue_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[685]"></a>wlan_cmd_wmm_ts_status</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_wmm_ts_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b6]"></a>wlan_ret_wmm_ts_status</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_wmm_ts_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[683]"></a>wlan_cmd_wmm_queue_config</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_wmm_queue_config
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[6b4]"></a>wlan_ret_wmm_queue_config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_wmm_queue_config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[717]"></a>wlan_wmm_cfg_ioctl</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_wmm_cfg_ioctl &rArr; wlan_wmm_ioctl_queue_config &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_queue_config
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_ts_status
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_queue_status
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_queue_stats
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_delts_req
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_addts_req
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_qos
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_ioctl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[77c]"></a>put_page</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = put_page &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>

<P><STRONG><a name="[786]"></a>__kfree_skb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skbmem
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;consume_skb
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
</UL>

<P><STRONG><a name="[77f]"></a>kfree_skb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = kfree_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_drop_list
</UL>

<P><STRONG><a name="[78d]"></a>skb_clone</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = skb_clone &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
</UL>

<P><STRONG><a name="[78e]"></a>skb_copy_from_linear_data_offset</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
</UL>

<P><STRONG><a name="[78f]"></a>skb_copy_bits</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_from_linear_data_offset
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
</UL>

<P><STRONG><a name="[791]"></a>get_page</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = get_page &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
</UL>

<P><STRONG><a name="[792]"></a>pskb_expand_head</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = pskb_expand_head &rArr; skb_release_data &rArr; skb_drop_fraglist &rArr; skb_drop_list &rArr; kfree_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_tail_pointer
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone_fraglist
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header_was_set
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
</UL>

<P><STRONG><a name="[796]"></a>__pskb_pull_tail</STRONG> (Thumb, 714 bytes, Stack size 48 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_tail_pointer
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headlen
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull
</UL>

<P><STRONG><a name="[d65]"></a>skb_tailroom</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, skbuff.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>skb_reserve</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__netdev_alloc_skb
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dev_alloc_skb
</UL>

<P><STRONG><a name="[411]"></a>skb_mac_header</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_rx
</UL>

<P><STRONG><a name="[7b6]"></a>skb_reset_mac_header</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_trans
</UL>

<P><STRONG><a name="[3b1]"></a>__alloc_skb</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reset_tail_pointer
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__netdev_alloc_skb
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dev_alloc_skb
</UL>

<P><STRONG><a name="[799]"></a>__dev_alloc_skb</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_alloc_skb
</UL>

<P><STRONG><a name="[79a]"></a>skb_copy_from_linear_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = skb_copy_from_linear_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
</UL>

<P><STRONG><a name="[79d]"></a>__netdev_alloc_skb</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
</UL>

<P><STRONG><a name="[429]"></a>dev_alloc_skb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dev_alloc_skb &rArr; __dev_alloc_skb &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dev_alloc_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[d66]"></a>get_global_skb_alloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, skbuff.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>consume_skb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = consume_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_mlan_buffer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_send_packet_complete
</UL>

<P><STRONG><a name="[79e]"></a>skb_recycle_check</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reset_tail_pointer
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_head_state
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[79f]"></a>skb_morph</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
</UL>

<P><STRONG><a name="[4a9]"></a>skb_put</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = skb_put &rArr; skb_over_panic &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_tail_pointer
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_over_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
</UL>

<P><STRONG><a name="[7a1]"></a>skb_copy</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headroom
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
</UL>

<P><STRONG><a name="[7a2]"></a>pskb_copy</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pskb_copy &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_from_linear_data
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headroom
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headlen
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone_fraglist
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
</UL>

<P><STRONG><a name="[416]"></a>skb_realloc_headroom</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = skb_realloc_headroom &rArr; pskb_expand_head &rArr; skb_release_data &rArr; skb_drop_fraglist &rArr; skb_drop_list &rArr; kfree_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headroom
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
</UL>

<P><STRONG><a name="[7a3]"></a>skb_copy_expand</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reserve
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headroom
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
</UL>

<P><STRONG><a name="[7a4]"></a>skb_push</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_under_panic
</UL>

<P><STRONG><a name="[405]"></a>do_gettimeofday</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = do_gettimeofday
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_fill_mlan_buffer
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_get_system_time
</UL>

<P><STRONG><a name="[409]"></a>timeval_to_ktime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeval_to_ktime
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_fill_mlan_buffer
</UL>

<P><STRONG><a name="[3f3]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[7a6]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[7a5]"></a>list_add</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>

<P><STRONG><a name="[414]"></a>list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
</UL>

<P><STRONG><a name="[7a8]"></a>__list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_del_entry
</UL>

<P><STRONG><a name="[7a7]"></a>__list_del_entry</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_del
</UL>

<P><STRONG><a name="[3ec]"></a>list_del</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_check_tcp_fin
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>

<P><STRONG><a name="[45b]"></a>copy_from_user</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy_from_user &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_bss_role
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_type
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_host_packet
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hostcmd_ioctl
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_sta_list_ioctl
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_cfg_ioctl
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl_ioctl
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sta_deauth_ioctl
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_fw_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
</UL>

<P><STRONG><a name="[40c]"></a>try_module_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_open
</UL>

<P><STRONG><a name="[40d]"></a>module_put</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_close
</UL>

<P><STRONG><a name="[4b8]"></a>ieee80211_get_channel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[7a9]"></a>wpa_parse_wpa_ie_rsn</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_parse_wpa_ie_rsn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_key_mgmt_to_bitfield
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_selector_to_bitfield
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>

<P><STRONG><a name="[7af]"></a>wpa_parse_wpa_ie</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_rsn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_user_scan_result
</UL>

<P><STRONG><a name="[7b0]"></a>wpa_sm_parse_own_wpa_ie</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[637]"></a>handle_user_scan_result</STRONG> (Thumb, 236 bytes, Stack size 96 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = handle_user_scan_result &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_rsn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[4b9]"></a>cfg80211_inform_bss</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cfg80211_inform_bss &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[3e8]"></a>wiphy_free</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiphy_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
</UL>

<P><STRONG><a name="[3e7]"></a>wiphy_unregister</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiphy_unregister &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_uap_cfg80211
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_register_sta_cfg80211
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
</UL>

<P><STRONG><a name="[977]"></a>ieee80211_channel_to_frequency</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
</UL>

<P><STRONG><a name="[44c]"></a>ieee80211_frequency_to_channel</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_channel
</UL>

<P><STRONG><a name="[7b1]"></a>strnicmp</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[479]"></a>cfg80211_scan_done</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = cfg80211_scan_done &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_scan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[4c2]"></a>cfg80211_connect_result</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cfg80211_connect_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[4ad]"></a>cfg80211_cqm_rssi_notify</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cfg80211_cqm_rssi_notify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[7b3]"></a>cfg80211_michael_mic_failure</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4c3]"></a>cfg80211_ibss_joined</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cfg80211_ibss_joined &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_join_ibss
</UL>

<P><STRONG><a name="[4ba]"></a>cfg80211_put_bss</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = cfg80211_put_bss &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
</UL>

<P><STRONG><a name="[7b4]"></a>cfg80211_remain_on_channel_expired</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7b5]"></a>cfg80211_ready_on_channel</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, usr_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4aa]"></a>eth_type_trans</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eth_type_trans
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_reset_mac_header
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[4ab]"></a>netif_rx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = netif_rx &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
</UL>

<P><STRONG><a name="[7b8]"></a>speex_bits_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bits.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_init_buffer
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_init
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_speex_encode
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
</UL>

<P><STRONG><a name="[7b7]"></a>speex_bits_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
</UL>

<P><STRONG><a name="[7b9]"></a>speex_bits_init_buffer</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_reset
</UL>

<P><STRONG><a name="[d67]"></a>speex_bits_set_bit_buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bits.o(.text), UNUSED)

<P><STRONG><a name="[7ba]"></a>speex_bits_destroy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_deinit
</UL>

<P><STRONG><a name="[d68]"></a>speex_bits_rewind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bits.o(.text), UNUSED)

<P><STRONG><a name="[7bb]"></a>speex_bits_read_from</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_notify
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_speex_stream
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_speex_decode
</UL>

<P><STRONG><a name="[7c0]"></a>speex_bits_read_whole_bytes</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_realloc
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_flush
</UL>

<P><STRONG><a name="[7c1]"></a>speex_bits_pack</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = speex_bits_pack &rArr; speex_realloc &rArr; mem_realloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_notify
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_high
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_nb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_lbr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_insert_terminator
</UL>

<P><STRONG><a name="[7c2]"></a>speex_bits_insert_terminator</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_write
</UL>

<P><STRONG><a name="[7c3]"></a>speex_bits_write</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_insert_terminator
</UL>
<BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_speex_encode
</UL>

<P><STRONG><a name="[d69]"></a>speex_bits_write_whole_bytes</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bits.o(.text), UNUSED)

<P><STRONG><a name="[7c5]"></a>speex_bits_unpack_unsigned</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = speex_bits_unpack_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_inband_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_default_user_handler
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_unquant_high
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_unquant_nb
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_unquant_lbr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_unquant_3tap
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_shape_sign_unquant
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_signed
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_char_handler
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_vbr_quality_request_handler
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_enh_request_handler
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_vbr_request_handler
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_high_mode_request_handler
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_low_mode_request_handler
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_mode_request_handler
</UL>

<P><STRONG><a name="[7c4]"></a>speex_bits_unpack_signed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>

<P><STRONG><a name="[d6a]"></a>speex_bits_peek_unsigned</STRONG> (Thumb, 398 bytes, Stack size 20 bytes, bits.o(.text), UNUSED)

<P><STRONG><a name="[d6b]"></a>speex_bits_peek</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bits.o(.text), UNUSED)

<P><STRONG><a name="[808]"></a>speex_bits_advance</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bits.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_inband_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_default_user_handler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[806]"></a>speex_bits_remaining</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bits.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[d6c]"></a>speex_bits_nbytes</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bits.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>split_cb_search_shape_sign</STRONG> (Thumb, 2124 bytes, Stack size 184 bytes, cb_search.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = split_cb_search_shape_sign &rArr; split_cb_search_shape_sign_N1 &rArr; speex_bits_pack &rArr; speex_realloc &rArr; mem_realloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vq_nbest_sign
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vq_nbest
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_percep_zero16
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_update
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_weighted_codebook
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>split_cb_shape_sign_unquant</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, cb_search.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = split_cb_shape_sign_unquant &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>noise_codebook_quant</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, cb_search.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = noise_codebook_quant &rArr; residue_percep_zero16 &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;residue_percep_zero16
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modes.o(.constdata)
<LI> nb_celp.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>noise_codebook_unquant</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, cb_search.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = noise_codebook_unquant
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[7f2]"></a>bw_lpc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bw_lpc
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode_lost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[80a]"></a>sanitize_values32</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sanitize_values32
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[7ce]"></a>highpass</STRONG> (Thumb, 240 bytes, Stack size 104 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = highpass &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode_lost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[802]"></a>signal_mul</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = signal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[801]"></a>signal_div</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = signal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7cf]"></a>compute_rms</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = compute_rms &rArr; spx_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7d1]"></a>compute_rms16</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = compute_rms16 &rArr; spx_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode_lost
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encoder_ctl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_ctl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicomb
</UL>

<P><STRONG><a name="[7e3]"></a>normalize16</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = normalize16
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
</UL>

<P><STRONG><a name="[7d3]"></a>filter_mem16</STRONG> (Thumb, 200 bytes, Stack size 36 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = filter_mem16
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_percep_zero16
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;residue_percep_zero16
</UL>

<P><STRONG><a name="[7d2]"></a>iir_mem16</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = iir_mem16
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode_lost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_percep_zero16
</UL>

<P><STRONG><a name="[7d4]"></a>fir_mem16</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fir_mem16
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;residue_percep_zero16
</UL>

<P><STRONG><a name="[7cc]"></a>syn_percep_zero16</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = syn_percep_zero16 &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_mem16
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_mem16
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forced_pitch_quant
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
</UL>

<P><STRONG><a name="[7cd]"></a>residue_percep_zero16</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = residue_percep_zero16 &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fir_mem16
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_mem16
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noise_codebook_quant
</UL>

<P><STRONG><a name="[7d5]"></a>compute_impulse_response</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = compute_impulse_response &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7d6]"></a>qmf_decomp</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, filters.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[7d7]"></a>qmf_synth</STRONG> (Thumb, 792 bytes, Stack size 72 bytes, filters.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[7da]"></a>multicomb</STRONG> (Thumb, 950 bytes, Stack size 112 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = multicomb &rArr; interp_pitch &rArr; inner_prod
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_prod
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms16
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_pitch
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[7f0]"></a>_spx_lpc</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _spx_lpc
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7ef]"></a>_spx_autocorr</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _spx_autocorr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7db]"></a>lpc_to_lsp</STRONG> (Thumb, 616 bytes, Stack size 120 bytes, lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lpc_to_lsp &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_acos
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cheb_poly_eva
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7de]"></a>lsp_to_lpc</STRONG> (Thumb, 840 bytes, Stack size 80 bytes, lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lsp_to_lpc &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[7f1]"></a>lsp_interpolate</STRONG> (Thumb, 242 bytes, Stack size 36 bytes, lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lsp_interpolate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[7d9]"></a>inner_prod</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inner_prod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_xcorr
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicomb
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp_pitch
</UL>

<P><STRONG><a name="[7e2]"></a>open_loop_nbest_pitch</STRONG> (Thumb, 790 bytes, Stack size 104 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = open_loop_nbest_pitch &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_xcorr
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_sqrt
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_prod
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize16
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
</UL>

<P><STRONG><a name="[11e]"></a>pitch_search_3tap</STRONG> (Thumb, 654 bytes, Stack size 168 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = pitch_search_3tap &rArr; pitch_gain_search_3tap &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>pitch_unquant_3tap</STRONG> (Thumb, 490 bytes, Stack size 72 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pitch_unquant_3tap &rArr; speex_bits_unpack_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>forced_pitch_quant</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = forced_pitch_quant &rArr; syn_percep_zero16 &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_percep_zero16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>forced_pitch_unquant</STRONG> (Thumb, 94 bytes, Stack size 36 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = forced_pitch_unquant
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>nb_encoder_init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = nb_encoder_init &rArr; vbr_init &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_init
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>nb_encoder_destroy</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = nb_encoder_destroy &rArr; speex_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_destroy
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>nb_encoder_ctl</STRONG> (Thumb, 1030 bytes, Stack size 40 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nb_encoder_ctl &rArr; compute_rms16 &rArr; spx_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning_int
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>nb_encode</STRONG> (Thumb, 6012 bytes, Stack size 224 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = nb_encode &rArr; vbr_analysis &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scal_quant32
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scal_quant
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_speex_fatal
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_sqrt
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_interpolate
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_to_lpc
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_to_lsp
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spx_autocorr
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spx_lpc
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_impulse_response
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fir_mem16
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_mem16
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_mem16
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms16
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_div
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_mul
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highpass
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bw_lpc
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>nb_decoder_init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = nb_decoder_init &rArr; speex_alloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_alloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>nb_decoder_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = nb_decoder_destroy &rArr; speex_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>nb_decoder_ctl</STRONG> (Thumb, 702 bytes, Stack size 64 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nb_decoder_ctl &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning_int
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms16
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>nb_decode</STRONG> (Thumb, 4140 bytes, Stack size 176 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = nb_decode &rArr; multicomb &rArr; interp_pitch &rArr; inner_prod
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_inband_handler
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_notify
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode_lost
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_speex_fatal
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_sqrt
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_rand
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_interpolate
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_to_lpc
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicomb
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_mem16
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms16
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_mul
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highpass
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanitize_values32
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bw_lpc
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_remaining
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_advance
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>lsp_quant_nb</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, quant_lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = lsp_quant_nb &rArr; speex_bits_pack &rArr; speex_realloc &rArr; mem_realloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_weight_quant
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_quant_weights
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>lsp_unquant_nb</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, quant_lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsp_unquant_nb &rArr; speex_bits_unpack_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>lsp_quant_lbr</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, quant_lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = lsp_quant_lbr &rArr; speex_bits_pack &rArr; speex_realloc &rArr; mem_realloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_weight_quant
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_quant_weights
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>lsp_unquant_lbr</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, quant_lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsp_unquant_lbr &rArr; speex_bits_unpack_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[80e]"></a>lsp_quant_high</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, quant_lsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_weight_quant
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_quant_weights
</UL>

<P><STRONG><a name="[80f]"></a>lsp_unquant_high</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, quant_lsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>

<P><STRONG><a name="[9a2]"></a>speex_encoder_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, speex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
</UL>

<P><STRONG><a name="[9a3]"></a>speex_decoder_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, speex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
</UL>

<P><STRONG><a name="[9a5]"></a>speex_encoder_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, speex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_deinit
</UL>

<P><STRONG><a name="[9a6]"></a>speex_decoder_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, speex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_deinit
</UL>

<P><STRONG><a name="[d6d]"></a>speex_encode_native</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, speex.o(.text), UNUSED)

<P><STRONG><a name="[d6e]"></a>speex_decode_native</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, speex.o(.text), UNUSED)

<P><STRONG><a name="[7ed]"></a>speex_encoder_ctl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, speex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = speex_encoder_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encoder_ctl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_vbr_quality_request_handler
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_vbr_request_handler
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_high_mode_request_handler
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_low_mode_request_handler
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_mode_request_handler
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encode
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
</UL>

<P><STRONG><a name="[810]"></a>speex_encode</STRONG> (Thumb, 200 bytes, Stack size 1328 bytes, speex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[9a8]"></a>speex_encode_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, speex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_speex_encode
</UL>

<P><STRONG><a name="[812]"></a>speex_decoder_ctl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, speex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_enh_request_handler
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decode
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
</UL>

<P><STRONG><a name="[811]"></a>speex_decode</STRONG> (Thumb, 86 bytes, Stack size 1312 bytes, speex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decoder_ctl
</UL>

<P><STRONG><a name="[9aa]"></a>speex_decode_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, speex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_speex_stream
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_speex_decode
</UL>

<P><STRONG><a name="[122]"></a>nb_mode_query</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, speex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nb_mode_query &rArr; speex_warning_int &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.constdata)
</UL>
<P><STRONG><a name="[814]"></a>speex_lib_ctl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, speex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning_int
</UL>

<P><STRONG><a name="[809]"></a>speex_inband_handler</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, speex_callbacks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = speex_inband_handler &rArr; speex_bits_unpack_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_advance
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[815]"></a>speex_std_mode_request_handler</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, speex_callbacks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>

<P><STRONG><a name="[816]"></a>speex_std_low_mode_request_handler</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, speex_callbacks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>

<P><STRONG><a name="[817]"></a>speex_std_high_mode_request_handler</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, speex_callbacks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>

<P><STRONG><a name="[818]"></a>speex_std_vbr_request_handler</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, speex_callbacks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>

<P><STRONG><a name="[819]"></a>speex_std_enh_request_handler</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, speex_callbacks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decoder_ctl
</UL>

<P><STRONG><a name="[81a]"></a>speex_std_vbr_quality_request_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, speex_callbacks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>

<P><STRONG><a name="[81b]"></a>speex_std_char_handler</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, speex_callbacks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a2]"></a>speex_default_user_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, speex_callbacks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = speex_default_user_handler &rArr; speex_bits_unpack_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_advance
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_unpack_unsigned
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_celp.o(.text)
</UL>
<P><STRONG><a name="[7ea]"></a>vbr_init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, vbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vbr_init &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encoder_init
</UL>

<P><STRONG><a name="[7fb]"></a>vbr_analysis</STRONG> (Thumb, 4018 bytes, Stack size 136 bytes, vbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = vbr_analysis &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7eb]"></a>vbr_destroy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, vbr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encoder_destroy
</UL>

<P><STRONG><a name="[800]"></a>scal_quant</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scal_quant
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7ff]"></a>scal_quant32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scal_quant32
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7ca]"></a>vq_nbest</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, vq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vq_nbest
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
</UL>

<P><STRONG><a name="[7c9]"></a>vq_nbest_sign</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, vq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vq_nbest_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
</UL>

<P><STRONG><a name="[81f]"></a>update_ai_event</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = update_ai_event &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_to_flash_timeout_cb
</UL>

<P><STRONG><a name="[820]"></a>get_ai_audio_pcm_data_len</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = get_ai_audio_pcm_data_len &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
</UL>

<P><STRONG><a name="[821]"></a>get_ai_audio_pcm_data</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = get_ai_audio_pcm_data &rArr; m25p80_read &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_userdata
</UL>

<P><STRONG><a name="[823]"></a>send_voice_recording_event</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = send_voice_recording_event &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
</UL>

<P><STRONG><a name="[824]"></a>send_and_encode_text_event</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = send_and_encode_text_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
</UL>

<P><STRONG><a name="[825]"></a>get_voice_ai_event</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = get_voice_ai_event &rArr; msgrcv &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgrcv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_voice_task
</UL>

<P><STRONG><a name="[82d]"></a>dac_low_level_open</STRONG> (Thumb, 800 bytes, Stack size 64 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = dac_low_level_open &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ITConfig
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DAC1Configuration
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_open
</UL>

<P><STRONG><a name="[839]"></a>dac_switch_samplerate</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dac_switch_samplerate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_mp3
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_mp3
</UL>

<P><STRONG><a name="[83b]"></a>dac_low_level_close</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dac_low_level_close &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ITConfig
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_close
</UL>

<P><STRONG><a name="[83f]"></a>dac_close_channel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, audio_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>

<P><STRONG><a name="[21]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[843]"></a>adc_low_level_open</STRONG> (Thumb, 782 bytes, Stack size 64 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = adc_low_level_open &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_open
</UL>

<P><STRONG><a name="[849]"></a>adc_low_level_close</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = adc_low_level_close &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_close
</UL>

<P><STRONG><a name="[84a]"></a>adc_switch_samplerate</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc_switch_samplerate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
</UL>

<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[957]"></a>audio_button_event</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, audio_low_level.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_stat_callback
</UL>

<P><STRONG><a name="[d6f]"></a>send_audio_data_to_remote</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, audio_low_level.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[84d]"></a>deinit_camera</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = deinit_camera
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DeInit
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
</UL>

<P><STRONG><a name="[851]"></a>img_send_thread</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = img_send_thread &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgrcv
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(.text)
</UL>
<P><STRONG><a name="[852]"></a>open_camera</STRONG> (Thumb, 678 bytes, Stack size 32 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = open_camera &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ITConfig
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_JPEGCmd
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DeInit
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_camera
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[859]"></a>close_camera</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DeInit
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_event
</UL>

<P><STRONG><a name="[85a]"></a>start_capture_img</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_capture_img &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_camera_task
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[85c]"></a>stop_capture_img</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stop_capture_img &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[85d]"></a>handle_dcmi_rcv</STRONG> (Thumb, 1252 bytes, Stack size 40 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = handle_dcmi_rcv &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_free
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_size
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_free2
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_size2
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = DCMI_IRQHandler &rArr; handle_dcmi_rcv &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; exit_interrupt &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[863]"></a>switch_jpeg_size</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
</UL>

<P><STRONG><a name="[865]"></a>send_img_local</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img
</UL>

<P><STRONG><a name="[868]"></a>send_img</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img_local
</UL>

<P><STRONG><a name="[869]"></a>web_get_picture</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[86a]"></a>web_free_picture</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, camera.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[86b]"></a>init_dht11</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_dht11 &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensers
</UL>

<P><STRONG><a name="[871]"></a>dht11_recv_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dht11.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dht11_recv
</UL>

<P><STRONG><a name="[86e]"></a>dht11_recv_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dht11_recv_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_start_read
</UL>

<P><STRONG><a name="[870]"></a>handle_dht11_recv</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = handle_dht11_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_recv_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DHT11_IRQHandler
</UL>

<P><STRONG><a name="[872]"></a>dht11_start_read</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = dht11_start_read &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_count
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_recv_enable
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
</UL>

<P><STRONG><a name="[9be]"></a>dht11_read_data</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dht11.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
</UL>

<P><STRONG><a name="[874]"></a>__DHT11_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dht11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __DHT11_IRQHandler &rArr; handle_dht11_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_count
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dht11_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[875]"></a>_mem_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _mem_init &rArr; sys_meminit2 &rArr; prvHeapInit
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_meminit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_meminit2
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[877]"></a>init_systick</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
</UL>

<P><STRONG><a name="[879]"></a>init_rng</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_rng
</UL>
<BR>[Calls]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
</UL>

<P><STRONG><a name="[30c]"></a>get_random</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
</UL>

<P><STRONG><a name="[830]"></a>gpio_cfg</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_recv_enable
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_init
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_start_read
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dht11
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_close_channel
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_gpio_init
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_InitAdc
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_I2C_Init
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_InputConfig
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_OutputConfig
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key_dev
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBreadByte
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_INIT
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[87d]"></a>driver_gpio_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = driver_gpio_init &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
</UL>

<P><STRONG><a name="[87e]"></a>check_rst_stat</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, driver_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[87f]"></a>init_us_timer</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_us_timer &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
</UL>

<P><STRONG><a name="[873]"></a>get_us_count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_us_count
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EXTI14_IRQHandler
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DHT11_IRQHandler
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_start_read
</UL>

<P><STRONG><a name="[881]"></a>driver_misc_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, driver_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = driver_misc_init &rArr; driver_gpio_init &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_us_timer
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_init
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rng
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[882]"></a>start_timer</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, hard_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
</UL>

<P><STRONG><a name="[884]"></a>get_hard_timer_clk</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, hard_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
</UL>

<P><STRONG><a name="[885]"></a>pause_timer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hard_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pause_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_timer_callback
</UL>

<P><STRONG><a name="[886]"></a>continue_timer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hard_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[887]"></a>mode_timer_by_counter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mode_timer_by_counter
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
</UL>

<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[888]"></a>ir_pwm_enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ir_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ir_pwm_enable &rArr; TIM_SelectOCxM
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
</UL>
<BR>[Called By]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
</UL>

<P><STRONG><a name="[88a]"></a>ir_pwm_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ir_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ir_pwm_disable &rArr; TIM_SelectOCxM
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
</UL>

<P><STRONG><a name="[88b]"></a>ir_dbg_switch</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[88c]"></a>ir_recv_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ir
</UL>

<P><STRONG><a name="[88d]"></a>ir_trig_send</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ir_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ir_trig_send &rArr; ir_pwm_disable &rArr; TIM_SelectOCxM
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_pwm_disable
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_pwm_enable
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_timer_by_counter
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_timer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_start_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_timer_callback
</UL>

<P><STRONG><a name="[88e]"></a>init_ir</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_recv_enable
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_pwm_disable
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_timer
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>

<P><STRONG><a name="[893]"></a>ir_fill_seq</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hard_timer_clk
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_delay
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_data1
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_data0
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_tail
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_preamble
</UL>

<P><STRONG><a name="[895]"></a>rst_seq_pos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_preamble
</UL>

<P><STRONG><a name="[894]"></a>ir_fill_nec_preamble</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_seq_pos
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_kelon_cmd
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_nec_data
</UL>

<P><STRONG><a name="[896]"></a>ir_fill_nec_tail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_kelon_cmd
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_nec_data
</UL>

<P><STRONG><a name="[897]"></a>ir_fill_nec_data0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_byte
</UL>

<P><STRONG><a name="[898]"></a>ir_fill_nec_data1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_byte
</UL>

<P><STRONG><a name="[899]"></a>ir_fill_nec_delay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_kelon_cmd
</UL>

<P><STRONG><a name="[89a]"></a>ir_fill_nec_byte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_data1
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_data0
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_kelon_cmd
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_nec_data
</UL>

<P><STRONG><a name="[89b]"></a>ir_start_send</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_kelon_cmd
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_send_nec_data
</UL>

<P><STRONG><a name="[89c]"></a>ir_send_nec_data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_start_send
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_byte
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_tail
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_preamble
</UL>

<P><STRONG><a name="[89d]"></a>ir_send_kelon_cmd</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, ir_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_start_send
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_byte
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_delay
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_tail
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_nec_preamble
</UL>

<P><STRONG><a name="[d70]"></a>ir_recv_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ir_control.o(.text), UNUSED)

<P><STRONG><a name="[89e]"></a>handle_ir_recv</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, ir_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handle_ir_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EXTI14_IRQHandler
</UL>

<P><STRONG><a name="[89f]"></a>__EXTI14_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ir_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __EXTI14_IRQHandler &rArr; handle_ir_recv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ir_recv
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_count
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[8a0]"></a>ETH_Mem_Free</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ETH_Mem_Free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Mem_Malloc
</UL>

<P><STRONG><a name="[8a1]"></a>ETH_Mem_Malloc</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ETH_Mem_Malloc &rArr; ETH_Mem_Free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Mem_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
</UL>

<P><STRONG><a name="[8a2]"></a>LAN8720_Init</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = LAN8720_Init &rArr; ETH_Mem_Malloc &rArr; ETH_Mem_Free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Mem_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[8a4]"></a>LAN8720_Get_Speed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lan8720.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[3c6]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 146 bytes, Stack size 200 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
</UL>

<P><STRONG><a name="[4d]"></a>ETH_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lan8720.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ETH_IRQHandler &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d71]"></a>ETH_Rx_Packet</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, lan8720.o(.text), UNUSED)

<P><STRONG><a name="[d72]"></a>ETH_Tx_Packet</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lan8720.o(.text), UNUSED)

<P><STRONG><a name="[d73]"></a>ETH_GetCurrentTxBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lan8720.o(.text), UNUSED)

<P><STRONG><a name="[8a9]"></a>wrOV2640Reg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wrOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSCCB
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSCCB
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
</UL>

<P><STRONG><a name="[8ad]"></a>rdOV2640Reg</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rdOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSCCB
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSCCB
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noAck
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBreadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Read
</UL>

<P><STRONG><a name="[8b0]"></a>CAMERA_IO_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAMERA_IO_Write &rArr; wrOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV2640Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Config
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_ReadID
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
</UL>

<P><STRONG><a name="[8b1]"></a>CAMERA_IO_Read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CAMERA_IO_Read &rArr; rdOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV2640Reg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_ReadID
</UL>

<P><STRONG><a name="[8b2]"></a>CAMERA_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = CAMERA_Delay &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
</UL>

<P><STRONG><a name="[8b3]"></a>OV2640_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OV2640_Reset &rArr; CAMERA_IO_Write &rArr; wrOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
</UL>

<P><STRONG><a name="[864]"></a>OV2640_JPEGConfig</STRONG> (Thumb, 808 bytes, Stack size 24 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OV2640_JPEGConfig &rArr; OV2640_Reset &rArr; CAMERA_IO_Write &rArr; wrOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_Reset
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_jpeg_size
</UL>

<P><STRONG><a name="[8b4]"></a>ov2640_ReadID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ov2640_ReadID &rArr; CAMERA_IO_Read &rArr; rdOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Read
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
</UL>

<P><STRONG><a name="[857]"></a>ov2640_Init</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, ov2640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = ov2640_Init &rArr; OV2640_JPEGConfig &rArr; OV2640_Reset &rArr; CAMERA_IO_Write &rArr; wrOV2640Reg &rArr; SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_INIT
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_ReadID
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_Delay
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
</UL>

<P><STRONG><a name="[8b6]"></a>ov2640_Config</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, ov2640.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Write
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_ConvertValue
</UL>

<P><STRONG><a name="[8b8]"></a>RTC_AlarmShow</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_AlarmShow &rArr; RTC_GetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[8b9]"></a>RTC_TimeShow</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_TimeShow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[8ba]"></a>RTC_TimeRegulate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeShow
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[8bc]"></a>RTC_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Config &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
</UL>

<P><STRONG><a name="[8c1]"></a>init_rtc</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_rtc &rArr; RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeShow
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmShow
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[8c4]"></a>RTC_Time_Set</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8b5]"></a>SCCB_INIT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SCCB_INIT &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
</UL>

<P><STRONG><a name="[8aa]"></a>startSCCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = startSCCB &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV2640Reg
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV2640Reg
</UL>

<P><STRONG><a name="[8ac]"></a>stopSCCB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stopSCCB &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV2640Reg
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV2640Reg
</UL>

<P><STRONG><a name="[8af]"></a>noAck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = noAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV2640Reg
</UL>

<P><STRONG><a name="[8ab]"></a>SCCBwriteByte</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SCCBwriteByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV2640Reg
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV2640Reg
</UL>

<P><STRONG><a name="[8ae]"></a>SCCBreadByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SCCBreadByte &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV2640Reg
</UL>

<P><STRONG><a name="[497]"></a>enable_sdio_int</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_sdio_int
</UL>
<BR>[Calls]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
</UL>

<P><STRONG><a name="[8ca]"></a>mmc_io_rw_direct_host</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>

<P><STRONG><a name="[48d]"></a>mmc_io_rw_direct</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_release_irq
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_writeb
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb_readb
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_reset
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[8cd]"></a>mmc_sdio_switch_hs</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = mmc_sdio_switch_hs &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8cf]"></a>sdio_read_common_cis</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = sdio_read_common_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8d0]"></a>sdio_read_cccr</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = sdio_read_cccr &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8d2]"></a>SD_SelectDeselect</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8d4]"></a>mmc_send_relative_addr</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_send_relative_addr &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8d6]"></a>mmc_send_io_op_cond</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = mmc_send_io_op_cond &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp4Error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8d8]"></a>mmc_go_idle</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mmc_go_idle &rArr; CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8da]"></a>SD_Init</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = SD_Init &rArr; sdio_read_common_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOOperation
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOReadWaitMode
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_reset
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_common_cis
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>

<P><STRONG><a name="[8e4]"></a>dma_start_send_data</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[41]"></a>SDIO_IRQHandler</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SDIO_IRQHandler &rArr; woal_sdio_interrupt &rArr; schedule_work &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_interrupt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48b]"></a>mmc_io_rw_extended</STRONG> (Thumb, 824 bytes, Stack size 112 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>

<P><STRONG><a name="[8e8]"></a>sdio_enable_wide</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15a]"></a>hard_fault_handler_c</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; __EXTI11_IRQHandler &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EXTI14_IRQHandler
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EXTI11_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI2_IRQHandler &rArr; __DHT11_IRQHandler &rArr; handle_dht11_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DHT11_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8eb]"></a>uart1_init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uart1_init &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[8f0]"></a>uart3_init</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = uart3_init &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[d74]"></a>select_debug_uart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>fputc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_std_char_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[8f1]"></a>uart3_send_next</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uart3_send_next &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
</UL>

<P><STRONG><a name="[8f2]"></a>uart3_send</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_next
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8f3]"></a>uart1_send_next</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = uart1_send_next &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
</UL>

<P><STRONG><a name="[8f4]"></a>uart1_send</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8f6]"></a>uart1_read_data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = uart1_read_data &rArr; send_work_event &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_work_event
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8f7]"></a>send_cmd_to_self</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_work_event
</UL>

<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; uart1_read_data &rArr; send_work_event &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_read_data
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; uart1_read_data &rArr; send_work_event &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_interrupt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_interrupt
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_read_data
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[8f8]"></a>spi_r</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>

<P><STRONG><a name="[8fd]"></a>spi_w</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_w
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_write
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[8fc]"></a>spi_write</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi_write &rArr; spi_w
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
</UL>
<BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip
</UL>

<P><STRONG><a name="[8fe]"></a>spi_write_then_write</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_write_then_write &rArr; spi_w
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
</UL>

<P><STRONG><a name="[8ff]"></a>spi_write_then_read</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read_id
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
</UL>

<P><STRONG><a name="[907]"></a>m25p80_erase</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = m25p80_erase &rArr; erase_sector &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_record_to_flash
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_web_cfg
</UL>

<P><STRONG><a name="[822]"></a>m25p80_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = m25p80_read &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_cmdsz
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ai_audio_pcm_data
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_web_cfg
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_record_audio
</UL>

<P><STRONG><a name="[908]"></a>cmp_flash_data</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, w25p80.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_cmdsz
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[842]"></a>m25p80_write</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = m25p80_write &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_write
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_cmdsz
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_recv_thread
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_web_cfg
</UL>

<P><STRONG><a name="[909]"></a>m25p80_read_id</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = m25p80_read_id &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
</UL>

<P><STRONG><a name="[4a6]"></a>read_firmware</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = read_firmware &rArr; m25p80_read &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_get_fw_data
</UL>

<P><STRONG><a name="[90a]"></a>test_write_firmware_to_spi_flash</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, w25p80.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[90b]"></a>m25p80_init</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = m25p80_init &rArr; mutex_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read_id
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_I2S_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[90f]"></a>handle_key</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = handle_key &rArr; audio_record_to_flash &rArr; timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_work_event
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_voice_recording_event
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mode
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_record_to_flash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_detect_timer_callback
</UL>

<P><STRONG><a name="[912]"></a>key_detect_timer_callback</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = key_detect_timer_callback &rArr; handle_key &rArr; audio_record_to_flash &rArr; timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text)
</UL>
<P><STRONG><a name="[913]"></a>init_key_dev</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_key_dev &rArr; timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[919]"></a>WriteRawRC</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WriteRawRC &rArr; spi_write_then_write &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_write
</UL>
<BR>[Called By]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
</UL>

<P><STRONG><a name="[91a]"></a>ReadRawRC</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>
<BR>[Called By]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
</UL>

<P><STRONG><a name="[91b]"></a>SetBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SetBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[91c]"></a>ClearBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ClearBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[91d]"></a>PcdComMF522</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = PcdComMF522 &rArr; ClearBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdBakValue
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>

<P><STRONG><a name="[91e]"></a>PcdRequest</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PcdRequest &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_poll_callback
</UL>

<P><STRONG><a name="[91f]"></a>PcdAnticoll</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_poll_callback
</UL>

<P><STRONG><a name="[920]"></a>CalulateCRC</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdBakValue
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
</UL>

<P><STRONG><a name="[921]"></a>PcdSelect</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>

<P><STRONG><a name="[922]"></a>PcdAuthState</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[923]"></a>PcdRead</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[924]"></a>PcdWrite</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[925]"></a>PcdHalt</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[926]"></a>PcdReset</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = PcdReset &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
</UL>

<P><STRONG><a name="[927]"></a>PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PcdAntennaOn &rArr; SetBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[928]"></a>M500PcdConfigISOType</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
</UL>

<P><STRONG><a name="[929]"></a>PcdAntennaOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PcdAntennaOff &rArr; ClearBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
</UL>

<P><STRONG><a name="[92a]"></a>PcdValue</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[92b]"></a>PcdBakValue</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[92c]"></a>rfid_poll_callback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mfrc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[92d]"></a>init_rc522</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = init_rc522 &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; ReadRawRC &rArr; spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensers
</UL>

<P><STRONG><a name="[d75]"></a>read_card_id</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mfrc522.o(.text), UNUSED)

<P><STRONG><a name="[92e]"></a>NRF24L01_Write_Reg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NRF24L01_Write_Reg &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Mode
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Mode
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_recv_thread
</UL>

<P><STRONG><a name="[930]"></a>NRF24L01_Read_Buf</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NRF24L01_Read_Buf &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_recv_thread
</UL>

<P><STRONG><a name="[931]"></a>NRF24L01_Read_Reg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NRF24L01_Read_Reg &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RxPacket
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_recv_thread
</UL>

<P><STRONG><a name="[932]"></a>nrf2401_recv_thread</STRONG> (Thumb, 396 bytes, Stack size 0 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = nrf2401_recv_thread &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 24l01.o(.text)
</UL>
<P><STRONG><a name="[933]"></a>NRF24L01_Write_Buf</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_tx
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Mode
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Mode
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_TxPacket
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
</UL>

<P><STRONG><a name="[934]"></a>NRF24L01_Check</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[935]"></a>NRF24L01_Init</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Check
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[936]"></a>NRF24L01_TxPacket</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
</UL>

<P><STRONG><a name="[937]"></a>NRF24L01_RxPacket</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
</UL>

<P><STRONG><a name="[938]"></a>RX_Mode</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[939]"></a>TX_Mode</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[93a]"></a>nrf2401_tx</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8ea]"></a>__EXTI11_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __EXTI11_IRQHandler &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[93b]"></a>IIC_OutputConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC_OutputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Start
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendByte
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadByte
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendACK
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Stop
</UL>

<P><STRONG><a name="[93c]"></a>BH1750_Stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BH1750_Stop &rArr; IIC_OutputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCommand
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>

<P><STRONG><a name="[93f]"></a>BH1750_SendACK</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BH1750_SendACK &rArr; IIC_OutputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>

<P><STRONG><a name="[940]"></a>IIC_InputConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadSlaveAck
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadByte
</UL>

<P><STRONG><a name="[941]"></a>BH1750_ReadByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BH1750_ReadByte &rArr; IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_InputConfig
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>

<P><STRONG><a name="[943]"></a>BH1750_ReadSlaveAck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BH1750_ReadSlaveAck &rArr; IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_InputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendByte
</UL>

<P><STRONG><a name="[944]"></a>BH1750_SendByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BH1750_SendByte &rArr; BH1750_ReadSlaveAck &rArr; IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadSlaveAck
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCommand
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>

<P><STRONG><a name="[945]"></a>BH1750_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BH1750_Start &rArr; IIC_OutputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_OutputConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCommand
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>

<P><STRONG><a name="[946]"></a>BH1750_ReadResult</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BH1750_ReadResult &rArr; BH1750_SendByte &rArr; BH1750_ReadSlaveAck &rArr; IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Start
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendByte
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadByte
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendACK
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750FVI
</UL>

<P><STRONG><a name="[947]"></a>BH1750_WriteCommand</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BH1750_WriteCommand &rArr; BH1750_SendByte &rArr; BH1750_ReadSlaveAck &rArr; IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Start
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendByte
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750FVI
</UL>

<P><STRONG><a name="[948]"></a>BH1750FVI</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BH1750FVI &rArr; BH1750_ReadResult &rArr; BH1750_SendByte &rArr; BH1750_ReadSlaveAck &rArr; IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_WriteCommand
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>
<BR>[Called By]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_BH1750_value
</UL>

<P><STRONG><a name="[94a]"></a>BH1750_I2C_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BH1750_I2C_Init &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensers
</UL>

<P><STRONG><a name="[94b]"></a>get_BH1750_value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bh1750fvi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_BH1750_value &rArr; BH1750FVI &rArr; BH1750_ReadResult &rArr; BH1750_SendByte &rArr; BH1750_ReadSlaveAck &rArr; IIC_InputConfig &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750FVI
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
</UL>

<P><STRONG><a name="[94c]"></a>MQ2_InitAdc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, mq2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MQ2_InitAdc &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensers
</UL>

<P><STRONG><a name="[94d]"></a>MQ2_GetAdc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mq2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = MQ2_GetAdc &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetValue
</UL>

<P><STRONG><a name="[951]"></a>MQ2_GetValue</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mq2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = MQ2_GetValue &rArr; MQ2_GetAdc &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetAdc
</UL>
<BR>[Called By]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
</UL>

<P><STRONG><a name="[952]"></a>delay_1us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[275]"></a>delay_us</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1us
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_udelay
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Start
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendByte
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadSlaveAck
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadByte
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_SendACK
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_Stop
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_write
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSCCB
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSCCB
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noAck
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBwriteByte
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBreadByte
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdOV2640Reg
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrOV2640Reg
</UL>

<P><STRONG><a name="[949]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750FVI
</UL>

<P><STRONG><a name="[954]"></a>led_scan</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_switch
</UL>

<P><STRONG><a name="[953]"></a>led_switch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_scan
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[955]"></a>led_bright</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[956]"></a>button_stat_callback</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_button_event
</UL>

<P><STRONG><a name="[958]"></a>assert_failed</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[d76]"></a>ind2_status_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)

<P><STRONG><a name="[d77]"></a>ind4_status_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)

<P><STRONG><a name="[d78]"></a>relay_status_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)

<P><STRONG><a name="[d79]"></a>ind2_timer_callback</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)

<P><STRONG><a name="[95b]"></a>ind4_timer_callback</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sys_misc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_misc.o(.text)
</UL>
<P><STRONG><a name="[959]"></a>indicate_led_twink_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = indicate_led_twink_start &rArr; del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
</UL>

<P><STRONG><a name="[95a]"></a>indicate_led_twink_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
</UL>

<P><STRONG><a name="[95c]"></a>misc_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = misc_init &rArr; timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[95d]"></a>show_sys_info</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[95f]"></a>soft_reset</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[960]"></a>switch_dbg</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, sys_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[961]"></a>usr_gpio_init</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usr_gpio_init &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[962]"></a>update_relay_status</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, sys_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_relay_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_status
</UL>

<P><STRONG><a name="[d7a]"></a>get_alarm_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_misc.o(.text), UNUSED)

<P><STRONG><a name="[963]"></a>main_thread</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380 + Unknown Stack Size
<LI>Call Chain = main_thread &rArr; init_wifi &rArr; woal_init_module &rArr; woal_sdio_probe &rArr; woal_add_card &rArr; woal_init_fw &rArr; woal_request_fw &rArr; woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_free
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_size
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_free2
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_size2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_work_thread
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_misc_init
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_web_cfg
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensers
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lwip
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice_client
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_client
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_init
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_gpio_init
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;misc_init
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key_dev
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8720_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main &rArr; thread_create &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_init
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[970]"></a>wifi_init_priv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = wifi_init_priv &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wifi
</UL>

<P><STRONG><a name="[3ae]"></a>get_wifi_dev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[3b0]"></a>is_hw_ok</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
</UL>

<P><STRONG><a name="[911]"></a>wifi_get_mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
</UL>

<P><STRONG><a name="[971]"></a>wifi_disconnect</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_disconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_disconnect
</UL>

<P><STRONG><a name="[972]"></a>wifi_stop_ap</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_stop_ap &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stop_ap
</UL>

<P><STRONG><a name="[973]"></a>wifi_set_mode</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wifi_set_mode &rArr; wifi_disconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop_ap
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[975]"></a>wifi_set_multicast</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_promisc
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_join
</UL>

<P><STRONG><a name="[974]"></a>wifi_set_promisc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_multicast
</UL>

<P><STRONG><a name="[976]"></a>wifi_set_channel</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[978]"></a>wifi_ap_cfg</STRONG> (Thumb, 374 bytes, Stack size 104 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = wifi_ap_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
</UL>

<P><STRONG><a name="[97b]"></a>wifi_join_adhoc</STRONG> (Thumb, 238 bytes, Stack size 120 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
</UL>

<P><STRONG><a name="[97c]"></a>wifi_leave_adhoc</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_leave_adhoc
</UL>

<P><STRONG><a name="[97d]"></a>wifi_get_sta_list</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
</UL>

<P><STRONG><a name="[97e]"></a>new_scan_req</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
</UL>

<P><STRONG><a name="[97f]"></a>wifi_scan</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
</UL>

<P><STRONG><a name="[986]"></a>is_wifi_connected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[42d]"></a>wifi_connect</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wifi_connect &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
</UL>

<P><STRONG><a name="[d7b]"></a>wifi_get_mac</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wifi.o(.text), UNUSED)

<P><STRONG><a name="[980]"></a>wifi_get_stats</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_get_stats
</UL>

<P><STRONG><a name="[981]"></a>wifi_power_cfg</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = wifi_power_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_disable
</UL>

<P><STRONG><a name="[d7c]"></a>event_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>register_netdev</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = register_netdev &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[967]"></a>init_wifi</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332 + Unknown Stack Size
<LI>Call Chain = init_wifi &rArr; woal_init_module &rArr; woal_sdio_probe &rArr; woal_add_card &rArr; woal_init_fw &rArr; woal_request_fw &rArr; woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_module
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_priv
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[982]"></a>print_scan_result</STRONG> (Thumb, 728 bytes, Stack size 64 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = print_scan_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_result_fun
</UL>

<P><STRONG><a name="[983]"></a>scan_result_fun</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = scan_result_fun &rArr; print_scan_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_wifi.o(.text)
</UL>
<P><STRONG><a name="[984]"></a>test_scan</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[985]"></a>test_wifi_connect</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wifi_connected
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[987]"></a>test_create_ap</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[988]"></a>test_wifi_disconnect</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[989]"></a>test_wifi_join_adhoc</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[98a]"></a>test_wifi_leave_adhoc</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_leave_adhoc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[98b]"></a>test_wifi_get_stats</STRONG> (Thumb, 302 bytes, Stack size 88 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_stats
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[98c]"></a>test_stop_ap</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop_ap
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[98d]"></a>test_get_station_list</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[96a]"></a>test_power_save_enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, test_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = test_power_save_enable &rArr; wifi_power_cfg &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[98e]"></a>test_power_save_disable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, test_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[98f]"></a>test_tcp_client</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[991]"></a>test_udp_client</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[993]"></a>test_udp_client2</STRONG> (Thumb, 692 bytes, Stack size 48 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[994]"></a>test_multicast_send_data</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_join
</UL>

<P><STRONG><a name="[995]"></a>test_multicast_join</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_multicast
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_send_data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[997]"></a>tcp_send_thread</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = tcp_send_thread &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_myself
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_tcpip.o(.text)
</UL>
<P><STRONG><a name="[998]"></a>test_full_speed_send</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[999]"></a>test_full_speed_send_stop</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[99a]"></a>test_close_camera_server</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
</UL>

<P><STRONG><a name="[99b]"></a>tcp_camera_task</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, test_tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tcp_camera_task &rArr; lwip_accept &rArr; netconn_getaddr &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_exit
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture_img
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test_tcpip.o(.text)
</UL>
<P><STRONG><a name="[99c]"></a>camera_tcp_server</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_camera_server
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[95e]"></a>show_tcpip_info</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sys_info
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
</UL>

<P><STRONG><a name="[99e]"></a>test_auto_get_ip</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[99f]"></a>switch_loopback_test</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9a0]"></a>handle_test_recv</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, test_tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[964]"></a>audio_dev_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = audio_dev_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[9a1]"></a>speex_init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_ctl
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_init
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_reset
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_init
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decoder_init
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decoder_ctl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9a4]"></a>speex_deinit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_destroy
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encoder_destroy
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decoder_destroy
</UL>

<P><STRONG><a name="[9a7]"></a>iot_speex_encode</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_write
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_reset
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encode_int
</UL>

<P><STRONG><a name="[9a9]"></a>iot_speex_decode</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_from
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decode_int
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9ab]"></a>audio_dev_open</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = audio_dev_open &rArr; adc_low_level_open &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
</UL>

<P><STRONG><a name="[9ac]"></a>audio_dev_close</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = audio_dev_close &rArr; msgfree &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfree
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
</UL>

<P><STRONG><a name="[9ad]"></a>push_to_play_buff</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = push_to_play_buff &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_speex_stream
</UL>

<P><STRONG><a name="[9ae]"></a>pause_mp3</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
</UL>
<BR>[Called By]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_speex_stream
</UL>

<P><STRONG><a name="[9af]"></a>play_speex_stream</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_from
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_decode_int
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_mp3
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_record_audio
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_audio_stream
</UL>

<P><STRONG><a name="[9b0]"></a>handle_audio_stream</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_speex_stream
</UL>

<P><STRONG><a name="[9b1]"></a>play_mp3_stream</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = play_mp3_stream &rArr; MpegAudioDecoder &rArr; mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_recv_response
</UL>

<P><STRONG><a name="[d7d]"></a>is_data_equ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, audio.o(.text), UNUSED)

<P><STRONG><a name="[9b3]"></a>playback_record_audio</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, audio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_speex_stream
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9b4]"></a>record_to_flash_timeout_cb</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = record_to_flash_timeout_cb &rArr; timer_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ai_event
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio.o(.text)
</UL>
<P><STRONG><a name="[910]"></a>audio_record_to_flash</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = audio_record_to_flash &rArr; timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
</UL>

<P><STRONG><a name="[9b5]"></a>continue_mp3</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = continue_mp3 &rArr; dac_switch_samplerate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
</UL>
<BR>[Called By]<UL><LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_delay_timer_cb
</UL>

<P><STRONG><a name="[9b6]"></a>mp3_delay_timer_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mp3_delay_timer_cb &rArr; continue_mp3 &rArr; dac_switch_samplerate &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_mp3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio.o(.text)
</UL>
<P><STRONG><a name="[969]"></a>open_audio</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = open_audio &rArr; audio_dev_open &rArr; adc_low_level_open &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_switch_samplerate
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_close
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_open
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[a9]"></a>tcpip_init_end</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcpip_init_end &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpapp.o(.text)
</UL>
<P><STRONG><a name="[968]"></a>lwip_netif_init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = lwip_netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_stop
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_start
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[9b7]"></a>create_mac</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_mac &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_netif_init
</UL>

<P><STRONG><a name="[3c7]"></a>lwip_eth_netif_init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = lwip_eth_netif_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mac
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
</UL>

<P><STRONG><a name="[3c8]"></a>auto_get_ip</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
</UL>

<P><STRONG><a name="[d7e]"></a>get_gw_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpapp.o(.text), UNUSED)

<P><STRONG><a name="[867]"></a>close_socket</STRONG> (Thumb, 626 bytes, Stack size 24 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = close_socket &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img_local
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_camera_task
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_camera_server
</UL>

<P><STRONG><a name="[9b8]"></a>set_ipaddr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = set_ipaddr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_ip
</UL>

<P><STRONG><a name="[9b9]"></a>get_host_by_name</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>

<P><STRONG><a name="[9ba]"></a>get_connect_stat</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>

<P><STRONG><a name="[990]"></a>tcp_client_create</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = tcp_client_create &rArr; close_socket &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_client
</UL>

<P><STRONG><a name="[866]"></a>send_data</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img_local
</UL>

<P><STRONG><a name="[992]"></a>udp_client_create</STRONG> (Thumb, 596 bytes, Stack size 48 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client
</UL>

<P><STRONG><a name="[996]"></a>udp_add_membership</STRONG> (Thumb, 520 bytes, Stack size 56 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_join
</UL>

<P><STRONG><a name="[9bb]"></a>udp_create_server</STRONG> (Thumb, 594 bytes, Stack size 48 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9bc]"></a>udp_data_send</STRONG> (Thumb, 554 bytes, Stack size 80 bytes, tcpapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[966]"></a>init_lwip</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = init_lwip &rArr; tcpip_init &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[9bd]"></a>senser_poll_callback</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, sensers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = senser_poll_callback &rArr; send_work_event &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_work_event
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_start_read
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetValue
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_BH1750_value
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensers.o(.text)
</UL>
<P><STRONG><a name="[96b]"></a>init_sensers</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sensers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = init_sensers &rArr; mutex_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dht11
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_InitAdc
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_I2C_Init
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[9bf]"></a>start_senser_poll</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sensers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
</UL>

<P><STRONG><a name="[3c9]"></a>send_work_event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, work.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = send_work_event &rArr; wake_up &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd_to_self
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_read_data
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
</UL>

<P><STRONG><a name="[9c0]"></a>set_default_ip</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, work.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
</UL>

<P><STRONG><a name="[96e]"></a>main_process</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, work.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = main_process &rArr; auto_get_ip &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_work_event
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wifi_connected
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_led_twink_start
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ipaddr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[9c1]"></a>handle_cmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = handle_cmd &rArr; send_and_encode_text_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_and_encode_text_event
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
</UL>

<P><STRONG><a name="[9c3]"></a>cal_buff_check_sum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, web_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_buff_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_web_cfg
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_web_cfg
</UL>

<P><STRONG><a name="[d7f]"></a>get_web_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, web_cfg.o(.text), UNUSED)

<P><STRONG><a name="[9c2]"></a>verify_web_cfg</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, web_cfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_buff_check_sum
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9c4]"></a>reset_ctl_cfg</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, web_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_ctl_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_web_cfg
</UL>

<P><STRONG><a name="[9c5]"></a>default_web_cfg</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, web_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = default_web_cfg &rArr; ipaddr_addr &rArr; ipaddr_aton &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ctl_cfg
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_web_cfg
</UL>

<P><STRONG><a name="[9c6]"></a>save_web_cfg</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, web_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = save_web_cfg &rArr; m25p80_write &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_buff_check_sum
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_web_cfg
</UL>

<P><STRONG><a name="[965]"></a>load_web_cfg</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, web_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = load_web_cfg &rArr; save_web_cfg &rArr; m25p80_write &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_web_cfg
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_web_cfg
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[9d3]"></a>mad_bit_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
</UL>

<P><STRONG><a name="[9d6]"></a>mad_bit_length</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
</UL>

<P><STRONG><a name="[9d0]"></a>mad_bit_nextbyte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[9ce]"></a>mad_bit_skip</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[9c8]"></a>mad_bit_read</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>

<P><STRONG><a name="[9c7]"></a>mad_bit_crc</STRONG> (Thumb, 236 bytes, Stack size 36 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[9ca]"></a>mad_header_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, frame.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
</UL>

<P><STRONG><a name="[9cb]"></a>mad_frame_mute</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mad_frame_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
</UL>

<P><STRONG><a name="[9c9]"></a>mad_frame_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mad_frame_init &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_init
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
</UL>

<P><STRONG><a name="[9cc]"></a>mad_frame_finish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mad_frame_finish &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
</UL>

<P><STRONG><a name="[9d2]"></a>mad_header_decode</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
</UL>

<P><STRONG><a name="[9d5]"></a>mad_frame_decode</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
</UL>

<P><STRONG><a name="[12d]"></a>mad_layer_III</STRONG> (Thumb, 838 bytes, Stack size 88 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5332 + Unknown Stack Size
<LI>Call Chain = mad_layer_III &rArr; III_decode &rArr; III_imdct_l &rArr; imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>mad_layer_I</STRONG> (Thumb, 610 bytes, Stack size 64 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = mad_layer_I &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>mad_layer_II</STRONG> (Thumb, 1332 bytes, Stack size 104 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = mad_layer_II &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.constdata)
</UL>
<P><STRONG><a name="[d80]"></a>mad_timer_compare</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, mad_timer.o(.text), UNUSED)

<P><STRONG><a name="[9ec]"></a>mad_timer_negate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mad_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_multiply
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_abs
</UL>

<P><STRONG><a name="[9eb]"></a>mad_timer_abs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mad_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_negate
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_fraction
</UL>

<P><STRONG><a name="[9d4]"></a>mad_timer_set</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, mad_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mad_timer_set &rArr; scale_rational &rArr; reduce_rational &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[9f1]"></a>mad_timer_add</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mad_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_timer_add
</UL>
<BR>[Calls]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_multiply
</UL>

<P><STRONG><a name="[9f2]"></a>mad_timer_multiply</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mad_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_add
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_negate
</UL>

<P><STRONG><a name="[9f3]"></a>mad_timer_count</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, mad_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
</UL>

<P><STRONG><a name="[9f4]"></a>mad_timer_fraction</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mad_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_abs
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>

<P><STRONG><a name="[9f5]"></a>mad_timer_string</STRONG> (Thumb, 842 bytes, Stack size 72 bytes, mad_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_abs
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[9f6]"></a>reset_mp3_stat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, madlld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = reset_mp3_stat &rArr; mad_stream_init &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_finish
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_finish
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_mp3_format
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
</UL>

<P><STRONG><a name="[9fa]"></a>init_mp3_format</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, madlld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = init_mp3_format &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
</UL>

<P><STRONG><a name="[9fb]"></a>deinit_mp3_format</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, madlld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = deinit_mp3_format &rArr; reset_mp3_stat &rArr; mad_stream_init &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
</UL>

<P><STRONG><a name="[9b2]"></a>MpegAudioDecoder</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, madlld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = MpegAudioDecoder &rArr; mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_frame
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyFilter
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFrameInfo
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadFixedToSshort
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_mp3_stream
</UL>

<P><STRONG><a name="[9f8]"></a>mad_stream_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mad_stream_init &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
</UL>

<P><STRONG><a name="[9f7]"></a>mad_stream_finish</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mad_stream_finish &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
</UL>

<P><STRONG><a name="[9fd]"></a>mad_stream_buffer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_stream_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
</UL>

<P><STRONG><a name="[d81]"></a>mad_stream_skip</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stream.o(.text), UNUSED)

<P><STRONG><a name="[9d1]"></a>mad_stream_sync</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_stream_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[d82]"></a>mad_stream_errorstr</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stream.o(.text), UNUSED)

<P><STRONG><a name="[a01]"></a>mad_synth_mute</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
</UL>

<P><STRONG><a name="[9f9]"></a>mad_synth_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mad_synth_init &rArr; mad_synth_mute
</UL>
<BR>[Calls]<UL><LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
</UL>

<P><STRONG><a name="[9ff]"></a>mad_synth_frame</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_synth_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
</UL>

<P><STRONG><a name="[a03]"></a>mbedtls_aes_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_aes_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_alloc
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a04]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_aes_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ctx_free
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a07]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 496 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_enc_wrap
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>

<P><STRONG><a name="[a06]"></a>mbedtls_aes_setkey_dec</STRONG> (Thumb, 204 bytes, Stack size 320 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_setkey_dec_wrap
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a09]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 1424 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[a0a]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 1380 bytes, Stack size 52 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[a08]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_ecb_wrap
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>

<P><STRONG><a name="[a0b]"></a>mbedtls_aes_crypt_cbc</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_crypt_cbc_wrap
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[a0d]"></a>mbedtls_asn1_get_len</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>

<P><STRONG><a name="[a0c]"></a>mbedtls_asn1_get_tag</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[a0e]"></a>mbedtls_asn1_get_bool</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_bool &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
</UL>

<P><STRONG><a name="[a0f]"></a>mbedtls_asn1_get_int</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
</UL>

<P><STRONG><a name="[a10]"></a>mbedtls_asn1_get_mpi</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[a12]"></a>mbedtls_asn1_get_bitstring</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
</UL>

<P><STRONG><a name="[a13]"></a>mbedtls_asn1_get_bitstring_null</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[a14]"></a>mbedtls_asn1_get_sequence_of</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_asn1_get_sequence_of &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
</UL>

<P><STRONG><a name="[a15]"></a>mbedtls_asn1_get_alg</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[a17]"></a>mbedtls_asn1_get_alg_null</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[b36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg_null
</UL>

<P><STRONG><a name="[a18]"></a>mbedtls_asn1_free_named_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data_list
</UL>

<P><STRONG><a name="[a19]"></a>mbedtls_asn1_free_named_data_list</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
</UL>

<P><STRONG><a name="[a1a]"></a>mbedtls_asn1_find_named_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, asn1parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[d83]"></a>mbedtls_base64_encode</STRONG> (Thumb, 304 bytes, Stack size 36 bytes, base64.o(.text), UNUSED)

<P><STRONG><a name="[aa5]"></a>mbedtls_base64_decode</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[a2a]"></a>mbedtls_mpi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a1b]"></a>mbedtls_mpi_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[a1d]"></a>mbedtls_mpi_grow</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_set_bit
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_swap
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_safe_cond_assign
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[a1e]"></a>mbedtls_mpi_shrink</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[a1f]"></a>mbedtls_mpi_copy</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
</UL>

<P><STRONG><a name="[d84]"></a>mbedtls_mpi_swap</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)

<P><STRONG><a name="[a20]"></a>mbedtls_mpi_safe_cond_assign</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>

<P><STRONG><a name="[a21]"></a>mbedtls_mpi_safe_cond_swap</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>

<P><STRONG><a name="[a22]"></a>mbedtls_mpi_lset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>

<P><STRONG><a name="[d85]"></a>mbedtls_mpi_get_bit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bignum.o(.text), UNUSED)

<P><STRONG><a name="[a23]"></a>mbedtls_mpi_set_bit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>

<P><STRONG><a name="[a47]"></a>mbedtls_mpi_lsb</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_mpi_lsb
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
</UL>

<P><STRONG><a name="[a24]"></a>mbedtls_mpi_bitlen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>

<P><STRONG><a name="[a26]"></a>mbedtls_mpi_size</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
</UL>

<P><STRONG><a name="[a27]"></a>mbedtls_mpi_add_abs</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_add_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>

<P><STRONG><a name="[a29]"></a>mbedtls_mpi_cmp_abs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[a28]"></a>mbedtls_mpi_sub_abs</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>

<P><STRONG><a name="[a2c]"></a>mbedtls_mpi_sub_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[a2d]"></a>mbedtls_mpi_sub_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_sub_int &rArr; mbedtls_mpi_sub_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a2e]"></a>mbedtls_mpi_add_mpi</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_add_mpi &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[a2f]"></a>mbedtls_mpi_add_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[a30]"></a>mbedtls_mpi_mul_mpi</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a32]"></a>mbedtls_mpi_mul_int</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[a33]"></a>mbedtls_mpi_read_string</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_int
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_get_digit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[a36]"></a>mbedtls_mpi_cmp_mpi</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[a35]"></a>mbedtls_mpi_cmp_int</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_mpi_cmp_int &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a37]"></a>mbedtls_mpi_shift_r</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_shift_r &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[a38]"></a>mbedtls_mpi_shift_l</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_shift_l &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[a3b]"></a>mbedtls_mpi_div_mpi</STRONG> (Thumb, 980 bytes, Stack size 104 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_int
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a3c]"></a>mbedtls_mpi_div_int</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[a3e]"></a>mbedtls_mpi_mod_int</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[a3f]"></a>mbedtls_mpi_write_string</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[a11]"></a>mbedtls_mpi_read_binary</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</UL>

<P><STRONG><a name="[a40]"></a>mbedtls_mpi_write_binary</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_mpi_write_binary &rArr; mbedtls_mpi_size &rArr; mbedtls_mpi_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
</UL>

<P><STRONG><a name="[a41]"></a>mbedtls_mpi_mod_mpi</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a44]"></a>mbedtls_mpi_exp_mod</STRONG> (Thumb, 1022 bytes, Stack size 504 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[a46]"></a>mbedtls_mpi_gcd</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_gcd &rArr; mbedtls_mpi_sub_abs &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_l
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lsb
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[a48]"></a>mbedtls_mpi_fill_random</STRONG> (Thumb, 82 bytes, Stack size 536 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_fill_random &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>

<P><STRONG><a name="[a49]"></a>mbedtls_mpi_inv_mod</STRONG> (Thumb, 816 bytes, Stack size 128 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shift_r
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>

<P><STRONG><a name="[d86]"></a>mbedtls_cipher_list</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cipher.o(.text), UNUSED)

<P><STRONG><a name="[afb]"></a>mbedtls_cipher_info_from_type</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[a4a]"></a>mbedtls_cipher_info_from_string</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cipher.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[d87]"></a>mbedtls_cipher_info_from_values</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cipher.o(.text), UNUSED)

<P><STRONG><a name="[a4b]"></a>mbedtls_cipher_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
</UL>

<P><STRONG><a name="[a4c]"></a>mbedtls_cipher_free</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>

<P><STRONG><a name="[a4f]"></a>mbedtls_cipher_set_padding_mode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[a4e]"></a>mbedtls_cipher_setup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_cipher_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[afc]"></a>mbedtls_cipher_setkey</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_cipher_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[a50]"></a>mbedtls_cipher_set_iv</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_set_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[a55]"></a>mbedtls_cipher_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[a51]"></a>mbedtls_cipher_update</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[a53]"></a>mbedtls_cipher_finish</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_cipher_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
</UL>

<P><STRONG><a name="[a54]"></a>mbedtls_cipher_crypt</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbedtls_cipher_crypt &rArr; mbedtls_cipher_update &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_reset
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[d88]"></a>mbedtls_md_list</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[a57]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
</UL>

<P><STRONG><a name="[a56]"></a>mbedtls_md_info_from_string</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[a5e]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
</UL>

<P><STRONG><a name="[a58]"></a>mbedtls_md_free</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = mbedtls_md_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
</UL>

<P><STRONG><a name="[d89]"></a>mbedtls_md_clone</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[a5a]"></a>mbedtls_md_setup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
</UL>
<BR>[Called By]<UL><LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init_ctx
</UL>

<P><STRONG><a name="[a5b]"></a>mbedtls_md_init_ctx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
</UL>

<P><STRONG><a name="[aff]"></a>mbedtls_md_starts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
</UL>

<P><STRONG><a name="[b00]"></a>mbedtls_md_update</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_update
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
</UL>

<P><STRONG><a name="[b01]"></a>mbedtls_md_finish</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
</UL>

<P><STRONG><a name="[b62]"></a>mbedtls_md</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</UL>

<P><STRONG><a name="[a5c]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_md_hmac_starts &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
</UL>

<P><STRONG><a name="[a5f]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
</UL>

<P><STRONG><a name="[a60]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac
</UL>

<P><STRONG><a name="[af9]"></a>mbedtls_md_hmac_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_hmac_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
</UL>

<P><STRONG><a name="[a5d]"></a>mbedtls_md_hmac</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, md.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
</UL>

<P><STRONG><a name="[b05]"></a>mbedtls_md_process</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>

<P><STRONG><a name="[aaa]"></a>mbedtls_md_get_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>

<P><STRONG><a name="[afe]"></a>mbedtls_md_get_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
</UL>

<P><STRONG><a name="[d8a]"></a>mbedtls_md_get_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(.text), UNUSED)

<P><STRONG><a name="[a64]"></a>mbedtls_md5_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_alloc
</UL>

<P><STRONG><a name="[a65]"></a>mbedtls_md5_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md5_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_ctx_free
</UL>

<P><STRONG><a name="[a66]"></a>mbedtls_md5_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_clone_wrap
</UL>

<P><STRONG><a name="[a61]"></a>mbedtls_md5_starts</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_starts_wrap
</UL>

<P><STRONG><a name="[a67]"></a>mbedtls_md5_process</STRONG> (Thumb, 2326 bytes, Stack size 84 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process_wrap
</UL>

<P><STRONG><a name="[a62]"></a>mbedtls_md5_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_update_wrap
</UL>

<P><STRONG><a name="[a63]"></a>mbedtls_md5_finish</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish_wrap
</UL>

<P><STRONG><a name="[137]"></a>mbedtls_md5</STRONG> (Thumb, 50 bytes, Stack size 104 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mbedtls_md5 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[b71]"></a>mbedtls_net_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[a78]"></a>mbedtls_net_connect</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_connect &rArr; aliyun_iot_network_create &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[a7b]"></a>mbedtls_net_bind</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>

<P><STRONG><a name="[d8b]"></a>mbedtls_net_accept</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[a7f]"></a>mbedtls_net_set_block</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_set_block
</UL>

<P><STRONG><a name="[a81]"></a>mbedtls_net_set_nonblock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_set_nonblock
</UL>

<P><STRONG><a name="[a83]"></a>mbedtls_net_usleep</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
</UL>

<P><STRONG><a name="[bc]"></a>mbedtls_net_recv</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_recv &rArr; aliyun_iot_network_recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_recv
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_network_ssl.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>mbedtls_net_recv_timeout</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_recv_timeout &rArr; mbedtls_net_recv &rArr; aliyun_iot_network_recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_settimeout
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_select
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_network_ssl.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>mbedtls_net_send</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_send &rArr; aliyun_iot_network_send &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_remain
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_cutdown
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_settimeout
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_send
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_select
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_network_ssl.o(.text)
</UL>
<P><STRONG><a name="[a8c]"></a>mbedtls_net_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mbedtls_net_free &rArr; aliyun_iot_network_shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_shutdown
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_close
</UL>
<BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
</UL>

<P><STRONG><a name="[a90]"></a>mbedtls_oid_get_attr_short_name</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
</UL>

<P><STRONG><a name="[a92]"></a>mbedtls_oid_get_x509_ext_type</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_x509_ext_type &rArr; oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[a94]"></a>mbedtls_oid_get_extended_key_usage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
</UL>

<P><STRONG><a name="[a96]"></a>mbedtls_oid_get_sig_alg_desc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
</UL>

<P><STRONG><a name="[a97]"></a>mbedtls_oid_get_sig_alg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
</UL>

<P><STRONG><a name="[d8c]"></a>mbedtls_oid_get_oid_by_sig_alg</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[a99]"></a>mbedtls_oid_get_pk_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_pk_alg &rArr; oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
</UL>

<P><STRONG><a name="[d8d]"></a>mbedtls_oid_get_oid_by_pk_alg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text), UNUSED)

<P><STRONG><a name="[a9b]"></a>mbedtls_oid_get_cipher_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
</UL>

<P><STRONG><a name="[a9d]"></a>mbedtls_oid_get_md_alg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbedtls_oid_get_md_alg &rArr; oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
</UL>
<BR>[Called By]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>

<P><STRONG><a name="[ac9]"></a>mbedtls_oid_get_oid_by_md</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_oid_get_oid_by_md
</UL>
<BR>[Called By]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>

<P><STRONG><a name="[a9e]"></a>mbedtls_oid_get_numeric_string</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[ac0]"></a>mbedtls_pem_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[aa3]"></a>mbedtls_pem_read_buffer</STRONG> (Thumb, 560 bytes, Stack size 88 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_base64_decode
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[aa6]"></a>mbedtls_pem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = mbedtls_pem_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[b72]"></a>mbedtls_pk_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[aa7]"></a>mbedtls_pk_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
</UL>

<P><STRONG><a name="[aba]"></a>mbedtls_pk_info_from_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[abb]"></a>mbedtls_pk_setup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[aad]"></a>mbedtls_pk_can_do</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[aab]"></a>mbedtls_pk_verify</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
</UL>

<P><STRONG><a name="[aac]"></a>mbedtls_pk_verify_ext</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</UL>

<P><STRONG><a name="[aae]"></a>mbedtls_pk_sign</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_pk_sign &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_hashlen_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[d8e]"></a>mbedtls_pk_decrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[ae2]"></a>mbedtls_pk_encrypt</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_pk_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>

<P><STRONG><a name="[d8f]"></a>mbedtls_pk_check_pair</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[b44]"></a>mbedtls_pk_get_bitlen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[d90]"></a>mbedtls_pk_debug</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pk.o(.text), UNUSED)

<P><STRONG><a name="[b55]"></a>mbedtls_pk_get_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b64]"></a>mbedtls_pk_get_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[ab9]"></a>mbedtls_pk_parse_subpubkey</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_public_key
</UL>

<P><STRONG><a name="[abf]"></a>mbedtls_pk_parse_key</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = mbedtls_pk_parse_key &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[ac1]"></a>mbedtls_pk_parse_public_key</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, pkparse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
</UL>

<P><STRONG><a name="[ac2]"></a>mbedtls_rsa_set_padding</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>

<P><STRONG><a name="[ab4]"></a>mbedtls_rsa_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_rsa_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_set_padding
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_alloc_wrap
</UL>

<P><STRONG><a name="[ab7]"></a>mbedtls_rsa_check_pubkey</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_rsa_check_pubkey &rArr; mbedtls_mpi_cmp_mpi
</UL>
<BR>[Calls]<UL><LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_rsapubkey
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[abd]"></a>mbedtls_rsa_check_privkey</STRONG> (Thumb, 562 bytes, Stack size 168 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_int
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>

<P><STRONG><a name="[ab3]"></a>mbedtls_rsa_check_pub_priv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_check_pair_wrap
</UL>

<P><STRONG><a name="[ac3]"></a>mbedtls_rsa_public</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_public &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
</UL>
<BR>[Called By]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>

<P><STRONG><a name="[ac5]"></a>mbedtls_rsa_private</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_mpi
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_add_mpi
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_mpi
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_init
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_binary
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_prepare_blinding
</UL>
<BR>[Called By]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>

<P><STRONG><a name="[ac6]"></a>mbedtls_rsa_rsaes_pkcs1_v15_encrypt</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>

<P><STRONG><a name="[ab2]"></a>mbedtls_rsa_pkcs1_encrypt</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_encrypt_wrap
</UL>

<P><STRONG><a name="[ac7]"></a>mbedtls_rsa_rsaes_pkcs1_v15_decrypt</STRONG> (Thumb, 348 bytes, Stack size 576 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>

<P><STRONG><a name="[ab1]"></a>mbedtls_rsa_pkcs1_decrypt</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_decrypt_wrap
</UL>

<P><STRONG><a name="[ac8]"></a>mbedtls_rsa_rsassa_pkcs1_v15_sign</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_oid_by_md
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>

<P><STRONG><a name="[ab0]"></a>mbedtls_rsa_pkcs1_sign</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_sign_wrap
</UL>

<P><STRONG><a name="[aca]"></a>mbedtls_rsa_rsassa_pkcs1_v15_verify</STRONG> (Thumb, 492 bytes, Stack size 600 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_public
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>

<P><STRONG><a name="[aaf]"></a>mbedtls_rsa_pkcs1_verify</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_verify_wrap
</UL>

<P><STRONG><a name="[ab5]"></a>mbedtls_rsa_free</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_copy
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_free_wrap
</UL>

<P><STRONG><a name="[acb]"></a>mbedtls_rsa_copy</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>

<P><STRONG><a name="[a6b]"></a>mbedtls_sha1_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[a6d]"></a>mbedtls_sha1_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha1_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[a6c]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[a68]"></a>mbedtls_sha1_starts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sha1_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[a6e]"></a>mbedtls_sha1_process</STRONG> (Thumb, 6442 bytes, Stack size 92 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mbedtls_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[a69]"></a>mbedtls_sha1_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_md5sha1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[a6a]"></a>mbedtls_sha1_finish</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[13f]"></a>mbedtls_sha1</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mbedtls_sha1 &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a73]"></a>mbedtls_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_alloc
</UL>

<P><STRONG><a name="[a74]"></a>mbedtls_sha256_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_ctx_free
</UL>

<P><STRONG><a name="[a75]"></a>mbedtls_sha256_clone</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_clone_wrap
</UL>

<P><STRONG><a name="[a6f]"></a>mbedtls_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[b0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_reset_checksum
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_starts_wrap
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_starts_wrap
</UL>

<P><STRONG><a name="[a76]"></a>mbedtls_sha256_process</STRONG> (Thumb, 3600 bytes, Stack size 312 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mbedtls_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_process_wrap
</UL>

<P><STRONG><a name="[a70]"></a>mbedtls_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_update_checksum_sha256
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_update_wrap
</UL>

<P><STRONG><a name="[a71]"></a>mbedtls_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_tls_sha256
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_finish_wrap
</UL>

<P><STRONG><a name="[a72]"></a>mbedtls_sha256</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_wrap
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha224_wrap
</UL>

<P><STRONG><a name="[acf]"></a>mbedtls_ssl_ciphersuite_from_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>

<P><STRONG><a name="[ace]"></a>mbedtls_ssl_list_ciphersuites</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ssl_ciphersuites.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[ad0]"></a>mbedtls_ssl_ciphersuite_from_string</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_id
</UL>

<P><STRONG><a name="[ad1]"></a>mbedtls_ssl_get_ciphersuite_name</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[b21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite
</UL>

<P><STRONG><a name="[ad2]"></a>mbedtls_ssl_get_ciphersuite_id</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_ciphersuites.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
</UL>

<P><STRONG><a name="[d91]"></a>mbedtls_ssl_get_ciphersuite_sig_pk_alg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ssl_ciphersuites.o(.text), UNUSED)

<P><STRONG><a name="[aea]"></a>mbedtls_ssl_handshake_client_step</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>
<BR>[Called By]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>

<P><STRONG><a name="[af3]"></a>mbedtls_ssl_session_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[ae0]"></a>mbedtls_ssl_derive_keys</STRONG> (Thumb, 892 bytes, Stack size 384 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setkey
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_padding_mode
<LI><a href="#[afb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_type
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[b07]"></a>mbedtls_ssl_fetch_input</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_fetch_input &rArr; ssl_check_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[aeb]"></a>mbedtls_ssl_flush_output</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ad6]"></a>mbedtls_ssl_write_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_write_version
</UL>
<BR>[Called By]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[ad8]"></a>mbedtls_ssl_write_record</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_finished
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_change_cipher_spec
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[ade]"></a>mbedtls_ssl_send_alert_message</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[add]"></a>mbedtls_ssl_read_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[adc]"></a>mbedtls_ssl_read_record</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbedtls_ssl_read_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
<LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
<LI><a href="#[b09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_record_header
<LI><a href="#[b0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_handshake_record
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_change_cipher_spec
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello_done
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
<LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_key_exchange
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[ada]"></a>mbedtls_ssl_send_fatal_handshake_failure</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_ssl_send_fatal_handshake_failure &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
</UL>
<BR>[Called By]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
</UL>

<P><STRONG><a name="[aed]"></a>mbedtls_ssl_write_certificate</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbedtls_ssl_write_certificate &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_cert
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[b0e]"></a>mbedtls_ssl_check_cert_usage</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbedtls_ssl_check_cert_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
</UL>

<P><STRONG><a name="[aec]"></a>mbedtls_ssl_parse_certificate</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_parse_certificate &rArr; mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[b0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_check_cert_usage
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[aee]"></a>mbedtls_ssl_write_change_cipher_spec</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbedtls_ssl_write_change_cipher_spec &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[af0]"></a>mbedtls_ssl_parse_change_cipher_spec</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_ssl_parse_change_cipher_spec &rArr; mbedtls_ssl_read_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[adf]"></a>mbedtls_ssl_optimize_checksum</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[b0f]"></a>mbedtls_ssl_reset_checksum</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</UL>

<P><STRONG><a name="[b10]"></a>mbedtls_ssl_transform_free</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_transform_free &rArr; mbedtls_md_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>

<P><STRONG><a name="[b11]"></a>mbedtls_ssl_handshake_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_handshake_free &rArr; mbedtls_sha256_free &rArr; mbedtls_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>

<P><STRONG><a name="[af2]"></a>mbedtls_ssl_handshake_wrapup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake_wrapup &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[b12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_wrapup_free_hs_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[aef]"></a>mbedtls_ssl_write_finished</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mbedtls_ssl_write_finished &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[af1]"></a>mbedtls_ssl_parse_finished</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mbedtls_ssl_parse_finished &rArr; mbedtls_ssl_read_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[b15]"></a>mbedtls_ssl_session_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_session_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[b17]"></a>mbedtls_ssl_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[b18]"></a>mbedtls_ssl_setup</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_setup &rArr; ssl_handshake_init &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b1b]"></a>mbedtls_ssl_session_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[b2e]"></a>mbedtls_ssl_conf_endpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[b2f]"></a>mbedtls_ssl_conf_transport</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
</UL>

<P><STRONG><a name="[b7a]"></a>mbedtls_ssl_conf_authmode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[d92]"></a>mbedtls_ssl_conf_verify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[b7c]"></a>mbedtls_ssl_conf_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b7d]"></a>mbedtls_ssl_conf_dbg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b7e]"></a>mbedtls_ssl_set_bio</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_set_bio
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b74]"></a>mbedtls_ssl_conf_read_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_read
</UL>

<P><STRONG><a name="[b1c]"></a>mbedtls_ssl_set_timer_cb</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
</UL>

<P><STRONG><a name="[b1d]"></a>mbedtls_ssl_set_session</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[d93]"></a>mbedtls_ssl_conf_ciphersuites</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[d94]"></a>mbedtls_ssl_conf_ciphersuites_for_version</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[d95]"></a>mbedtls_ssl_conf_cert_profile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[b1f]"></a>mbedtls_ssl_conf_own_cert</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_conf_own_cert &rArr; ssl_append_key_cert &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_append_key_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b7b]"></a>mbedtls_ssl_conf_ca_chain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[d96]"></a>mbedtls_ssl_conf_sig_hashes</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[b20]"></a>mbedtls_ssl_set_hostname</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_set_hostname &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b78]"></a>mbedtls_ssl_conf_max_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b79]"></a>mbedtls_ssl_conf_min_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[d97]"></a>mbedtls_ssl_conf_legacy_renegotiation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[d98]"></a>mbedtls_ssl_get_bytes_avail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[b7f]"></a>mbedtls_ssl_get_verify_result</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b21]"></a>mbedtls_ssl_get_ciphersuite</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_ciphersuite_name
</UL>

<P><STRONG><a name="[d99]"></a>mbedtls_ssl_get_version</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[b22]"></a>mbedtls_ssl_get_record_expansion</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
</UL>

<P><STRONG><a name="[d9a]"></a>mbedtls_ssl_get_peer_cert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[b23]"></a>mbedtls_ssl_get_session</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
</UL>

<P><STRONG><a name="[b24]"></a>mbedtls_ssl_handshake_step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>
<BR>[Called By]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
</UL>

<P><STRONG><a name="[b25]"></a>mbedtls_ssl_handshake</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_step
</UL>
<BR>[Called By]<UL><LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b26]"></a>mbedtls_ssl_read</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_read
</UL>

<P><STRONG><a name="[b28]"></a>mbedtls_ssl_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_write
</UL>

<P><STRONG><a name="[b29]"></a>mbedtls_ssl_close_notify</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbedtls_ssl_close_notify &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
</UL>

<P><STRONG><a name="[b2b]"></a>mbedtls_ssl_free</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_free &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
</UL>

<P><STRONG><a name="[b2c]"></a>mbedtls_ssl_config_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ssl_config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[b2d]"></a>mbedtls_ssl_config_defaults</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_ssl_config_defaults &rArr; mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Calls]<UL><LI><a href="#[b2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_transport
<LI><a href="#[b2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_endpoint
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_list_ciphersuites
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b30]"></a>mbedtls_ssl_config_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mbedtls_ssl_config_free &rArr; ssl_key_cert_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_key_cert_free
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
</UL>

<P><STRONG><a name="[ae9]"></a>mbedtls_ssl_sig_from_pk</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbedtls_ssl_sig_from_pk &rArr; mbedtls_pk_can_do
</UL>
<BR>[Calls]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
</UL>

<P><STRONG><a name="[d9b]"></a>mbedtls_ssl_pk_alg_from_sig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[d9c]"></a>mbedtls_ssl_md_alg_from_hash</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[ad4]"></a>mbedtls_ssl_hash_from_md_alg</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
</UL>

<P><STRONG><a name="[d9d]"></a>mbedtls_ssl_check_sig_hash</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ssl_tls.o(.text), UNUSED)

<P><STRONG><a name="[b35]"></a>mbedtls_x509_get_serial</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbedtls_x509_get_serial &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b36]"></a>mbedtls_x509_get_alg_null</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, x509.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg_null
</UL>

<P><STRONG><a name="[b37]"></a>mbedtls_x509_get_alg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b39]"></a>mbedtls_x509_get_name</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_get_name &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_attr_type_value
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b3a]"></a>mbedtls_x509_get_time</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_x509_get_time &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
<LI><a href="#[b3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
</UL>

<P><STRONG><a name="[b3c]"></a>mbedtls_x509_get_sig</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_get_sig &rArr; mbedtls_asn1_get_bitstring_null &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring_null
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b3d]"></a>mbedtls_x509_get_sig_alg</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_get_sig_alg &rArr; mbedtls_oid_get_sig_alg &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b3e]"></a>mbedtls_x509_get_ext</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbedtls_x509_get_ext &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[b3f]"></a>mbedtls_x509_dn_gets</STRONG> (Thumb, 274 bytes, Stack size 312 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b40]"></a>mbedtls_x509_serial_gets</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbedtls_x509_serial_gets &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b41]"></a>mbedtls_x509_sig_alg_gets</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbedtls_x509_sig_alg_gets &rArr; mbedtls_oid_get_sig_alg_desc &rArr; oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b42]"></a>mbedtls_x509_key_size_helper</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbedtls_x509_key_size_helper &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b5e]"></a>mbedtls_x509_time_is_past</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</UL>

<P><STRONG><a name="[b5f]"></a>mbedtls_x509_time_is_future</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</UL>

<P><STRONG><a name="[af4]"></a>mbedtls_x509_crt_free</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_crt_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[b4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
</UL>

<P><STRONG><a name="[af7]"></a>mbedtls_x509_crt_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_x509_crt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[af8]"></a>mbedtls_x509_crt_parse_der</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_crt_parse_der &rArr; x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
</UL>

<P><STRONG><a name="[b50]"></a>mbedtls_x509_crt_parse</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = mbedtls_x509_crt_parse &rArr; mbedtls_pem_read_buffer &rArr; pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_init
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[b54]"></a>mbedtls_x509_crt_info</STRONG> (Thumb, 1508 bytes, Stack size 80 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[b56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_subject_alt_name
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[b55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_name
<LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_crt
</UL>

<P><STRONG><a name="[b57]"></a>mbedtls_x509_crt_verify_info</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[b0d]"></a>mbedtls_x509_crt_verify_with_profile</STRONG> (Thumb, 532 bytes, Stack size 88 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mbedtls_x509_crt_verify_with_profile &rArr; x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_type
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_certificate
<LI><a href="#[b65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify
</UL>

<P><STRONG><a name="[b65]"></a>mbedtls_x509_crt_verify</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, x509_crt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b66]"></a>aliyun_iot_memory_malloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aliyun_iot_platform_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_memory_malloc &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
</UL>

<P><STRONG><a name="[b67]"></a>aliyun_iot_memory_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aliyun_iot_platform_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_memory_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ssl
</UL>

<P><STRONG><a name="[a86]"></a>aliyun_iot_get_errno</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aliyun_iot_get_errno &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_transform
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_tcp_send_all
</UL>

<P><STRONG><a name="[a8b]"></a>aliyun_iot_network_send</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_send &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_tcp_send_all
</UL>

<P><STRONG><a name="[a85]"></a>aliyun_iot_network_recv</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>

<P><STRONG><a name="[a87]"></a>aliyun_iot_network_select</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_select &rArr; lwip_select &rArr; sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>

<P><STRONG><a name="[a88]"></a>aliyun_iot_network_settimeout</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_settimeout &rArr; lwip_setsockopt &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>

<P><STRONG><a name="[a7e]"></a>aliyun_iot_network_get_nonblock</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aliyun_iot_network_get_nonblock &rArr; lwip_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_would_block
</UL>

<P><STRONG><a name="[a82]"></a>aliyun_iot_network_set_nonblock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aliyun_iot_platform_network.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_set_nonblock
</UL>

<P><STRONG><a name="[a80]"></a>aliyun_iot_network_set_block</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aliyun_iot_platform_network.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_set_block
</UL>

<P><STRONG><a name="[a8e]"></a>aliyun_iot_network_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_close &rArr; lwip_close &rArr; netconn_delete &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
</UL>

<P><STRONG><a name="[a8d]"></a>aliyun_iot_network_shutdown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
</UL>

<P><STRONG><a name="[a7a]"></a>aliyun_iot_network_create</STRONG> (Thumb, 644 bytes, Stack size 72 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_create &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
</UL>

<P><STRONG><a name="[a7c]"></a>aliyun_iot_network_bind</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, aliyun_iot_platform_network.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
</UL>

<P><STRONG><a name="[b31]"></a>aliyun_iot_mutex_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aliyun_iot_platform_pthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_mutex_init &rArr; sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_init_pthread
</UL>

<P><STRONG><a name="[b33]"></a>aliyun_iot_mutex_lock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aliyun_iot_platform_pthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_mutex_lock &rArr; sys_arch_sem_wait &rArr; sem_wait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_lock_pthread
</UL>

<P><STRONG><a name="[b34]"></a>aliyun_iot_mutex_unlock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aliyun_iot_platform_pthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_mutex_unlock &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_unlock_pthread
</UL>

<P><STRONG><a name="[b32]"></a>aliyun_iot_mutex_destory</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aliyun_iot_platform_pthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_mutex_destory &rArr; sys_sem_free &rArr; sem_destory &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threading_mutex_free_pthread
</UL>

<P><STRONG><a name="[b69]"></a>aliyun_iot_pthread_param_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aliyun_iot_platform_pthread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[b6a]"></a>aliyun_iot_pthread_create</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, aliyun_iot_platform_pthread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[d9e]"></a>aliyun_iot_pthread_cancel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aliyun_iot_platform_pthread.o(.text), UNUSED)

<P><STRONG><a name="[a84]"></a>aliyun_iot_pthread_taskdelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aliyun_iot_platform_pthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_pthread_taskdelay &rArr; sys_msleep &rArr; sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_usleep
<LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_voice_task
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_recv_response
<LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_task
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
</UL>

<P><STRONG><a name="[d9f]"></a>aliyun_iot_pthread_setname</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aliyun_iot_platform_pthread.o(.text), UNUSED)

<P><STRONG><a name="[b6b]"></a>aliot_platform_time_get_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aliyun_iot_platform_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aliot_platform_time_get_ms &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_remain
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_cutdown
<LI><a href="#[ba9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_start_clock
<LI><a href="#[baa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_spend
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_expired
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_time_get_ms_64b
<LI><a href="#[bab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_now
</UL>

<P><STRONG><a name="[b6c]"></a>mqtt_avRandom</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mqtt_avRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[b6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_random
</UL>

<P><STRONG><a name="[b6e]"></a>mqtt_real_confirm</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mqtt_real_confirm &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b70]"></a>mqtt_ssl_client_init</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2060 + Unknown Stack Size
<LI>Call Chain = mqtt_ssl_client_init &rArr; ssl_parse_crt &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[b72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_init
<LI><a href="#[b71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_init
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_crt
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>

<P><STRONG><a name="[b73]"></a>aliyun_iot_network_ssl_read</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_ssl_read &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_read_timeout
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ssl
</UL>

<P><STRONG><a name="[b75]"></a>aliyun_iot_network_ssl_write</STRONG> (Thumb, 876 bytes, Stack size 40 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_ssl_write &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ssl
</UL>

<P><STRONG><a name="[b76]"></a>aliyun_iot_network_ssl_disconnect</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_ssl_disconnect &rArr; mbedtls_net_free &rArr; aliyun_iot_network_shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_close_notify
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ssl
</UL>

<P><STRONG><a name="[b77]"></a>TLSConnectNetwork</STRONG> (Thumb, 1648 bytes, Stack size 80 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2140 + Unknown Stack Size
<LI>Call Chain = TLSConnectNetwork &rArr; mqtt_ssl_client_init &rArr; ssl_parse_crt &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_defaults
<LI><a href="#[b25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake
<LI><a href="#[b7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_verify_result
<LI><a href="#[b79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_min_version
<LI><a href="#[b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_max_version
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[b7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_ca_chain
<LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
<LI><a href="#[b7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_bio
<LI><a href="#[b7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_dbg
<LI><a href="#[b7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_rng
<LI><a href="#[b7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_authmode
<LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_real_confirm
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_connect
</UL>

<P><STRONG><a name="[b80]"></a>aliyun_iot_network_ssl_connect</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2196 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_network_ssl_connect &rArr; TLSConnectNetwork &rArr; mqtt_ssl_client_init &rArr; ssl_parse_crt &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
</UL>

<P><STRONG><a name="[bb1]"></a>aliyun_iot_ca_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aliyun_iot_ca.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_text2audio
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
</UL>

<P><STRONG><a name="[b81]"></a>aliyun_iot_common_base64encode</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, aliyun_iot_common_base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aliyun_iot_common_base64encode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[b82]"></a>aliyun_iot_common_base64decode</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, aliyun_iot_common_base64.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_decoding_table
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b85]"></a>httpclient_conn</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = httpclient_conn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_connect
</UL>

<P><STRONG><a name="[b86]"></a>httpclient_parse_url</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = httpclient_parse_url &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[b88]"></a>httpclient_parse_host</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = httpclient_parse_host &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[b89]"></a>httpclient_get_info</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = httpclient_get_info &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
</UL>

<P><STRONG><a name="[da0]"></a>httpclient_set_custom_header</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aliyun_iot_common_httpclient.o(.text), UNUSED)

<P><STRONG><a name="[b8a]"></a>httpclient_basic_auth</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aliyun_iot_common_httpclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[b8b]"></a>httpclient_send_auth</STRONG> (Thumb, 154 bytes, Stack size 328 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_base64enc
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[b8c]"></a>httpclient_tcp_send_all</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, aliyun_iot_common_httpclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_send
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b8d]"></a>httpclient_send_header</STRONG> (Thumb, 650 bytes, Stack size 1672 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_request
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
</UL>

<P><STRONG><a name="[b8e]"></a>httpclient_send_userdata</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = httpclient_send_userdata &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
</UL>

<P><STRONG><a name="[b8f]"></a>httpclient_recv</STRONG> (Thumb, 780 bytes, Stack size 48 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = httpclient_recv &rArr; aliyun_iot_get_errno &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
</UL>

<P><STRONG><a name="[b90]"></a>httpclient_retrieve_content</STRONG> (Thumb, 1574 bytes, Stack size 72 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
</UL>

<P><STRONG><a name="[b92]"></a>httpclient_response_parse</STRONG> (Thumb, 624 bytes, Stack size 112 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
</UL>

<P><STRONG><a name="[b93]"></a>httpclient_connect</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = httpclient_connect &rArr; httpclient_conn &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[b94]"></a>httpclient_send_request</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = httpclient_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_userdata
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[b95]"></a>httpclient_get_content_len</STRONG> (Thumb, 868 bytes, Stack size 24 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = httpclient_get_content_len &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
</UL>

<P><STRONG><a name="[b96]"></a>httpclient_recv_response_content</STRONG> (Thumb, 458 bytes, Stack size 560 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = httpclient_recv_response_content &rArr; aliyun_iot_pthread_taskdelay &rArr; sys_msleep &rArr; sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_content_len
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[b97]"></a>httpclient_recv_response</STRONG> (Thumb, 190 bytes, Stack size 536 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = httpclient_recv_response &rArr; httpclient_response_parse &rArr; httpclient_retrieve_content &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[b9a]"></a>httpclient_close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = httpclient_close
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[b98]"></a>httpclient_common</STRONG> (Thumb, 286 bytes, Stack size 112 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = httpclient_common &rArr; httpclient_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_close
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_connect
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_post
</UL>

<P><STRONG><a name="[da1]"></a>aliyun_iot_common_get_response_code</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aliyun_iot_common_httpclient.o(.text), UNUSED)

<P><STRONG><a name="[b9b]"></a>aliyun_iot_common_post</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = aliyun_iot_common_post &rArr; httpclient_common &rArr; httpclient_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
</UL>

<P><STRONG><a name="[bbb]"></a>aliyun_iot_common_log_set_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aliyun_iot_common_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_voice_task
<LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_task
</UL>

<P><STRONG><a name="[da2]"></a>aliyun_iot_common_log_get_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aliyun_iot_common_log.o(.text), UNUSED)

<P><STRONG><a name="[ba5]"></a>aliyun_iot_net_read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_net_read &rArr; read_ssl &rArr; aliyun_iot_network_ssl_read &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ssl
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_common_net.o(.text)
</UL>
<P><STRONG><a name="[ba6]"></a>aliyun_iot_net_write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_net_write &rArr; write_ssl &rArr; aliyun_iot_network_ssl_write &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ssl
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_common_net.o(.text)
</UL>
<P><STRONG><a name="[ba7]"></a>aliyun_iot_net_disconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_net_disconnect &rArr; disconnect_ssl &rArr; aliyun_iot_network_ssl_disconnect &rArr; mbedtls_net_free &rArr; aliyun_iot_network_shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ssl
<LI><a href="#[b9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_common_net.o(.text)
</UL>
<P><STRONG><a name="[ba8]"></a>aliyun_iot_net_connect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2228 + Unknown Stack Size
<LI>Call Chain = aliyun_iot_net_connect &rArr; connect_ssl &rArr; aliyun_iot_network_ssl_connect &rArr; TLSConnectNetwork &rArr; mqtt_ssl_client_init &rArr; ssl_parse_crt &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_common_net.o(.text)
</UL>
<P><STRONG><a name="[b99]"></a>aliyun_iot_net_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aliyun_iot_net_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
</UL>

<P><STRONG><a name="[da3]"></a>aliyun_iot_timer_assignment</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aliyun_iot_common_timer.o(.text), UNUSED)

<P><STRONG><a name="[ba9]"></a>aliyun_iot_timer_start_clock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aliyun_iot_common_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>

<P><STRONG><a name="[baa]"></a>aliyun_iot_timer_spend</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aliyun_iot_common_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>

<P><STRONG><a name="[a8a]"></a>aliyun_iot_timer_remain</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aliyun_iot_common_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aliyun_iot_timer_remain &rArr; aliot_platform_time_get_ms &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>

<P><STRONG><a name="[b9e]"></a>aliyun_iot_timer_expired</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, aliyun_iot_common_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aliyun_iot_timer_expired &rArr; aliot_platform_time_get_ms &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
</UL>

<P><STRONG><a name="[da4]"></a>aliyun_iot_timer_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aliyun_iot_common_timer.o(.text), UNUSED)

<P><STRONG><a name="[a89]"></a>aliyun_iot_timer_cutdown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aliyun_iot_common_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aliyun_iot_timer_cutdown &rArr; aliot_platform_time_get_ms &rArr; sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
</UL>

<P><STRONG><a name="[bab]"></a>aliyun_iot_timer_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aliyun_iot_common_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>

<P><STRONG><a name="[da5]"></a>aliyun_iot_timer_interval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aliyun_iot_common_timer.o(.text), UNUSED)

<P><STRONG><a name="[bac]"></a>aliot_time_get_ms_64b</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, aliyun_iot_common_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_platform_time_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_time_get_s
<LI><a href="#[bad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_time_get_ms
</UL>

<P><STRONG><a name="[bad]"></a>aliot_time_get_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aliyun_iot_common_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_time_get_ms_64b
</UL>

<P><STRONG><a name="[bae]"></a>aliot_time_get_s</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aliyun_iot_common_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_time_get_ms_64b
</UL>

<P><STRONG><a name="[baf]"></a>url_encode_utf8_text</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = url_encode_utf8_text &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_image_recog_result
</UL>

<P><STRONG><a name="[bb0]"></a>baidu_ai_auth</STRONG> (Thumb, 446 bytes, Stack size 120 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400 + Unknown Stack Size
<LI>Call Chain = baidu_ai_auth &rArr; aliyun_iot_common_post &rArr; httpclient_common &rArr; httpclient_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_malloc
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_free
<LI><a href="#[b9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_post
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_ca_get
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_get_token
</UL>

<P><STRONG><a name="[bb2]"></a>ai_get_token</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408 + Unknown Stack Size
<LI>Call Chain = ai_get_token &rArr; baidu_ai_auth &rArr; aliyun_iot_common_post &rArr; httpclient_common &rArr; httpclient_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_task
</UL>

<P><STRONG><a name="[bb3]"></a>ai_image_httpclient_send_header</STRONG> (Thumb, 1488 bytes, Stack size 1672 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = ai_image_httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_request
</UL>

<P><STRONG><a name="[bb4]"></a>ai_image_httpclient_send_userdata</STRONG> (Thumb, 350 bytes, Stack size 520 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ai_image_httpclient_send_userdata &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_request
</UL>

<P><STRONG><a name="[bb5]"></a>ai_image_httpclient_send_request</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = ai_image_httpclient_send_request &rArr; ai_image_httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_userdata
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
</UL>

<P><STRONG><a name="[bb6]"></a>play_image_recog_result</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920 + Unknown Stack Size
<LI>Call Chain = play_image_recog_result &rArr; baidu_ai_text2audio &rArr; ai_httpclient_text2audio &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_text2audio
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;url_encode_utf8_text
</UL>
<BR>[Called By]<UL><LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
</UL>

<P><STRONG><a name="[bb8]"></a>ai_image_httpclient_common</STRONG> (Thumb, 764 bytes, Stack size 152 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2288 + Unknown Stack Size
<LI>Call Chain = ai_image_httpclient_common &rArr; ai_image_httpclient_send_request &rArr; ai_image_httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_free
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_size
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_free2
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_size2
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_capture_img
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture_img
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_base64encode
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_request
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_close
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_connect
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
</UL>

<P><STRONG><a name="[bb9]"></a>baidu_ai_image_verify</STRONG> (Thumb, 856 bytes, Stack size 640 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560 + Unknown Stack Size
<LI>Call Chain = baidu_ai_image_verify &rArr; play_image_recog_result &rArr; baidu_ai_text2audio &rArr; ai_httpclient_text2audio &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_malloc
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_free
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_ca_get
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_image_recog_result
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_task
</UL>

<P><STRONG><a name="[bba]"></a>ai_image_task</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568 + Unknown Stack Size
<LI>Call Chain = ai_image_task &rArr; baidu_ai_image_verify &rArr; play_image_recog_result &rArr; baidu_ai_text2audio &rArr; ai_httpclient_text2audio &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_log_set_level
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_text2audio
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_get_token
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> baidu_ai_face.o(.text)
</UL>
<P><STRONG><a name="[96c]"></a>baidu_ai_image_client</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, baidu_ai_face.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = baidu_ai_image_client &rArr; sys_thread_new &rArr; thread_create &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[bbc]"></a>ai_httpclient_voice_send_userdata</STRONG> (Thumb, 242 bytes, Stack size 544 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = ai_httpclient_voice_send_userdata &rArr; get_ai_audio_pcm_data &rArr; m25p80_read &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ai_audio_pcm_data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_request
</UL>

<P><STRONG><a name="[bbd]"></a>ai_httpclient_voice_send_request</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136 + Unknown Stack Size
<LI>Call Chain = ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_userdata
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
</UL>

<P><STRONG><a name="[bbe]"></a>ai_httpclient_voice2text</STRONG> (Thumb, 384 bytes, Stack size 120 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = ai_httpclient_voice2text &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ai_audio_pcm_data_len
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_request
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_close
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_connect
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
</UL>

<P><STRONG><a name="[bbf]"></a>update_light_status</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_light_status &rArr; update_relay_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_relay_status
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
</UL>

<P><STRONG><a name="[bc0]"></a>baidu_ai_voice2text_query</STRONG> (Thumb, 962 bytes, Stack size 640 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896 + Unknown Stack Size
<LI>Call Chain = baidu_ai_voice2text_query &rArr; ai_httpclient_voice2text &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_and_encode_text_event
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_malloc
<LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_free
<LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_ca_get
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bbf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_light_status
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_voice_task
</UL>

<P><STRONG><a name="[bc1]"></a>ai_httpclient_text2audio_process_header</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ai_httpclient_text2audio_process_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_recv_response
</UL>

<P><STRONG><a name="[bc2]"></a>ai_httpclient_text2audio_recv_response</STRONG> (Thumb, 400 bytes, Stack size 560 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = ai_httpclient_text2audio_recv_response &rArr; play_mp3_stream &rArr; MpegAudioDecoder &rArr; mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_mp3_stream
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_process_header
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
</UL>

<P><STRONG><a name="[bc3]"></a>ai_httpclient_text2audio</STRONG> (Thumb, 826 bytes, Stack size 120 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = ai_httpclient_text2audio &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_mp3_format
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mp3_format
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
<LI><a href="#[b99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_recv_response
<LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_request
<LI><a href="#[b9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_close
<LI><a href="#[b93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_connect
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_text2audio
</UL>

<P><STRONG><a name="[bb7]"></a>baidu_ai_text2audio</STRONG> (Thumb, 166 bytes, Stack size 640 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896 + Unknown Stack Size
<LI>Call Chain = baidu_ai_text2audio &rArr; ai_httpclient_text2audio &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_ca_get
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_voice_task
<LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_task
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_image_recog_result
</UL>

<P><STRONG><a name="[bc4]"></a>ai_voice_task</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912 + Unknown Stack Size
<LI>Call Chain = ai_voice_task &rArr; baidu_ai_voice2text_query &rArr; ai_httpclient_voice2text &rArr; ai_httpclient_voice_send_request &rArr; httpclient_send_header &rArr; httpclient_send_auth &rArr; httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_voice_ai_event
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[bbb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_log_set_level
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_text2audio
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> baidu_ai_voice.o(.text)
</UL>
<P><STRONG><a name="[96d]"></a>baidu_ai_voice_client</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, baidu_ai_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = baidu_ai_voice_client &rArr; sys_thread_new &rArr; thread_create &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
</UL>

<P><STRONG><a name="[a3a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_int_div_int
<LI><a href="#[bae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliot_time_get_s
<LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[41b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atox
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c1]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[7b2]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnicmp
</UL>

<P><STRONG><a name="[b6d]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_avRandom
</UL>

<P><STRONG><a name="[da6]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[da7]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[da8]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_bgscan
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_userscan
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_filter_beacon_ies
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_output
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_low_level_input
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_packet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_get_fw_data
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_from_linear_data
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_from_linear_data_offset
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_user_scan_result
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_mp3_stream
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_set_iv
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[b27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_real
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_decrypt
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_crt
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
</UL>

<P><STRONG><a name="[3e2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_data_rate
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_index_to_data_rate
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_stats
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_bss_param
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_snmp_mib
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mef_cfg
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ipaddr_auto_arp_resp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highpass
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_and_encode_text_event
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_copy
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;url_encode_utf8_text
<LI><a href="#[b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_base64enc
</UL>

<P><STRONG><a name="[41f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_flush
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode_lost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
</UL>

<P><STRONG><a name="[da9]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memcpy
</UL>

<P><STRONG><a name="[4a4]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memmove
</UL>

<P><STRONG><a name="[459]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_verify_ssl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_sign
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[daa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[dab]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_custom_ie_ioctl
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_setup_ht_cap
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_custom_ie
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_uap_init_wiphy
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_sta_init_wiphy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_ascii2hex
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_ap_cfg
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noise_codebook_quant
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_web_cfg
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_web_cfg
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_binary
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_get_iv
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
</UL>

<P><STRONG><a name="[2d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_band
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_stop_bg_scan
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_time
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_change_adhoc_chan
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sys_config_invalid_data
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_buffer
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_process_tcp_ack
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_power_mode_ioctl
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_radio_ctl
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_scan
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_unquant_3tap
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DCMIConfiguration
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_cfg
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_init
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_init
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_setup
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_lset
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_copy
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_init
<LI><a href="#[b17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_init
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_bind
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_recv_response
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_text2audio
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_get_token
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[dac]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4a2]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memset
</UL>

<P><STRONG><a name="[97a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
</UL>

<P><STRONG><a name="[aa4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_recv_response
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_process_header
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bb6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_image_recog_result
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_content_len
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
</UL>

<P><STRONG><a name="[3f2]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_combo_scan
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_bg_scan
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[b69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_param_set
</UL>

<P><STRONG><a name="[b87]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
</UL>

<P><STRONG><a name="[2d5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_string_2_region_code
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_strsep
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_client
<LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_hostname
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_crt
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[b8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_basic_auth
<LI><a href="#[b89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_info
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
</UL>

<P><STRONG><a name="[2c8]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_info_from_string
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_string
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_string
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[3bd]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_string_2_region_code
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_filter_beacon_ies
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_options
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_cfg80211_get_station
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_station
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_memcmp
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_find_named_data
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsassa_pkcs1_v15_verify
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_md_alg_from_asn1
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_cipher_alg_from_asn1
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_pk_alg_from_asn1
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_sig_alg_from_asn1
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_ext_key_usage_from_asn1
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x509_ext_from_asn1
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oid_x520_attr_from_asn1
</UL>

<P><STRONG><a name="[979]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_web_cfg
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ctl_cfg
</UL>

<P><STRONG><a name="[41d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atoi
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ap_cfg_parse_data
</UL>

<P><STRONG><a name="[b91]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
</UL>

<P><STRONG><a name="[bc8]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[bd5]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2d8]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[7fe]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encode
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[bcf]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[7f7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_init
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_ctl
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7fa]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_ctl
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[7fd]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encode
</UL>

<P><STRONG><a name="[7f4]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encode
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>

<P><STRONG><a name="[be0]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[7f9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
</UL>

<P><STRONG><a name="[7f8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_init
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_ctl
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BH1750_ReadResult
</UL>

<P><STRONG><a name="[dad]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[bec]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bc6]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[dae]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[bc5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[daf]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[bcc]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[bc9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[bc7]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bd1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[b91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[be]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[bcb]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[db1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[bd0]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[db2]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[bce]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[bcd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[bcd]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[be7]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[db3]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[bd3]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[bc6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[159]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[db4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bd1]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[bd5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[bd2]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bc9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[bca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[bd6]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bc5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[bce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[db5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[db6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1bb]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[1b9]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[bd7]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[db7]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[7c6]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_notify
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_notify
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning_int
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_warning_int
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_debug
</UL>

<P><STRONG><a name="[db8]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[db9]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[bd9]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dba]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[23d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertTailList
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_workqueue_thread
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_check
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_internal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_internal
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_first
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_next
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_data
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dns_found
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_getaddr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wait_event
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_free
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pending
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_destory
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_post
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_wait
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_destory
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfree
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgrcv
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgsnd
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgget
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_up
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_set_bus_clock
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_rts
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_retry
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_frag
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_tx
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_unregister
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiphy_free
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_connect
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_netdev
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_shutdown_fw
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_set_init_param
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_send_packet
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_init_fw
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_send_disconnect_to_system
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_broadcast_event
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_select_queue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_close
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_free_moal_handle
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_eth_netif_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_get_ip
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_int_thread
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_input
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_join
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_ad_hoc_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_packet_complete
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ibss_joined
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_connect_result
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_firmware
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_cqm_rssi_notify
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_assert
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ready_on_channel
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_remain_on_channel_expired
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_michael_mic_failure
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_under_panic
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_over_panic
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_decode_rx_packet
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_speex_fatal
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ir_recv
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_start_send
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_fill_seq
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_dbg_switch
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rst_stat
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Init
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640_JPEGConfig
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_img_local
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_capture_img
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture_img
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_send_thread
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_switch_samplerate
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_open
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_switch_samplerate
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_voice_ai_event
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_and_encode_text_event
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_voice_recording_event
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ai_audio_pcm_data_len
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ai_event
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_recv_thread
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_stats
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scan
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_scan_req
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_sta_list
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_leave_adhoc
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_join_adhoc
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_channel
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_set_mode
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_stop_ap
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_enable
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_audio
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_process
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netif_init
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_web_cfg
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_tcpip_info
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_relay_status
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_dbg
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_sys_info
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_bright
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_switch
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_tx
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Mode
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Mode
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf2401_recv_thread
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rc522
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_poll_callback
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_record_to_flash
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_key
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_write_firmware_to_spi_flash
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_send
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_start_send_data
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_switch_hs
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp5Error
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rtc
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeShow
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmShow
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAMERA_IO_Read
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_web_cfg
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_web_cfg
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senser_poll_callback
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_data_send
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_create_server
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_mac
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_end
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_to_flash_timeout_cb
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playback_record_audio
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_mp3_stream
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_to_play_buff
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_dev_open
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_speex_decode
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_init
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_create
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_add_membership
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_create
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_loopback_test
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_auto_get_ip
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcp_server
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_camera_task
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_close_camera_server
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send_stop
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_full_speed_send
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_thread
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_join
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_multicast_send_data
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client2
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_udp_client
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tcp_client
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_save_disable
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_get_station_list
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_stop_ap
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_get_stats
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_leave_adhoc
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_join_adhoc
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_disconnect
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_create_ap
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_wifi_connect
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_scan
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_scan_result
<LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_malloc
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deinit_mp3_format
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mp3_format
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mp3_stat
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFrameInfo
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_rsaes_pkcs1_v15_encrypt
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_settimeout
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv_timeout
<LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_base64decode
<LI><a href="#[b81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_base64encode
<LI><a href="#[b77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSConnectNetwork
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
<LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_write
<LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_read
<LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
<LI><a href="#[b6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_real_confirm
<LI><a href="#[b6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_crt
<LI><a href="#[bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_voice_task
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bc2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_recv_response
<LI><a href="#[bc1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio_process_header
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bbd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_request
<LI><a href="#[bbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice_send_userdata
<LI><a href="#[bba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_task
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[bb5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_request
<LI><a href="#[bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_userdata
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[baf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;url_encode_utf8_text
<LI><a href="#[ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_ssl
<LI><a href="#[ba3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_ssl
<LI><a href="#[ba2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ssl
<LI><a href="#[ba1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ssl
<LI><a href="#[ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_tcp
<LI><a href="#[b9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tcp
<LI><a href="#[b9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tcp
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
<LI><a href="#[b97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response
<LI><a href="#[b96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv_response_content
<LI><a href="#[b95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_get_content_len
<LI><a href="#[b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_request
<LI><a href="#[b92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_response_parse
<LI><a href="#[b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_retrieve_content
<LI><a href="#[b8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_recv
<LI><a href="#[b8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_userdata
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
<LI><a href="#[b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_tcp_send_all
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
<LI><a href="#[b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_host
<LI><a href="#[b86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_parse_url
<LI><a href="#[b85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_conn
</UL>

<P><STRONG><a name="[dbb]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[dbc]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bda]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dbd]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[23e]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_version
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_ap_cfg
<LI><a href="#[b53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_ext_key_usage
<LI><a href="#[b52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_key_usage
<LI><a href="#[b51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_info_cert_type
<LI><a href="#[b42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_key_size_helper
<LI><a href="#[b41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_sig_alg_gets
<LI><a href="#[b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_serial_gets
<LI><a href="#[b3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_dn_gets
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_numeric_string
<LI><a href="#[b6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_create
<LI><a href="#[b57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_info
<LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[bc3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_text2audio
<LI><a href="#[bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_voice2text_query
<LI><a href="#[bbe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_httpclient_voice2text
<LI><a href="#[bb7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_text2audio
<LI><a href="#[bb9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_image_verify
<LI><a href="#[bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_common
<LI><a href="#[bb3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_image_httpclient_send_header
<LI><a href="#[bb2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_get_token
<LI><a href="#[bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baidu_ai_auth
<LI><a href="#[b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_common
<LI><a href="#[b8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_header
</UL>

<P><STRONG><a name="[463]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __c89snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_version
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_version
</UL>

<P><STRONG><a name="[dbe]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[bdb]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dbf]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3f1]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sdio_reg_dbg
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
</UL>

<P><STRONG><a name="[dc0]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[dc1]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[be8]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[bca]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[bd2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bcb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[dc2]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[81e]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
</UL>

<P><STRONG><a name="[7fc]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_encode
</UL>

<P><STRONG><a name="[803]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_init
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_ctl
</UL>

<P><STRONG><a name="[81c]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[be7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[bcf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[be5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[be1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[be6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[be3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[bde]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[be2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[bdf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_init
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vbr_analysis
</UL>

<P><STRONG><a name="[be1]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[bdf]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[bdc]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[be2]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[bde]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[be3]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[be6]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[dc3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[dc4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[dc5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[bdd]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[be4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[be5]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[be4]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bdd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bd6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15c]"></a>ETH_Delay</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[17d]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[17c]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[192]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[190]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18e]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18c]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[19e]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[23f]"></a>plug_holes</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_slide_check
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[66]"></a>os_workqueue_thread</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = os_workqueue_thread &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeHeadList
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.text)
</UL>
<P><STRONG><a name="[25b]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, memory2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
</UL>

<P><STRONG><a name="[25a]"></a>prvHeapInit</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, memory2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_meminit2
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc2
</UL>

<P><STRONG><a name="[25e]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memory2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_get_free2
</UL>

<P><STRONG><a name="[288]"></a>netconn_recv_data</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
</UL>

<P><STRONG><a name="[290]"></a>netconn_close_shutdown</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, api_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_apimsg
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
</UL>

<P><STRONG><a name="[78]"></a>recv_raw</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>recv_udp</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = recv_udp &rArr; sys_mbox_trypost &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>recv_tcp</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>err_tcp</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[29f]"></a>do_writemore</STRONG> (Thumb, 994 bytes, Stack size 40 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_write
</UL>

<P><STRONG><a name="[74]"></a>sent_tcp</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = sent_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[2a2]"></a>do_close_internal</STRONG> (Thumb, 730 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[75]"></a>poll_tcp</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = poll_tcp &rArr; do_close_internal &rArr; tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_internal
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_writemore
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[2ab]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connected
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_connect
</UL>

<P><STRONG><a name="[7b]"></a>accept_function</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = accept_function &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[2af]"></a>pcb_new</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = pcb_new &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_newconn
</UL>

<P><STRONG><a name="[2b5]"></a>netconn_drain</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_delconn
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close
</UL>

<P><STRONG><a name="[7a]"></a>do_connected</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = do_connected &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>do_dns_found</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, api_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = do_dns_found &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(.text)
</UL>
<P><STRONG><a name="[2eb]"></a>tryget_socket</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sockets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
</UL>

<P><STRONG><a name="[2da]"></a>alloc_socket</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = alloc_socket &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[2db]"></a>free_socket</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[7d]"></a>event_callback</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[2ea]"></a>lwip_selscan</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = lwip_selscan &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[2ee]"></a>lwip_getaddrname</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, sockets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[7e]"></a>lwip_getsockopt_internal</STRONG> (Thumb, 812 bytes, Stack size 32 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = lwip_getsockopt_internal &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>lwip_setsockopt_internal</STRONG> (Thumb, 714 bytes, Stack size 48 bytes, sockets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = lwip_setsockopt_internal &rArr; igmp_leavegroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>tcpip_thread</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = tcpip_thread &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>pbuf_free_int</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[306]"></a>dhcp_delete_msg</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[307]"></a>dhcp_option_trailer</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[308]"></a>dhcp_option_byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_byte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[309]"></a>dhcp_option</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[30a]"></a>dhcp_option_short</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_short &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[30b]"></a>dhcp_create_msg</STRONG> (Thumb, 1120 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[30e]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[30d]"></a>dhcp_discover</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[311]"></a>dhcp_handle_nak</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[316]"></a>dhcp_check</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[318]"></a>dhcp_option_long</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_long &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[319]"></a>dhcp_select</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[31a]"></a>dhcp_handle_offer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[31c]"></a>dhcp_t1_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[31d]"></a>dhcp_rebind</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[31e]"></a>dhcp_t2_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[320]"></a>dhcp_reboot</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[322]"></a>dhcp_bind</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[324]"></a>dhcp_timeout</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[326]"></a>dhcp_handle_ack</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[32b]"></a>dhcp_parse_reply</STRONG> (Thumb, 1464 bytes, Stack size 80 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[83]"></a>dhcp_recv</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.text)
</UL>
<P><STRONG><a name="[32f]"></a>dhcp_decline</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[332]"></a>dns_parse_name</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dns.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[331]"></a>dns_compare_name</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[84]"></a>dns_recv</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = dns_recv &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(.text)
</UL>
<P><STRONG><a name="[335]"></a>dns_send</STRONG> (Thumb, 564 bytes, Stack size 56 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[336]"></a>dns_check_entry</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[337]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[339]"></a>dns_lookup</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dns_lookup &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[33a]"></a>dns_enqueue</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
</UL>

<P><STRONG><a name="[34d]"></a>pbuf_free_ooseq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[85]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(.text)
</UL>
<P><STRONG><a name="[34f]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_irq_save
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[366]"></a>tcp_close_shutdown</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[36f]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[86]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[374]"></a>tcp_kill_prio</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[375]"></a>tcp_kill_timewait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[377]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[378]"></a>tcp_receive</STRONG> (Thumb, 3898 bytes, Stack size 48 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[37d]"></a>tcp_parseopt</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[37c]"></a>tcp_process</STRONG> (Thumb, 1626 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[37f]"></a>tcp_listen_input</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[380]"></a>tcp_timewait_input</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[384]"></a>tcp_output_alloc_header</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[385]"></a>tcp_create_segment</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[386]"></a>tcp_write_checks</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_write_checks &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[388]"></a>tcp_output_segment</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[87]"></a>tcpip_tcp_timer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _timers.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>ip_reass_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ip_reass_timer &rArr; ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _timers.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>arp_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = arp_timer &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _timers.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>dhcp_timer_coarse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_coarse &rArr; dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _timers.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>dhcp_timer_fine</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = dhcp_timer_fine &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _timers.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>igmp_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = igmp_timer &rArr; igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _timers.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>dns_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dns_timer &rArr; dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_debug
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _timers.o(.text)
</UL>
<P><STRONG><a name="[38e]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[392]"></a>icmp_send_response</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[394]"></a>igmp_lookup_group</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = igmp_lookup_group &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[396]"></a>igmp_start_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmp_start_timer &rArr; get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[397]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer &rArr; get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>

<P><STRONG><a name="[398]"></a>igmp_remove_group</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = igmp_remove_group &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[39a]"></a>igmp_ip_output_if</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[39c]"></a>igmp_send</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[39d]"></a>igmp_timeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[39e]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[3a6]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ip_reass_dequeue_datagram &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[3a7]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[3a8]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[3a9]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[3aa]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 922 bytes, Stack size 48 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[3ab]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[3ac]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[8e]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(.text)
</UL>
<P><STRONG><a name="[3ad]"></a>low_level_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = low_level_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_dev
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[90]"></a>low_level_output</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = low_level_output &rArr; mac_data_xmit &rArr; __alloc_skb &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_data_xmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[3b3]"></a>low_level_input</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[3b5]"></a>etharp_free_entry</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>

<P><STRONG><a name="[3b6]"></a>etharp_find_entry</STRONG> (Thumb, 562 bytes, Stack size 48 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3b7]"></a>etharp_send_ip</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = etharp_send_ip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[3b8]"></a>etharp_update_arp_entry</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[3ba]"></a>etharp_arp_input</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[3bb]"></a>etharp_raw</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[3bc]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[3be]"></a>eth_low_level_input</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, eth_ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = eth_low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_input
</UL>

<P><STRONG><a name="[3c1]"></a>eth_low_level_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, eth_ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eth_low_level_init &rArr; ETH_DMARxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_ethernetif_init
</UL>

<P><STRONG><a name="[91]"></a>eth_low_level_output</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, eth_ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eth_low_level_output &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_ethernetif.o(.text)
</UL>
<P><STRONG><a name="[3cf]"></a>add_msg_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcpserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
</UL>

<P><STRONG><a name="[3d0]"></a>add_offer_options</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_offer_options
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
</UL>

<P><STRONG><a name="[3d1]"></a>add_end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dhcpserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
</UL>

<P><STRONG><a name="[3cd]"></a>create_msg</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = create_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
</UL>

<P><STRONG><a name="[3ce]"></a>send_offer</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = send_offer &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_offer_options
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[3d2]"></a>send_nak</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = send_nak &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[3d3]"></a>send_ack</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = send_ack &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_offer_options
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[3d4]"></a>parse_options</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = parse_options &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[3d5]"></a>parse_msg</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = parse_msg &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_insert_to_list
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_options
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[92]"></a>handle_dhcp</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = handle_dhcp &rArr; send_ack &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_offer
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcpserver.o(.text)
</UL>
<P><STRONG><a name="[3d8]"></a>wifi_softap_init_dhcps_lease</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, dhcpserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifi_softap_init_dhcps_lease
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_start
</UL>

<P><STRONG><a name="[402]"></a>woal_get_priv</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
</UL>

<P><STRONG><a name="[3df]"></a>woal_update_drv_tbl</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = woal_update_drv_tbl &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_sw
</UL>

<P><STRONG><a name="[3e1]"></a>woal_init_sw</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = woal_init_sw &rArr; timer_setup &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_setup
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_register
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_update_drv_tbl
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[3e4]"></a>woal_free_moal_handle</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = woal_free_moal_handle &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_read
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_unregister
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[3ee]"></a>woal_init_uap_dev</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = woal_init_uap_dev &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[3ef]"></a>woal_init_sta_dev</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = woal_init_sta_dev &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
</UL>

<P><STRONG><a name="[3f8]"></a>woal_add_card_dpc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188 + Unknown Stack Size
<LI>Call Chain = woal_add_card_dpc &rArr; woal_add_interface &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_interface
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[3fe]"></a>woal_init_fw_dpc</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = woal_init_fw_dpc &rArr; woal_moal_debug_info &rArr; woal_sdio_reg_dbg &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_set_init_param
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_init_fw
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_dnld_fw
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_moal_debug_info
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_priv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[404]"></a>woal_request_fw_dpc</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1212 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_sched_timeout
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_fw_dpc
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card_dpc
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw
</UL>

<P><STRONG><a name="[407]"></a>woal_init_fw</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244 + Unknown Stack Size
<LI>Call Chain = woal_init_fw &rArr; woal_request_fw &rArr; woal_request_fw_dpc &rArr;  woal_request_fw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[408]"></a>woal_fill_mlan_buffer</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = woal_fill_mlan_buffer &rArr; timeval_to_ktime
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_to_ktime
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gettimeofday
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_hard_start_xmit
</UL>

<P><STRONG><a name="[40a]"></a>woal_shutdown_fw</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, moal_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_switch_drv_mode
</UL>

<P><STRONG><a name="[41a]"></a>woal_hexval</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, moal_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_atox
</UL>

<P><STRONG><a name="[40b]"></a>woal_terminate_workqueue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = woal_terminate_workqueue &rArr; destroy_workqueue &rArr; del_event &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_workqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
</UL>

<P><STRONG><a name="[427]"></a>woal_cancel_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = woal_cancel_timer &rArr; del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reassociation_thread
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
</UL>

<P><STRONG><a name="[406]"></a>woal_sched_timeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, moal_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = woal_sched_timeout &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_remove_card
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_add_card
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_fw_dpc
</UL>

<P><STRONG><a name="[43e]"></a>woal_cfg80211_bss_role_cfg</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_bss_role_cfg &rArr; woal_init_priv &rArr; woal_cfg80211_uap_init_wiphy &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_role_cfg
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_reset_intf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_change_virtual_intf
</UL>

<P><STRONG><a name="[440]"></a>woal_cfg80211_custom_ie</STRONG> (Thumb, 518 bytes, Stack size 64 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_custom_ie &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
</UL>

<P><STRONG><a name="[443]"></a>woal_get_priv_by_mgmt_index</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, moal_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
</UL>

<P><STRONG><a name="[441]"></a>woal_filter_beacon_ies</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, moal_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = woal_filter_beacon_ies &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
</UL>

<P><STRONG><a name="[44f]"></a>region_string_2_region_code</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, moal_ioctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_region_code
</UL>

<P><STRONG><a name="[450]"></a>woal_cac_period_block_cmd</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = woal_cac_period_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
</UL>

<P><STRONG><a name="[452]"></a>woal_wait_ioctl_complete</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, moal_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
</UL>

<P><STRONG><a name="[48a]"></a>sdio_io_rw_ext_helper</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, moal_sdio_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; dma_start_send_data &rArr; wait_event_timeout &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writesb
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readsb
</UL>

<P><STRONG><a name="[4a1]"></a>woal_mod_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = woal_mod_timer &rArr; mod_timer &rArr; OSTmrStart &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_start_timer
</UL>

<P><STRONG><a name="[4ae]"></a>woal_get_priv</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, moal_shim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_recv_event
</UL>

<P><STRONG><a name="[4a5]"></a>woal_cancel_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, moal_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = woal_cancel_timer &rArr; del_timer &rArr; OSTmrStop &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_stop_timer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moal_free_timer
</UL>

<P><STRONG><a name="[4be]"></a>woal_cfg80211_get_encryption_mode</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = woal_cfg80211_get_encryption_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4bf]"></a>woal_cfg80211_is_alg_wep</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4b4]"></a>woal_cfg80211_channel_type_to_channel</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
</UL>

<P><STRONG><a name="[4bd]"></a>woal_channel_to_nl80211_channel_type</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4b3]"></a>woal_nl80211_iftype_to_mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4af]"></a>woal_wps_cfg</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = woal_wps_cfg &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
</UL>

<P><STRONG><a name="[4b0]"></a>woal_cfg80211_assoc_ies_cfg</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_assoc_ies_cfg &rArr; woal_set_get_gen_ie &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_wps_cfg
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4b1]"></a>woal_send_domain_info_cmd_fw</STRONG> (Thumb, 530 bytes, Stack size 64 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_send_domain_info_cmd_fw &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_band_cfg_to_ieee_band
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
</UL>

<P><STRONG><a name="[4b7]"></a>woal_cfg80211_set_auth</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_auth &rArr; woal_set_wpa_enable &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wpa_enable
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_encrypt_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4bb]"></a>woal_cfg80211_inform_ibss_bss</STRONG> (Thumb, 192 bytes, Stack size 280 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_inform_ibss_bss &rArr; woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_put_bss
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_inform_bss
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>

<P><STRONG><a name="[4bc]"></a>woal_cfg80211_assoc</STRONG> (Thumb, 1604 bytes, Stack size 208 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_assoc &rArr; woal_cfg80211_inform_ibss_bss &rArr; woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_essid
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_auth_mode
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_find_best_network
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_scan
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_11h_channel_check_ioctl
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_gen_ie
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_bss_start
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rf_channel
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_wep_keys
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_key
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_passphrase
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_ewpa_mode
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_inform_ibss_bss
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_set_auth
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc_ies_cfg
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_nl80211_iftype_to_mode
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_channel_to_nl80211_channel_type
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_is_alg_wep
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_encryption_mode
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_inform_bss_from_scan_result
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_join_ibss
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_connect
</UL>

<P><STRONG><a name="[4c0]"></a>woal_set_get_dtim_period</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_set_get_dtim_period &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
</UL>

<P><STRONG><a name="[4c1]"></a>woal_cfg80211_dump_station_info</STRONG> (Thumb, 324 bytes, Stack size 200 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_dump_station_info &rArr; woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_signal_info
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_dtim_period
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_get_station
</UL>

<P><STRONG><a name="[f6]"></a>woal_cfg80211_scan</STRONG> (Thumb, 488 bytes, Stack size 952 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1356 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_scan &rArr; woal_cfg80211_mgmt_frame_ie &rArr; woal_cfg80211_custom_ie &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_do_scan
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_mgmt_frame_ie
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>woal_cfg80211_connect</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_connect &rArr; woal_cfg80211_assoc &rArr; woal_cfg80211_inform_ibss_bss &rArr; woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_scan_type
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cancel_scan
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_connect_result
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>woal_cfg80211_disconnect</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_disconnect &rArr; woal_disconnect &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>woal_cfg80211_get_station</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_get_station &rArr; woal_cfg80211_dump_station_info &rArr; woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>woal_cfg80211_dump_station</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_dump_station &rArr; woal_cfg80211_dump_station_info &rArr; woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_dump_station_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>woal_cfg80211_join_ibss</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_join_ibss &rArr; woal_cfg80211_assoc &rArr; woal_cfg80211_inform_ibss_bss &rArr; woal_get_signal_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_ibss_joined
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_assoc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>woal_cfg80211_leave_ibss</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_leave_ibss &rArr; woal_disconnect &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>woal_cfg80211_set_power_mgmt</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_power_mgmt &rArr; woal_set_get_power_mgmt &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_power_mgmt
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>woal_cfg80211_set_cqm_rssi_config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, moal_sta_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_set_cqm_rssi_config &rArr; woal_set_rssi_threshold &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_rssi_threshold
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_netdev_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_sta_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[4c5]"></a>woal_get_second_channel_offset</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_beacon_config
</UL>

<P><STRONG><a name="[4c4]"></a>woal_cfg80211_beacon_config</STRONG> (Thumb, 846 bytes, Stack size 872 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = woal_cfg80211_beacon_config &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_11n_status
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_second_channel_offset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_cfg80211_add_beacon
</UL>

<P><STRONG><a name="[106]"></a>woal_uap_cfg80211_scan</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, moal_uap_cfg80211.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = woal_uap_cfg80211_scan &rArr; cfg80211_scan_done &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg80211_scan_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>woal_uap_cfg80211_connect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, moal_uap_cfg80211.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>woal_uap_cfg80211_disconnect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, moal_uap_cfg80211.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> moal_uap_cfg80211.o(.constdata)
</UL>
<P><STRONG><a name="[4c8]"></a>woal_uap_addba_param</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_uap_addba_param &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4c9]"></a>woal_uap_aggr_priotbl</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_uap_aggr_priotbl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4ca]"></a>woal_uap_addba_reject</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = woal_uap_addba_reject &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4cb]"></a>woal_uap_get_fw_info</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = woal_uap_get_fw_info &rArr; woal_request_get_fw_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_get_fw_info
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4cc]"></a>woal_uap_deep_sleep</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_deep_sleep &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4cd]"></a>woal_uap_txdatapause</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_txdatapause &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4ce]"></a>woal_uap_sdcmd52_rw</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = woal_uap_sdcmd52_rw &rArr; sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_writeb
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_f0_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4cf]"></a>woal_uap_snmp_mib</STRONG> (Thumb, 322 bytes, Stack size 176 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = woal_uap_snmp_mib &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4d0]"></a>woal_uap_tx_bf_cfg</STRONG> (Thumb, 174 bytes, Stack size 160 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = woal_uap_tx_bf_cfg &rArr; woal_set_get_tx_bf_cfg &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_tx_bf_cfg
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4d1]"></a>woal_uap_hs_cfg</STRONG> (Thumb, 316 bytes, Stack size 208 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = woal_uap_hs_cfg &rArr; woal_set_get_hs_params &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_hs_params
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_set_para
</UL>

<P><STRONG><a name="[4d2]"></a>woal_uap_hs_set_para</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = woal_uap_hs_set_para &rArr; woal_uap_hs_cfg &rArr; woal_set_get_hs_params &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4d3]"></a>woal_uap_mgmt_frame_control</STRONG> (Thumb, 150 bytes, Stack size 856 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124 + Unknown Stack Size
<LI>Call Chain = woal_uap_mgmt_frame_control &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_sys_config_invalid_data
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_get_sys_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4d4]"></a>woal_uap_tx_rate_cfg</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = woal_uap_tx_rate_cfg &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4d5]"></a>woal_uap_antenna_cfg</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = woal_uap_antenna_cfg &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_ioctl
</UL>

<P><STRONG><a name="[4d6]"></a>woal_uap_ioctl</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = woal_uap_ioctl &rArr; woal_uap_mgmt_frame_control &rArr; woal_set_get_sys_config &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_antenna_cfg
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_rate_cfg
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_mgmt_frame_control
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_set_para
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_hs_cfg
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_tx_bf_cfg
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_snmp_mib
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_sdcmd52_rw
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_txdatapause
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_deep_sleep
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_get_fw_info
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_reject
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_aggr_priotbl
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_addba_param
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4d7]"></a>woal_uap_sta_deauth_ioctl</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_sta_deauth_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4d8]"></a>woal_uap_radio_ctl</STRONG> (Thumb, 188 bytes, Stack size 184 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = woal_uap_radio_ctl &rArr; woal_get_bss_info &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_get_bss_info
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4d9]"></a>woal_uap_bss_ctrl_ioctl</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = woal_uap_bss_ctrl_ioctl &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4da]"></a>woal_uap_power_mode_ioctl</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = woal_uap_power_mode_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4db]"></a>woal_uap_bss_cfg_ioctl</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_bss_cfg_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4dc]"></a>woal_uap_get_sta_list_ioctl</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = woal_uap_get_sta_list_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4dd]"></a>woal_uap_set_wapi_key_ioctl</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = woal_uap_set_wapi_key_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi
</UL>

<P><STRONG><a name="[4de]"></a>woal_enable_wapi</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = woal_enable_wapi &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
</UL>

<P><STRONG><a name="[4df]"></a>woal_uap_set_wapi_flag_ioctl</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = woal_uap_set_wapi_flag_ioctl &rArr; woal_enable_wapi &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_set_wapi_enable
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_request_ioctl
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_alloc_mlan_ioctl_req
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_enable_wapi
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_bss_ctrl
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi
</UL>

<P><STRONG><a name="[4e0]"></a>woal_uap_set_wapi</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, moal_uap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = woal_uap_set_wapi &rArr; woal_uap_set_wapi_flag_ioctl &rArr; woal_enable_wapi &rArr; woal_uap_bss_ctrl &rArr; woal_11h_channel_check_ioctl &rArr; woal_request_ioctl &rArr; woal_wait_ioctl_complete &rArr; wait_event &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_from_user
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_flag_ioctl
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_set_wapi_key_ioctl
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;woal_uap_do_ioctl
</UL>

<P><STRONG><a name="[4fc]"></a>wlan_11d_region_2_code</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11d_region_2_code
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
</UL>

<P><STRONG><a name="[4ea]"></a>wlan_11d_code_2_region</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_11d_code_2_region
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_generate_domain_info
</UL>

<P><STRONG><a name="[4e7]"></a>wlan_11d_channel_known</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_get_scan_type
</UL>

<P><STRONG><a name="[4f8]"></a>wlan_11d_generate_parsed_region_chan</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11d_generate_parsed_region_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
</UL>

<P><STRONG><a name="[4e9]"></a>wlan_11d_generate_domain_info</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_11d_generate_domain_info &rArr; wlan_11d_code_2_region
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_code_2_region
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
</UL>

<P><STRONG><a name="[4eb]"></a>wlan_11d_update_chan_pwr_table</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wlan_11d_update_chan_pwr_table &rArr; wlan_get_txpwr_of_chan_from_cfp
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_txpwr_of_chan_from_cfp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[4ee]"></a>wlan_11d_get_chan</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11d_get_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_domain_info
</UL>

<P><STRONG><a name="[4ef]"></a>wlan_11d_process_country_info</STRONG> (Thumb, 298 bytes, Stack size 200 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wlan_11d_process_country_info &rArr; wlan_11d_parse_domain_info &rArr; wlan_11d_get_chan
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[4f1]"></a>wlan_11d_copy_chan_power</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mlan_11d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_sort_parsed_region_chan
</UL>

<P><STRONG><a name="[4f0]"></a>wlan_11d_sort_parsed_region_chan</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11d_sort_parsed_region_chan
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_copy_chan_power
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
</UL>

<P><STRONG><a name="[4f2]"></a>wlan_11d_send_domain_info</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_dnld_countryinfo
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_create_dnld_countryinfo
</UL>

<P><STRONG><a name="[4fe]"></a>wlan_11d_set_domain_info</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, mlan_11d.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11d_set_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
</UL>

<P><STRONG><a name="[50e]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cleanup
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_find_dfs_timestamp
</UL>

<P><STRONG><a name="[50c]"></a>util_unlink_list</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cleanup
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_remove_dfs_timestamp
</UL>

<P><STRONG><a name="[509]"></a>wlan_count_priv_cond</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_radar_det_state
</UL>

<P><STRONG><a name="[536]"></a>wlan_get_privs_by_two_cond</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_get_privs_by_two_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_dfs_event_preprocessing
</UL>

<P><STRONG><a name="[512]"></a>wlan_11h_get_random_num</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11h_get_random_num
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_switch_non_dfs_chan
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_uap_start_channel
</UL>

<P><STRONG><a name="[507]"></a>wlan_11h_convert_ieee_to_mrvl_ie</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_convert_ieee_to_mrvl_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
</UL>

<P><STRONG><a name="[506]"></a>wlan_11h_set_ibss_dfs_ie</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_set_ibss_dfs_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
</UL>

<P><STRONG><a name="[504]"></a>wlan_11h_set_supp_channels_ie</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11h_set_supp_channels_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_infra_join
</UL>

<P><STRONG><a name="[527]"></a>wlan_11h_cmd_tpc_request</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_cmd_tpc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
</UL>

<P><STRONG><a name="[528]"></a>wlan_11h_cmd_tpc_info</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_11h_cmd_tpc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
</UL>

<P><STRONG><a name="[529]"></a>wlan_11h_cmd_chan_sw_ann</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_11h_cmd_chan_sw_ann
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
</UL>

<P><STRONG><a name="[501]"></a>wlan_11h_cmd_chan_rpt_req</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_11h_cmd_chan_rpt_req &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cmd_process
</UL>

<P><STRONG><a name="[503]"></a>wlan_11h_set_local_power_constraint_tlv</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_11h_set_local_power_constraint_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_adhoc
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_infra_join
</UL>

<P><STRONG><a name="[502]"></a>wlan_11h_process_infra_join</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_11h_process_infra_join &rArr; wlan_11h_set_supp_channels_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_local_power_constraint_tlv
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_supp_channels_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
</UL>

<P><STRONG><a name="[505]"></a>wlan_11h_process_adhoc</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_11h_process_adhoc &rArr; wlan_11h_set_ibss_dfs_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_local_power_constraint_tlv
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_set_ibss_dfs_ie
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_convert_ieee_to_mrvl_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
</UL>

<P><STRONG><a name="[511]"></a>wlan_11h_is_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_start
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_uap_start_channel
</UL>

<P><STRONG><a name="[525]"></a>wlan_11h_is_slave_radar_det_active</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_join
</UL>

<P><STRONG><a name="[96]"></a>wlan_11h_is_slave_active_on_dfs_chan</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_is_slave_active_on_dfs_chan &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>wlan_11h_is_master_active_on_dfs_chan</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_is_master_active_on_dfs_chan &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>wlan_11h_is_dfs_master</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_slave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>wlan_11h_is_dfs_slave</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11h_is_dfs_slave
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_dfs_master
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_slave_radar_det
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>wlan_is_intf_active</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mlan_11h.o(.text)
</UL>
<P><STRONG><a name="[50a]"></a>wlan_11h_get_current_radar_detect_flags</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mlan_11h.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_radar_det_state
</UL>

<P><STRONG><a name="[508]"></a>wlan_11h_check_radar_det_state</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_11h_check_radar_det_state &rArr; wlan_count_priv_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_current_radar_detect_flags
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
</UL>

<P><STRONG><a name="[52e]"></a>wlan_only_uap_priv_in_list</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_only_uap_priv_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>

<P><STRONG><a name="[531]"></a>wlan_11h_prepare_custom_ie_chansw</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11h_prepare_custom_ie_chansw
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>

<P><STRONG><a name="[50b]"></a>wlan_11h_remove_dfs_timestamp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_remove_dfs_timestamp &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
</UL>

<P><STRONG><a name="[50d]"></a>wlan_11h_find_dfs_timestamp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_add_dfs_timestamp
</UL>

<P><STRONG><a name="[510]"></a>wlan_11h_get_uap_start_channel</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_11h_get_uap_start_channel &rArr; wlan_11h_is_channel_under_nop &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_enabled
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_random_num
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
</UL>

<P><STRONG><a name="[513]"></a>wlan_11h_add_dfs_timestamp</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, mlan_11h.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_11h_add_dfs_timestamp &rArr; wlan_11h_find_dfs_timestamp &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_find_dfs_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_handling
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_handle_event_chanrpt_ready
</UL>

<P><STRONG><a name="[53d]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_txbastream_tbl
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_rxreorder_tbl
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deleteall_txbastream_tbl
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_status
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_txbastreamptr_valid
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_reorder_tbl
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_txbastream_tbl
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_update_addba_request
</UL>

<P><STRONG><a name="[557]"></a>wlan_11n_ioctl_max_tx_buf_size</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_11n_ioctl_max_tx_buf_size
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[554]"></a>wlan_11n_ioctl_htusrcfg</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11n_ioctl_htusrcfg
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[538]"></a>wlan_11n_ioctl_amsdu_aggr_ctrl</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_11n_ioctl_amsdu_aggr_ctrl &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[539]"></a>wlan_11n_ioctl_httxcfg</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_11n_ioctl_httxcfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[559]"></a>wlan_11n_ioctl_tx_bf_cap</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11n_ioctl_tx_bf_cap
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[53a]"></a>wlan_11n_ioctl_tx_bf_cfg</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_11n_ioctl_tx_bf_cfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[55a]"></a>wlan_11n_ioctl_stream_cfg</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_11n_ioctl_stream_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[53c]"></a>wlan_11n_update_addba_request</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_11n_update_addba_request &rArr; wlan_send_addba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_addba_param
</UL>

<P><STRONG><a name="[53e]"></a>wlan_11n_ioctl_addba_param</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wlan_11n_ioctl_addba_param &rArr; wlan_11n_update_addba_request &rArr; wlan_send_addba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_update_addba_request
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[556]"></a>wlan_11n_ioctl_addba_reject</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_11n_ioctl_addba_reject
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[540]"></a>wlan_send_delba_to_entry_in_txbastream_tbl</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wlan_send_delba_to_entry_in_txbastream_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
</UL>

<P><STRONG><a name="[541]"></a>wlan_send_delba_to_entry_in_reorder_tbl</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wlan_send_delba_to_entry_in_reorder_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_ioctl_delba
</UL>

<P><STRONG><a name="[542]"></a>wlan_11n_ioctl_delba</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wlan_11n_ioctl_delba &rArr; wlan_send_delba_to_entry_in_reorder_tbl &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_reorder_tbl
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba_to_entry_in_txbastream_tbl
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[543]"></a>wlan_11n_ioctl_rejectaddbareq</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_11n_ioctl_rejectaddbareq &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[555]"></a>wlan_11n_ioctl_aggr_prio_tbl</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_11n_ioctl_aggr_prio_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[558]"></a>wlan_11n_ioctl_supported_mcs_set</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11n_ioctl_supported_mcs_set
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cfg_ioctl
</UL>

<P><STRONG><a name="[544]"></a>wlan_is_txbastreamptr_valid</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_is_txbastreamptr_valid &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_txbastream_tbl_entry
</UL>

<P><STRONG><a name="[545]"></a>wlan_11n_get_txbastream_status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_11n_get_txbastream_status &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_delba
</UL>

<P><STRONG><a name="[547]"></a>wlan_fill_cap_info</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, mlan_11n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_fill_cap_info
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
</UL>

<P><STRONG><a name="[54a]"></a>util_init_list</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mlan_11n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deleteall_txbastream_tbl
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_txbastream_tbl
</UL>

<P><STRONG><a name="[569]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
</UL>

<P><STRONG><a name="[56b]"></a>wlan_11n_form_amsdu_pkt</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11n_form_amsdu_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
</UL>

<P><STRONG><a name="[561]"></a>wlan_11n_form_amsdu_txpd</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_11n_form_amsdu_txpd &rArr; wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_compute_driver_packet_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
</UL>

<P><STRONG><a name="[564]"></a>wlan_11n_get_num_aggrpkts</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_11n_get_num_aggrpkts
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
</UL>

<P><STRONG><a name="[56a]"></a>util_dequeue_list</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, mlan_11n_aggr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = util_dequeue_list
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
</UL>

<P><STRONG><a name="[57a]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_rxreorder_tbl_no_drop_flag
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_reorder_tbl
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
</UL>

<P><STRONG><a name="[570]"></a>wlan_11n_dispatch_amsdu_pkt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_deaggregate_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>

<P><STRONG><a name="[571]"></a>wlan_11n_dispatch_pkt</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_rx_packet
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_amsdu_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_scan_and_dispatch
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
</UL>

<P><STRONG><a name="[57f]"></a>mlan_11n_rxreorder_timer_restart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mlan_11n_rxreorder_timer_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
</UL>

<P><STRONG><a name="[574]"></a>wlan_11n_dispatch_pkt_until_start_win</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_data
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_delete_rxreorder_tbl_entry
</UL>

<P><STRONG><a name="[577]"></a>wlan_11n_display_tbl_ptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_data
</UL>

<P><STRONG><a name="[575]"></a>wlan_11n_scan_and_dispatch</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wlan_11n_scan_and_dispatch &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_rxreorder_pkt
</UL>

<P><STRONG><a name="[576]"></a>wlan_11n_delete_rxreorder_tbl_entry</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_reorder_tbl
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_reorder_tbl
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_11n_addba_resp
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_11n_delete_bastream_tbl
</UL>

<P><STRONG><a name="[578]"></a>wlan_11n_find_last_seqnum</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_data
</UL>

<P><STRONG><a name="[99]"></a>wlan_flush_data</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wlan_flush_data &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_find_last_seqnum
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_display_tbl_ptr
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_11n_rxreorder.o(.text)
</UL>
<P><STRONG><a name="[57b]"></a>wlan_11n_create_rxreorder_tbl</STRONG> (Thumb, 422 bytes, Stack size 80 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wlan_11n_create_rxreorder_tbl &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_rxreorder_tbl
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_dispatch_pkt_until_start_win
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_11n_addba_rspgen
</UL>

<P><STRONG><a name="[57c]"></a>util_init_list</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mlan_11n_rxreorder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_cleanup_reorder_tbl
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_rxreorder_tbl
</UL>

<P><STRONG><a name="[58b]"></a>wlan_copy_rates</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_copy_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_supported_rates
</UL>

<P><STRONG><a name="[58e]"></a>wlan_count_priv_cond</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_count_priv_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_freq
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
</UL>

<P><STRONG><a name="[589]"></a>wlan_memchr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_data_rate_to_index
</UL>

<P><STRONG><a name="[591]"></a>wlan_get_region_cfp_table</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>

<P><STRONG><a name="[592]"></a>wlan_cfp_copy_dynamic</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, mlan_cfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cfp_copy_dynamic
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>

<P><STRONG><a name="[598]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pending_ioctl_cmd
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
</UL>

<P><STRONG><a name="[59e]"></a>util_enqueue_list_tail</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_enqueue_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_pending_q
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
</UL>

<P><STRONG><a name="[599]"></a>util_unlink_list</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_all_pending_cmd
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_cmd_node
</UL>

<P><STRONG><a name="[595]"></a>wlan_isxdigit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_atox
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_cal_cfg
</UL>

<P><STRONG><a name="[5a8]"></a>wlan_get_priv_by_id</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_get_priv_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
</UL>

<P><STRONG><a name="[5a4]"></a>wlan_get_priv</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adapter_init_cmd
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sleep_confirm_resp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_timeout_func
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_event
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_sleep_confirm_cmd
</UL>

<P><STRONG><a name="[594]"></a>wlan_hexval</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_atox
</UL>

<P><STRONG><a name="[596]"></a>wlan_parse_cal_cfg</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_parse_cal_cfg &rArr; wlan_atox
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_atox
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_isxdigit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_cfg_data
</UL>

<P><STRONG><a name="[5aa]"></a>wlan_init_cmd_node</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_init_cmd_node
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[597]"></a>wlan_get_cmd_node</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_get_cmd_node &rArr; wlan_alloc_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_alloc_mlan_buffer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[59a]"></a>wlan_clean_cmd_node</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
</UL>

<P><STRONG><a name="[59c]"></a>wlan_get_pending_ioctl_cmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_get_pending_ioctl_cmd &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cancel_pending_ioctl
</UL>

<P><STRONG><a name="[5b0]"></a>wlan_ret_host_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_host_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_cmdresp
</UL>

<P><STRONG><a name="[5ab]"></a>wlan_cmd_host_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_host_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>

<P><STRONG><a name="[59f]"></a>wlan_dnld_cmd_to_fw</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_dnld_cmd_to_fw &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_exec_next_cmd
</UL>

<P><STRONG><a name="[5a3]"></a>wlan_dnld_sleep_confirm_cmd</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, mlan_cmdevt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_dnld_sleep_confirm_cmd &rArr; wlan_host_sleep_activated_event &rArr; wlan_update_rxreorder_tbl &rArr; wlan_set_rxreorder_tbl_no_drop_flag &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_host_sleep_activated_event
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_priv
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_ps_cond
</UL>

<P><STRONG><a name="[5c5]"></a>util_init_list_head</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_init_list_head
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_lock_list
</UL>

<P><STRONG><a name="[5d5]"></a>util_free_list_head</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = util_free_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
</UL>

<P><STRONG><a name="[5c9]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_fw
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_bsspriotbl
</UL>

<P><STRONG><a name="[5d3]"></a>util_scalar_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_scalar_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_lock_list
</UL>

<P><STRONG><a name="[5c7]"></a>wlan_add_bsspriotbl</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_add_bsspriotbl
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
</UL>

<P><STRONG><a name="[5c8]"></a>wlan_delete_bsspriotbl</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_delete_bsspriotbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
</UL>

<P><STRONG><a name="[5c6]"></a>util_init_list</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mlan_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_bsspriotbl
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list_head
</UL>

<P><STRONG><a name="[5d6]"></a>util_scalar_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mlan_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = util_scalar_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_lock_list
</UL>

<P><STRONG><a name="[5e3]"></a>wlan_cmd_append_generic_ie</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_append_generic_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[5e4]"></a>wlan_cmd_append_tsf_tlv</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_cmd_append_tsf_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[5de]"></a>wlan_get_common_rates</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_get_common_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
</UL>

<P><STRONG><a name="[5dd]"></a>wlan_setup_rates_from_bssdesc</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = wlan_setup_rates_from_bssdesc &rArr; wlan_get_active_data_rates &rArr; wlan_get_supported_rates &rArr; wlan_copy_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_common_rates
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[5e6]"></a>wlan_update_tsf_timestamps</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_update_tsf_timestamps
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_associate
</UL>

<P><STRONG><a name="[5e2]"></a>wlan_cmd_append_wapi_ie</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mlan_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_append_wapi_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_associate
</UL>

<P><STRONG><a name="[5df]"></a>wlan_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_setup_rates_from_bssdesc
</UL>

<P><STRONG><a name="[5f6]"></a>wlan_meas_dump_meas_req</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mlan_meas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmd_request
</UL>

<P><STRONG><a name="[5f4]"></a>wlan_meas_dump_meas_rpt</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mlan_meas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmdresp_get_report
</UL>

<P><STRONG><a name="[5f3]"></a>wlan_meas_cmdresp_get_report</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mlan_meas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_meas_cmdresp_get_report &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_dump_meas_rpt
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmdresp_process
</UL>

<P><STRONG><a name="[5f5]"></a>wlan_meas_cmd_request</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_meas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_meas_cmd_request
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_dump_meas_req
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmd_process
</UL>

<P><STRONG><a name="[5f9]"></a>wlan_meas_cmd_get_report</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mlan_meas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_meas_cmd_get_report
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_meas_cmd_process
</UL>

<P><STRONG><a name="[607]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_station_list_empty
</UL>

<P><STRONG><a name="[60a]"></a>util_unlink_list</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_list
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delete_station_entry
</UL>

<P><STRONG><a name="[5fc]"></a>wlan_is_custom_ie_index_unused</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_is_custom_ie_index_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_custom_ioctl_get_autoidx
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
</UL>

<P><STRONG><a name="[5fb]"></a>wlan_custom_ioctl_get_autoidx</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_custom_ioctl_get_autoidx &rArr; wlan_is_custom_ie_index_unused
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_custom_ie_index_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
</UL>

<P><STRONG><a name="[602]"></a>wlan_custom_ioctl_auto_delete</STRONG> (Thumb, 582 bytes, Stack size 584 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wlan_custom_ioctl_auto_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
</UL>

<P><STRONG><a name="[615]"></a>wlan_rate_ioctl_get_rate_value</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_rate_ioctl_get_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>

<P><STRONG><a name="[616]"></a>wlan_rate_ioctl_set_rate_value</STRONG> (Thumb, 338 bytes, Stack size 80 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wlan_rate_ioctl_set_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_data_rate_to_index
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>

<P><STRONG><a name="[617]"></a>wlan_rate_ioctl_get_rate_index</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_rate_ioctl_get_rate_index &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>

<P><STRONG><a name="[618]"></a>wlan_rate_ioctl_set_rate_index</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, mlan_misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_rate_ioctl_set_rate_index &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>

<P><STRONG><a name="[633]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[634]"></a>util_dequeue_list</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = util_dequeue_list
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[61c]"></a>search_oui_in_ie</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = search_oui_in_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_wpa_oui_present
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_rsn_oui_present
</UL>

<P><STRONG><a name="[61b]"></a>is_rsn_oui_present</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = is_rsn_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_oui_in_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>

<P><STRONG><a name="[61d]"></a>is_wpa_oui_present</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_oui_in_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>

<P><STRONG><a name="[621]"></a>wlan_is_band_compatible</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bgscan_create_channel_list
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>

<P><STRONG><a name="[624]"></a>radio_type_to_band</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_channel_list
</UL>

<P><STRONG><a name="[61f]"></a>wlan_find_best_network_in_list</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_best_network
</UL>

<P><STRONG><a name="[620]"></a>wlan_scan_create_channel_list</STRONG> (Thumb, 538 bytes, Stack size 64 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_get_scan_type
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[628]"></a>wlan_add_wps_probe_request_ie</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_add_wps_probe_request_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[623]"></a>wlan_scan_channel_list</STRONG> (Thumb, 880 bytes, Stack size 112 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wlan_scan_channel_list &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_chan_blacklisted
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_csa_closed_channel
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[626]"></a>wlan_scan_setup_scan_config</STRONG> (Thumb, 1032 bytes, Stack size 128 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_supported_rates
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_fill_ht_cap_tlv
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_wps_probe_request_ie
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_create_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
</UL>

<P><STRONG><a name="[636]"></a>wlan_ret_802_11_scan_get_tlv_ptrs</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_scan_get_tlv_ptrs
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[629]"></a>wlan_interpret_bss_desc_with_ie</STRONG> (Thumb, 1372 bytes, Stack size 120 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_interpret_bss_desc_with_ie &rArr; wlan_11h_process_bss_elem
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_process_bss_elem
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
</UL>

<P><STRONG><a name="[62c]"></a>wlan_adjust_ie_in_bss_entry</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
</UL>

<P><STRONG><a name="[62b]"></a>wlan_ret_802_11_scan_store_beacon</STRONG> (Thumb, 1182 bytes, Stack size 72 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_ret_802_11_scan_store_beacon
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adjust_ie_in_bss_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_parse_ext_scan_result
</UL>

<P><STRONG><a name="[62f]"></a>wlan_restore_curr_bcn</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_restore_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_process_results
</UL>

<P><STRONG><a name="[62e]"></a>wlan_scan_process_results</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wlan_scan_process_results &rArr; wlan_11d_prepare_dnld_domain_info_cmd &rArr; wlan_11d_parse_dnld_countryinfo &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_save_curr_bcn
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_prepare_dnld_domain_info_cmd
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_restore_curr_bcn
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan
</UL>

<P><STRONG><a name="[631]"></a>wlan_scan_delete_table_entry</STRONG> (Thumb, 972 bytes, Stack size 32 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_scan_delete_table_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_delete_ssid_table_entry
</UL>

<P><STRONG><a name="[630]"></a>wlan_scan_delete_ssid_table_entry</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wlan_scan_delete_ssid_table_entry &rArr; wlan_find_ssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_delete_table_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_specific_ssid
</UL>

<P><STRONG><a name="[638]"></a>wlan_parse_ext_scan_result</STRONG> (Thumb, 828 bytes, Stack size 144 bytes, mlan_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_802_11_scan_store_beacon
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_interpret_bss_desc_with_ie
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_type_to_band
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_event_ext_scan_report
</UL>

<P><STRONG><a name="[63a]"></a>wlan_bgscan_create_channel_list</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, mlan_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_bgscan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bg_scan_type_is_passive
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_get_scan_type
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_band_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
</UL>

<P><STRONG><a name="[627]"></a>wlan_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_bgscan_config
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_setup_scan_config
</UL>

<P><STRONG><a name="[64a]"></a>wlan_sdio_init_ioport</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_sdio_init_ioport
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_probe
</UL>

<P><STRONG><a name="[651]"></a>wlan_write_data_sync</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_write_data_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>

<P><STRONG><a name="[64e]"></a>wlan_get_rd_port</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_get_rd_port
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
</UL>

<P><STRONG><a name="[650]"></a>wlan_get_wr_port_data</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_get_wr_port_data
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
</UL>

<P><STRONG><a name="[640]"></a>wlan_sdio_poll_card_status</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_sdio_poll_card_status &rArr; wlan_delay_func
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delay_func
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prog_fw_w_helper
</UL>

<P><STRONG><a name="[647]"></a>wlan_sdio_read_fw_status</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_sdio_read_fw_status
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_fw_status
</UL>

<P><STRONG><a name="[643]"></a>wlan_sdio_disable_host_int_mask</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_sdio_disable_host_int_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disable_host_int
</UL>

<P><STRONG><a name="[64c]"></a>wlan_sdio_enable_host_int_mask</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_sdio_enable_host_int_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_host_int
</UL>

<P><STRONG><a name="[64f]"></a>wlan_sdio_card_to_host</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_sdio_card_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
</UL>

<P><STRONG><a name="[641]"></a>wlan_prog_fw_w_helper</STRONG> (Thumb, 526 bytes, Stack size 144 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_prog_fw_w_helper &rArr; wlan_sdio_poll_card_status &rArr; wlan_delay_func
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_delay_func
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_poll_card_status
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dnld_fw
</UL>

<P><STRONG><a name="[642]"></a>wlan_disable_host_int</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_disable_host_int &rArr; wlan_sdio_disable_host_int_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_disable_host_int_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_probe
</UL>

<P><STRONG><a name="[644]"></a>wlan_decode_rx_packet</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, mlan_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = wlan_decode_rx_packet &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_sleep_confirm_resp
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_rx_packet
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_int_status
</UL>

<P><STRONG><a name="[656]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_shim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[657]"></a>wlan_get_priv</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mlan_shim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlan_main_process
</UL>

<P><STRONG><a name="[674]"></a>wlan_cmd_802_11_rssi_info</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_cmd_802_11_rssi_info
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[665]"></a>wlan_cmd_mac_control</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_mac_control
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[675]"></a>wlan_cmd_802_11_snmp_mib</STRONG> (Thumb, 304 bytes, Stack size 20 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_802_11_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[673]"></a>wlan_cmd_802_11_get_log</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[66a]"></a>wlan_cmd_tx_power_cfg</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_tx_power_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[66b]"></a>wlan_cmd_802_11_rf_tx_power</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_802_11_rf_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[66d]"></a>wlan_cmd_802_11_hs_cfg</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_802_11_hs_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[666]"></a>wlan_cmd_802_11_mac_address</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_802_11_mac_address
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[66e]"></a>wlan_cmd_802_11_sleep_period</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_802_11_sleep_period
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[66f]"></a>wlan_cmd_802_11_sleep_params</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_802_11_sleep_params
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[667]"></a>wlan_cmd_mac_multicast_adr</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_cmd_mac_multicast_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[672]"></a>wlan_cmd_802_11_deauthenticate</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_cmd_802_11_deauthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[661]"></a>wlan_cmd_802_11_ad_hoc_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_cmd_802_11_ad_hoc_stop &rArr; wlan_11h_activate &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[663]"></a>wlan_set_keyparamset_wep</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_set_keyparamset_wep
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cmd_802_11_key_material
</UL>

<P><STRONG><a name="[662]"></a>wlan_cmd_802_11_key_material</STRONG> (Thumb, 710 bytes, Stack size 56 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_cmd_802_11_key_material &rArr; wlan_set_keyparamset_wep
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_keyparamset_wep
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[67a]"></a>wlan_cmd_802_11_supplicant_pmk</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_cmd_802_11_supplicant_pmk
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[67b]"></a>wlan_cmd_802_11_supplicant_profile</STRONG> (Thumb, 164 bytes, Stack size 28 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wlan_cmd_802_11_supplicant_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[677]"></a>wlan_cmd_802_11_rf_channel</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_802_11_rf_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[686]"></a>wlan_cmd_ibss_coalescing_status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_cmd_ibss_coalescing_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[687]"></a>wlan_cmd_mgmt_ie_list</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_cmd_mgmt_ie_list
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[689]"></a>wlan_cmd_sysclock_cfg</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_sysclock_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[68e]"></a>wlan_cmd_subscribe_event</STRONG> (Thumb, 610 bytes, Stack size 68 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = wlan_cmd_subscribe_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[68f]"></a>wlan_cmd_otp_user_data</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_cmd_otp_user_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[68c]"></a>wlan_cmd_inactivity_timeout</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, mlan_sta_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_cmd_inactivity_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_prepare_cmd
</UL>

<P><STRONG><a name="[692]"></a>wlan_process_cmdresp_error</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_process_cmdresp_error &rArr; wlan_flush_scan_queue &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6a5]"></a>wlan_ret_802_11_rssi_info</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_rssi_info
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[69b]"></a>wlan_ret_mac_control</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6a6]"></a>wlan_ret_802_11_snmp_mib</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6a4]"></a>wlan_ret_get_log</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_get_log
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[694]"></a>wlan_get_power_level</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_get_power_level
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_tx_power_cfg
</UL>

<P><STRONG><a name="[693]"></a>wlan_ret_tx_power_cfg</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wlan_ret_tx_power_cfg &rArr; wlan_get_power_level
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_power_level
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6a0]"></a>wlan_ret_802_11_rf_tx_power</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_ret_802_11_rf_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6a2]"></a>wlan_ret_802_11_sleep_period</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_ret_802_11_sleep_period
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6a3]"></a>wlan_ret_802_11_sleep_params</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_ret_802_11_sleep_params
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[69c]"></a>wlan_ret_802_11_mac_address</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_mac_address
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[69d]"></a>wlan_ret_mac_multicast_adr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[695]"></a>wlan_ret_802_11_deauthenticate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = wlan_ret_802_11_deauthenticate &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[696]"></a>wlan_ret_802_11_ad_hoc_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = wlan_ret_802_11_ad_hoc_stop &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6ac]"></a>wlan_ret_802_11_key_material</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_802_11_key_material
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[697]"></a>wlan_ret_802_11_supplicant_pmk</STRONG> (Thumb, 496 bytes, Stack size 184 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wlan_ret_802_11_supplicant_pmk &rArr; wlan_find_bss &rArr; wlan_find_best_network &rArr; wlan_find_best_network_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6ad]"></a>wlan_ret_802_11_supplicant_profile</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_ret_802_11_supplicant_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6a8]"></a>wlan_ret_802_11_rf_channel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_802_11_rf_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6b7]"></a>wlan_ret_ibss_coalescing_status</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_ret_ibss_coalescing_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[699]"></a>wlan_ret_mgmt_ie_list</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = wlan_ret_mgmt_ie_list &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6ba]"></a>wlan_ret_sysclock_cfg</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_ret_sysclock_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6bd]"></a>wlan_ret_inactivity_timeout</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_inactivity_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6be]"></a>wlan_ret_subscribe_event</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_ret_subscribe_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6bf]"></a>wlan_ret_otp_user_data</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mlan_sta_cmdresp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_ret_otp_user_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_cmdresp
</UL>

<P><STRONG><a name="[6c2]"></a>wlan_handle_disconnect_event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mlan_sta_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wlan_handle_disconnect_event &rArr; wlan_reset_connect_state &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reset_connect_state
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_process_event
</UL>

<P><STRONG><a name="[6c4]"></a>wlan_enable_aes_key</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wlan_enable_aes_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
</UL>

<P><STRONG><a name="[6c5]"></a>wlan_get_info_signal</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_get_info_signal &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
</UL>

<P><STRONG><a name="[6c6]"></a>wlan_get_info_stats</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_get_info_stats &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
</UL>

<P><STRONG><a name="[6c7]"></a>wlan_get_info_bss_info</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wlan_get_info_bss_info &rArr; wlan_find_ssid_in_list &rArr; wlan_is_network_compatible &rArr; is_wpa_oui_present &rArr; search_oui_in_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ioctl
</UL>

<P><STRONG><a name="[6c8]"></a>wlan_get_info_ioctl</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_get_info_ioctl &rArr; wlan_get_info_stats &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_bss_info
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_stats
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_signal
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_ver_ext
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_info_debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6c9]"></a>wlan_snmp_mib_ioctl</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_snmp_mib_ioctl &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6ca]"></a>wlan_radio_ioctl_band_cfg</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wlan_radio_ioctl_band_cfg &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl
</UL>

<P><STRONG><a name="[6cb]"></a>wlan_radio_ioctl</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_radio_ioctl &rArr; wlan_radio_ioctl_ant_cfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_band_cfg
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_ant_cfg
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_radio_ioctl_radio_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6cc]"></a>wlan_bss_ioctl_mac_address</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_bss_ioctl_mac_address &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6cd]"></a>wlan_bss_ioctl_set_multicast_list</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_bss_ioctl_set_multicast_list &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6ce]"></a>wlan_bss_ioctl_get_channel_list</STRONG> (Thumb, 376 bytes, Stack size 216 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wlan_bss_ioctl_get_channel_list &rArr; wlan_11d_parse_domain_info &rArr; wlan_11d_get_chan
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_chan_2_freq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_parse_domain_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d0]"></a>wlan_bss_ioctl_channel</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_bss_ioctl_channel &rArr; wlan_find_cfp_by_band_and_freq &rArr; wlan_count_priv_cond
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_freq
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_cfp_by_band_and_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d1]"></a>wlan_bss_ioctl_mode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wlan_bss_ioctl_mode &rArr; wlan_disconnect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d2]"></a>wlan_bss_ioctl_start</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wlan_bss_ioctl_start &rArr; wlan_enable_aes_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ssid_cmp
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_join
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_adhoc_start
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_associate
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_csa_closed_channel
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_aes_key
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_ssid_in_list
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_network_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d3]"></a>wlan_bss_ioctl_stop</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_bss_ioctl_stop &rArr; wlan_disconnect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d4]"></a>wlan_bss_ioctl_ibss_channel</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_bss_ioctl_ibss_channel &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6da]"></a>wlan_bss_ioctl_listen_interval</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_bss_ioctl_listen_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d8]"></a>wlan_bss_ioctl_beacon_interval</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_bss_ioctl_beacon_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d9]"></a>wlan_bss_ioctl_atim_window</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_bss_ioctl_atim_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl
</UL>

<P><STRONG><a name="[6d5]"></a>wlan_query_passphrase</STRONG> (Thumb, 184 bytes, Stack size 160 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = wlan_query_passphrase &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_find_bss
</UL>

<P><STRONG><a name="[6d7]"></a>wlan_bss_ioctl</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = wlan_bss_ioctl &rArr; wlan_bss_ioctl_bss_role &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_find_bss
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_atim_window
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_beacon_interval
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_listen_interval
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_ibss_channel
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_stop
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_start
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mode
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_channel
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_get_channel_list
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_set_multicast_list
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_mac_address
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bss_ioctl_bss_role
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6db]"></a>wlan_rate_ioctl_get_supported_rate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = wlan_rate_ioctl_get_supported_rate &rArr; wlan_get_active_data_rates &rArr; wlan_get_supported_rates &rArr; wlan_copy_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_active_data_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl
</UL>

<P><STRONG><a name="[6dc]"></a>wlan_rate_ioctl</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wlan_rate_ioctl &rArr; wlan_rate_ioctl_cfg &rArr; wlan_rate_ioctl_set_rate_value &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_supported_rate
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_get_data_rate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_rate_ioctl_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6dd]"></a>wlan_power_ioctl_get_power</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_power_ioctl_get_power &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
</UL>

<P><STRONG><a name="[6de]"></a>wlan_power_ioctl_set_power</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_power_ioctl_set_power &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
</UL>

<P><STRONG><a name="[6e0]"></a>wlan_get_modulation_class</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power_ext
</UL>

<P><STRONG><a name="[6df]"></a>wlan_power_ioctl_set_power_ext</STRONG> (Thumb, 442 bytes, Stack size 80 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wlan_power_ioctl_set_power_ext &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_modulation_class
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl
</UL>

<P><STRONG><a name="[6e1]"></a>wlan_power_ioctl</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wlan_power_ioctl &rArr; wlan_power_ioctl_set_power_ext &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power_ext
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_set_power
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_power_ioctl_get_power
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6e2]"></a>wlan_pm_ioctl_ps_mode</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_pm_ioctl_ps_mode &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[6e3]"></a>wlan_pm_ioctl_inactivity_timeout</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_pm_ioctl_inactivity_timeout &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[6e4]"></a>wlan_set_auto_deep_sleep</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_set_auto_deep_sleep &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[6e5]"></a>wlan_set_get_sleep_pd</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_set_get_sleep_pd &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[6e8]"></a>wlan_set_get_ps_cfg</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_set_get_ps_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[6e6]"></a>wlan_set_get_sleep_params</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_set_get_sleep_params &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl
</UL>

<P><STRONG><a name="[6e7]"></a>wlan_pm_ioctl</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_pm_ioctl &rArr; wlan_set_get_sleep_params &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_sleep_params
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_ps_cfg
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_sleep_pd
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_auto_deep_sleep
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_inactivity_timeout
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_ps_mode
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_hs_wakeup_reason
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_pm_info
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_pm_ioctl_hscfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6e9]"></a>wlan_set_wpa_ie_helper</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wlan_set_wpa_ie_helper &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_wpa_enable
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_auth_mode
</UL>

<P><STRONG><a name="[6ea]"></a>wlan_set_wapi_ie</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_wapi_enable
</UL>

<P><STRONG><a name="[6eb]"></a>wlan_sec_ioctl_wapi_enable</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_wapi_enable &rArr; wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6ec]"></a>wlan_sec_ioctl_set_wapi_key</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_sec_ioctl_set_wapi_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
</UL>

<P><STRONG><a name="[6ed]"></a>wlan_sec_ioctl_port_ctrl_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_sec_ioctl_port_ctrl_enable &rArr; wlan_cleanup_bypass_txq &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6ef]"></a>wlan_sec_ioctl_auth_mode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_auth_mode &rArr; wlan_set_wpa_ie_helper &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6f8]"></a>wlan_sec_ioctl_encrypt_mode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_sec_ioctl_encrypt_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6f0]"></a>wlan_sec_ioctl_wpa_enable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = wlan_sec_ioctl_wpa_enable &rArr; wlan_set_wpa_ie_helper &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6f1]"></a>wlan_sec_ioctl_set_wep_key</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_sec_ioctl_set_wep_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
</UL>

<P><STRONG><a name="[6f2]"></a>wlan_sec_ioctl_set_wpa_key</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_sec_ioctl_set_wpa_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
</UL>

<P><STRONG><a name="[6f4]"></a>wlan_sec_ioctl_get_key</STRONG> (Thumb, 662 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_sec_ioctl_get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
</UL>

<P><STRONG><a name="[6f3]"></a>wlan_sec_ioctl_encrypt_key</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wlan_sec_ioctl_encrypt_key &rArr; wlan_sec_ioctl_set_wpa_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_get_key
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wpa_key
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wep_key
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_set_wapi_key
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6f5]"></a>wlan_sec_ioctl_passphrase</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_sec_ioctl_passphrase &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_bssid_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6f9]"></a>wlan_sec_ioctl_ewpa_enable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_sec_ioctl_ewpa_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6f6]"></a>wlan_sec_ioctl_esupp_mode</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_sec_ioctl_esupp_mode &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_cfg_ioctl
</UL>

<P><STRONG><a name="[6f7]"></a>wlan_sec_cfg_ioctl</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = wlan_sec_cfg_ioctl &rArr; wlan_sec_ioctl_encrypt_key &rArr; wlan_sec_ioctl_set_wpa_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_esupp_mode
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_ewpa_enable
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_passphrase
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_key
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_wpa_enable
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_encrypt_mode
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_auth_mode
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_port_ctrl_enable
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sec_ioctl_wapi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6fa]"></a>wlan_set_gen_ie_helper</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = wlan_set_gen_ie_helper &rArr; wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wapi_ie
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_wpa_ie_helper
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
</UL>

<P><STRONG><a name="[6fb]"></a>wlan_misc_ioctl_wws_cfg</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_misc_ioctl_wws_cfg &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[6fc]"></a>wlan_11d_cfg_ioctl_enable</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_11d_cfg_ioctl_enable &rArr; wlan_11d_enable &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
</UL>

<P><STRONG><a name="[6fd]"></a>wlan_11d_clr_chan_table</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_11d_clr_chan_table &rArr; wlan_11d_clear_parsedtable
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clear_parsedtable
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl
</UL>

<P><STRONG><a name="[6fe]"></a>wlan_11d_cfg_ioctl</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wlan_11d_cfg_ioctl &rArr; wlan_11d_cfg_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_domain_info
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_clr_chan_table
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_cfg_ioctl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[718]"></a>wlan_wps_cfg_ioctl</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_wps_cfg_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[6ff]"></a>wlan_reg_mem_ioctl</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_reg_mem_ioctl &rArr; wlan_reg_mem_ioctl_mem_rw &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_mem_rw
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_read_eeprom
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_mem_ioctl_reg_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[700]"></a>wlan_11h_channel_check_req</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_11h_channel_check_req &rArr; wlan_11h_issue_radar_detect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_get_adhoc_start_channel
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cfg_ioctl
</UL>

<P><STRONG><a name="[702]"></a>wlan_11h_ioctl_local_power_constraint</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_11h_ioctl_local_power_constraint
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_cfg_ioctl
</UL>

<P><STRONG><a name="[701]"></a>wlan_11h_cfg_ioctl</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wlan_11h_cfg_ioctl &rArr; wlan_11h_channel_check_req &rArr; wlan_11h_issue_radar_detect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_ioctl_local_power_constraint
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_channel_check_req
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[703]"></a>wlan_misc_ioctl_gen_ie</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_gen_ie &rArr; wlan_set_gen_ie_helper &rArr; wlan_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_gen_ie_helper
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[704]"></a>wlan_misc_ioctl_region</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_misc_ioctl_region &rArr; wlan_set_regiontable &rArr; wlan_cfp_copy_dynamic
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_regiontable
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[705]"></a>wlan_misc_ioctl_warm_reset</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = wlan_misc_ioctl_warm_reset &rArr; wlan_free_priv &rArr; wlan_clean_txrx &rArr; wlan_11n_cleanup_reorder_tbl &rArr; wlan_11n_delete_rxreorder_tbl_entry &rArr; wlan_11n_dispatch_pkt_until_start_win &rArr; wlan_11n_dispatch_pkt &rArr; wlan_11n_dispatch_amsdu_pkt &rArr; wlan_11n_deaggregate_pkt &rArr; wlan_uap_recv_packet &rArr; wlan_wmm_add_buf_txqueue &rArr; wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_priv
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_adapter
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init_priv
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[706]"></a>wlan_misc_ioctl_sysclock</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_misc_ioctl_sysclock &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[707]"></a>wlan_misc_ioctl_soft_reset</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_misc_ioctl_soft_reset &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_cfg_ioctl
</UL>

<P><STRONG><a name="[712]"></a>wlan_misc_cfg_ioctl</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = wlan_misc_cfg_ioctl &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_custom_ie_list
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_country_code
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_cfp_code_cfg
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_ipaddr_cfg
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mef_cfg
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_subscribe_evt
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_thermal
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_mac_control
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_soft_reset
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_sysclock
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_warm_reset
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_region
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_gen_ie
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_wws_cfg
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_txcontrol
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_otp_user_data
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_reg_rx_mgmt_ind
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_init_shutdown
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_misc_ioctl_host_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[715]"></a>wlan_set_get_scan_cfg</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wlan_set_get_scan_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_ioctl
</UL>

<P><STRONG><a name="[714]"></a>wlan_scan_ioctl</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, mlan_sta_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = wlan_scan_ioctl &rArr; wlan_scan_specific_ssid &rArr; wlan_scan_networks &rArr; wlan_scan_setup_scan_config &rArr; wlan_scan_create_channel_list &rArr; wlan_11d_get_scan_type &rArr; wlan_11d_channel_known &rArr; wlan_11h_radar_detect_required &rArr; wlan_get_cfp_radar_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_queue
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_get_scan_cfg
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_specific_ssid
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_scan_networks
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_flush_scan_table
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_sta_ioctl
</UL>

<P><STRONG><a name="[71b]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_bypass_tx_list_empty
</UL>

<P><STRONG><a name="[71c]"></a>util_unlink_list</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, mlan_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_cleanup_bypass_txq
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_bypass_tx
</UL>

<P><STRONG><a name="[719]"></a>wlan_get_priv</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mlan_txrx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_handle_rx_packet
</UL>

<P><STRONG><a name="[71d]"></a>uap_process_cmdresp_error</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uap_process_cmdresp_error &rArr; wlan_insert_cmd_to_free_q &rArr; wlan_clean_cmd_node &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_insert_cmd_to_free_q
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_request_cmd_lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_release_cmd_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[730]"></a>wlan_uap_cmd_802_11_hs_cfg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_uap_cmd_802_11_hs_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[731]"></a>wlan_uap_cmd_txdatapause</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_uap_cmd_txdatapause
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[734]"></a>wlan_uap_ret_txdatapause</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_uap_ret_txdatapause
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[71e]"></a>wlan_process_tx_pause_event</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_process_tx_pause_event &rArr; wlan_updata_ralist_tx_pause &rArr; wlan_wmm_get_ralist_node &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[721]"></a>wlan_uap_cmd_ap_config</STRONG> (Thumb, 2712 bytes, Stack size 208 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wlan_uap_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_sys_configure
</UL>

<P><STRONG><a name="[720]"></a>wlan_uap_cmd_sys_configure</STRONG> (Thumb, 800 bytes, Stack size 104 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wlan_uap_cmd_sys_configure &rArr; wlan_uap_cmd_ap_config
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[724]"></a>wlan_uap_ret_cmd_ap_config</STRONG> (Thumb, 1546 bytes, Stack size 216 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_uap_ret_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_sys_config
</UL>

<P><STRONG><a name="[722]"></a>wlan_uap_ret_sys_reset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_uap_ret_sys_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_priv_init
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_priv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[723]"></a>wlan_uap_ret_sys_config</STRONG> (Thumb, 616 bytes, Stack size 80 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = wlan_uap_ret_sys_config &rArr; wlan_11h_radar_detected_callback &rArr; wlan_11h_radar_detected_handling &rArr; wlan_misc_ioctl_custom_ie_list &rArr; wlan_custom_ioctl_auto_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detected_callback
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_ret_cmd_ap_config
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[725]"></a>wlan_uap_cmd_snmp_mib</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_uap_cmd_snmp_mib &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[732]"></a>wlan_uap_ret_snmp_mib</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_uap_ret_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[72f]"></a>wlan_uap_cmd_sta_deauth</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_uap_cmd_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[726]"></a>wlan_uap_cmd_key_material</STRONG> (Thumb, 720 bytes, Stack size 56 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wlan_uap_cmd_key_material &rArr; wlan_add_station_entry &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_prepare_cmd
</UL>

<P><STRONG><a name="[733]"></a>wlan_uap_ret_sta_list</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_uap_ret_sta_list
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_cmdresp
</UL>

<P><STRONG><a name="[727]"></a>wlan_check_sta_capability</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wlan_check_sta_capability &rArr; wlan_check_specific_ie
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_check_specific_ie
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_specific_ie
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_wmm_ie_present
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[72b]"></a>wlan_check_uap_capability</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_check_uap_capability &rArr; wlan_wmm_setup_queues &rArr; wlan_wmm_setup_queue_priorities &rArr; wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queues
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_ac_downgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[735]"></a>wlan_update_wapi_info_tlv</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_update_wapi_info_tlv
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[72e]"></a>wlan_process_sta_assoc_event</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, mlan_uap_cmdevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wlan_process_sta_assoc_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_event
</UL>

<P><STRONG><a name="[737]"></a>wlan_uap_bss_ioctl_stop</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_bss_ioctl_stop &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[9d]"></a>wlan_uap_callback_bss_ioctl_start</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_uap_callback_bss_ioctl_start &rArr; wlan_uap_set_channel &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_channel
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_switch_non_dfs_chan
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_chan_report
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[738]"></a>wlan_uap_bss_ioctl_start</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_uap_bss_ioctl_start &rArr; wlan_uap_get_channel &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[739]"></a>wlan_uap_bss_ioctl_reset</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_bss_ioctl_reset &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[73a]"></a>wlan_uap_bss_ioctl_mac_address</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_uap_bss_ioctl_mac_address &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[73b]"></a>wlan_uap_get_stats</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_get_stats &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[73c]"></a>wlan_uap_bss_ioctl_config</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_bss_ioctl_config &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[73d]"></a>wlan_uap_bss_ioctl_deauth_sta</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_bss_ioctl_deauth_sta &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[73e]"></a>wlan_uap_get_sta_list</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_get_sta_list &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[73f]"></a>wlan_uap_misc_ioctl_soft_reset</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_misc_ioctl_soft_reset &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[740]"></a>wlan_uap_misc_ioctl_txdatapause</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_uap_misc_ioctl_txdatapause &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[741]"></a>wlan_uap_pm_ioctl_mode</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_uap_pm_ioctl_mode &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[742]"></a>wlan_uap_set_wapi_ie</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wlan_uap_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_misc_ioctl_gen_ie
</UL>

<P><STRONG><a name="[743]"></a>wlan_uap_misc_ioctl_gen_ie</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = wlan_uap_misc_ioctl_gen_ie &rArr; wlan_uap_set_wapi_ie &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_set_wapi_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[74b]"></a>wlan_uap_sec_ioctl_wapi_enable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_uap_sec_ioctl_wapi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[744]"></a>wlan_uap_sec_ioctl_set_encrypt_key</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_uap_sec_ioctl_set_encrypt_key &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[74a]"></a>wlan_uap_get_bss_info</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_uap_get_bss_info
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[745]"></a>wlan_uap_pm_ioctl_deepsleep</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wlan_uap_pm_ioctl_deepsleep &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[746]"></a>wlan_uap_snmp_mib_11d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_uap_snmp_mib_11d &rArr; wlan_11d_enable &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[9e]"></a>wlan_uap_callback_domain_info</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wlan_uap_callback_domain_info &rArr; wlan_11d_handle_uap_domain_info &rArr; wlan_11d_send_domain_info &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_handle_uap_domain_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[747]"></a>wlan_uap_domain_info</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_uap_domain_info &rArr; wlan_uap_get_channel &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[9f]"></a>wlan_uap_callback_11h_channel_check_req</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_uap_callback_11h_channel_check_req &rArr; wlan_11h_issue_radar_detect &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_issue_radar_detect
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_channel_under_nop
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[748]"></a>wlan_uap_11h_channel_check_req</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wlan_uap_11h_channel_check_req &rArr; wlan_uap_get_channel &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[a0]"></a>wlan_uap_callback_snmp_mib_11h</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wlan_uap_callback_snmp_mib_11h &rArr; wlan_11h_activate &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_activate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_check_update_radar_det_state
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_config_master_radar_det
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_is_master_radar_det_active
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11h_radar_detect_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlan_uap_ioctl.o(.text)
</UL>
<P><STRONG><a name="[749]"></a>wlan_uap_snmp_mib_11h</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, mlan_uap_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wlan_uap_snmp_mib_11h &rArr; wlan_11d_enable &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_get_channel
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11d_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_ioctl
</UL>

<P><STRONG><a name="[74c]"></a>wlan_upload_uap_rx_packet</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wlan_upload_uap_rx_packet &rArr; wlan_free_mlan_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_free_mlan_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ops_uap_process_rx_packet
</UL>

<P><STRONG><a name="[74d]"></a>wlan_check_unicast_packet</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, mlan_uap_txrx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wlan_check_unicast_packet &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_uap_rx_packet
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_uap_recv_packet
</UL>

<P><STRONG><a name="[75b]"></a>util_peek_list</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_stream_to_delete
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_all_ralist
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[75f]"></a>util_enqueue_list_tail</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_enqueue_list_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[769]"></a>util_enqueue_list_head</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_enqueue_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[750]"></a>util_unlink_list</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_all_ralist
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
</UL>

<P><STRONG><a name="[74f]"></a>util_dequeue_list</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = util_dequeue_list &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[764]"></a>util_scalar_read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_scalar_read
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_lists_empty
</UL>

<P><STRONG><a name="[757]"></a>util_scalar_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_scalar_write
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_queue_priorities_tid
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_updata_ralist_tx_pause
</UL>

<P><STRONG><a name="[768]"></a>util_scalar_increment</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_scalar_increment
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[767]"></a>util_scalar_decrement</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util_scalar_decrement
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_del_tx_pkts_in_ralist
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
</UL>

<P><STRONG><a name="[765]"></a>util_scalar_conditional_write</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = util_scalar_conditional_write
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[751]"></a>wlan_is_amsdu_allowed</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_is_amsdu_allowed &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[752]"></a>wlan_is_bastream_setup</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wlan_is_bastream_setup &rArr; wlan_11n_get_txbastream_tbl &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[753]"></a>wlan_is_11n_enabled</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
</UL>

<P><STRONG><a name="[754]"></a>wlan_wmm_allocate_ralist_node</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wlan_wmm_allocate_ralist_node
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
</UL>

<P><STRONG><a name="[756]"></a>wlan_wmm_queue_priorities_tid</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wlan_wmm_queue_priorities_tid &rArr; util_scalar_write
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_queue_priorities
</UL>

<P><STRONG><a name="[771]"></a>wlan_wmm_eval_downgrade_ac</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_wmm_eval_downgrade_ac
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_setup_ac_downgrade
</UL>

<P><STRONG><a name="[759]"></a>wlan_wmm_convert_tos_to_ac</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_downgrade_tid
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_select_queue
</UL>

<P><STRONG><a name="[758]"></a>wlan_wmm_downgrade_tid</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_wmm_downgrade_tid
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_convert_tos_to_ac
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[75a]"></a>wlan_wmm_del_pkts_in_ralist_node</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_wmm_del_pkts_in_ralist_node &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cleanup_queues
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_peer_ralist
</UL>

<P><STRONG><a name="[75c]"></a>wlan_wmm_cleanup_queues</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_wmm_cleanup_queues &rArr; wlan_wmm_del_pkts_in_ralist_node &rArr; wlan_write_data_complete &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_del_pkts_in_ralist_node
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
</UL>

<P><STRONG><a name="[75d]"></a>wlan_wmm_delete_all_ralist</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wlan_wmm_delete_all_ralist &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_init_list
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_unlink_list
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_clean_txrx
</UL>

<P><STRONG><a name="[760]"></a>wlan_wmm_get_queue_raptr</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wlan_wmm_get_queue_raptr &rArr; wlan_ralist_add &rArr; wlan_is_11n_enabled &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_ralist_node
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[761]"></a>wlan_send_wmmac_host_event</STRONG> (Thumb, 246 bytes, Stack size 136 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wlan_send_wmmac_host_event &rArr; wlan_recv_event
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_recv_event
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_get_status
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ret_wmm_delts_req
</UL>

<P><STRONG><a name="[763]"></a>wlan_wmm_get_highest_priolist_ptr</STRONG> (Thumb, 466 bytes, Stack size 80 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wlan_wmm_get_highest_priolist_ptr &rArr; util_scalar_conditional_write
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_conditional_write
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_write
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_read
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[76c]"></a>wlan_num_pkts_in_txq</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_num_pkts_in_txq
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[766]"></a>wlan_send_single_packet</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wlan_send_single_packet &rArr; wlan_process_tx &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_decrement
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_increment
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_head
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_process_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[76a]"></a>wlan_send_processed_packet</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wlan_send_processed_packet &rArr; wlan_sdio_host_to_card &rArr; wlan_write_data_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sdio_host_to_card
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ralist_valid
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_decrement
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_enqueue_list_head
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[76b]"></a>wlan_dequeue_tx_packet</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wlan_dequeue_tx_packet &rArr; wlan_send_delba &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_aggregate_pkt
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_create_txbastream_tbl
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_11n_get_txbastream_tbl
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_delba
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_addba
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_find_stream_to_delete
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_bastream_avail
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_ampdu_allowed
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_processed_packet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_single_packet
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_num_pkts_in_txq
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_get_highest_priolist_ptr
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_downgrade_tid
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_bastream_setup
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_is_amsdu_allowed
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_process_tx
</UL>

<P><STRONG><a name="[773]"></a>wlan_del_tx_pkts_in_ralist</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wlan_del_tx_pkts_in_ralist &rArr; util_dequeue_list &rArr; util_unlink_list
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_write_data_complete
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_scalar_decrement
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_dequeue_list
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_drop_tx_pkts
</UL>

<P><STRONG><a name="[779]"></a>wlan_wmm_ioctl_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_wmm_ioctl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[77a]"></a>wlan_wmm_ioctl_qos</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wlan_wmm_ioctl_qos
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[774]"></a>wlan_wmm_ioctl_addts_req</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_wmm_ioctl_addts_req &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[775]"></a>wlan_wmm_ioctl_delts_req</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_wmm_ioctl_delts_req &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[776]"></a>wlan_wmm_ioctl_queue_stats</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_wmm_ioctl_queue_stats &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[77b]"></a>wlan_wmm_ioctl_queue_status</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wlan_wmm_ioctl_queue_status
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[777]"></a>wlan_wmm_ioctl_ts_status</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_wmm_ioctl_ts_status &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[778]"></a>wlan_wmm_ioctl_queue_config</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wlan_wmm_ioctl_queue_config &rArr; wlan_prepare_cmd &rArr; wlan_insert_cmd_to_pending_q &rArr; util_enqueue_list_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_prepare_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_cfg_ioctl
</UL>

<P><STRONG><a name="[755]"></a>util_init_list</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_delete_all_ralist
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_allocate_ralist_node
</UL>

<P><STRONG><a name="[75e]"></a>queuing_ra_based</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_add
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_ralist_update
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_wmm_add_buf_txqueue
</UL>

<P><STRONG><a name="[762]"></a>wlan_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mlan_wmm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_send_wmmac_host_event
</UL>

<P><STRONG><a name="[76d]"></a>wlan_is_ampdu_allowed</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wlan_is_ampdu_allowed &rArr; wlan_get_station_entry &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_station_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[76e]"></a>wlan_is_bastream_avail</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlan_is_bastream_avail
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[76f]"></a>wlan_find_stream_to_delete</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, mlan_wmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wlan_find_stream_to_delete &rArr; util_peek_list
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_peek_list
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_dequeue_tx_packet
</UL>

<P><STRONG><a name="[77d]"></a>kfree_skbmem</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
</UL>

<P><STRONG><a name="[77e]"></a>skb_drop_list</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = skb_drop_list &rArr; kfree_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfree_skb
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_drop_fraglist
</UL>

<P><STRONG><a name="[780]"></a>skb_drop_fraglist</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = skb_drop_fraglist &rArr; skb_drop_list &rArr; kfree_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_drop_list
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>

<P><STRONG><a name="[782]"></a>skb_has_frag_list</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>

<P><STRONG><a name="[781]"></a>skb_release_data</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = skb_release_data &rArr; skb_drop_fraglist &rArr; skb_drop_list &rArr; kfree_skb &rArr; __kfree_skb &rArr; kfree_skbmem &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_page
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_has_frag_list
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_drop_fraglist
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
</UL>

<P><STRONG><a name="[784]"></a>skb_dst_drop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_head_state
</UL>

<P><STRONG><a name="[783]"></a>skb_release_head_state</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skb_release_head_state
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_dst_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_all
</UL>

<P><STRONG><a name="[785]"></a>skb_release_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = skb_release_all &rArr;  skb_release_data (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_head_state
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_release_data
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_morph
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfree_skb
</UL>

<P><STRONG><a name="[78a]"></a>skb_copy_secmark</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
</UL>

<P><STRONG><a name="[789]"></a>__nf_copy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
</UL>

<P><STRONG><a name="[788]"></a>skb_copy_queue_mapping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
</UL>

<P><STRONG><a name="[787]"></a>__copy_skb_header</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __copy_skb_header &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_queue_mapping
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__nf_copy
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_secmark
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[78b]"></a>__skb_clone</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __skb_clone &rArr; atomic_add &rArr; local_irq_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_add
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_set
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headroom
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
</UL>
<BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_morph
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_clone
</UL>

<P><STRONG><a name="[795]"></a>skb_mac_header_was_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_skb_header
</UL>

<P><STRONG><a name="[794]"></a>skb_clone_fraglist</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
</UL>

<P><STRONG><a name="[797]"></a>__pskb_pull</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_headlen
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
</UL>

<P><STRONG><a name="[79b]"></a>skb_over_panic</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = skb_over_panic &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
</UL>

<P><STRONG><a name="[79c]"></a>skb_under_panic</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, skbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_push
</UL>

<P><STRONG><a name="[7a0]"></a>copy_skb_header</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, skbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = copy_skb_header &rArr; __copy_skb_header &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_mac_header_was_set
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__copy_skb_header
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
</UL>

<P><STRONG><a name="[790]"></a>skb_headlen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_bits
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull
</UL>

<P><STRONG><a name="[793]"></a>skb_tail_pointer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_put
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pskb_pull_tail
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_expand_head
</UL>

<P><STRONG><a name="[798]"></a>skb_reset_tail_pointer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloc_skb
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_recycle_check
</UL>

<P><STRONG><a name="[78c]"></a>skb_headroom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, skbuff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_realloc_headroom
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy_expand
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pskb_copy
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skb_copy
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__skb_clone
</UL>

<P><STRONG><a name="[7ad]"></a>wpa_selector_to_bitfield</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>

<P><STRONG><a name="[7ae]"></a>wpa_key_mgmt_to_bitfield</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>

<P><STRONG><a name="[7aa]"></a>rsn_selector_to_bitfield</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[7ab]"></a>rsn_key_mgmt_to_bitfield</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usr_cfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[7ac]"></a>wpa_parse_wpa_ie_wpa</STRONG> (Thumb, 822 bytes, Stack size 40 bytes, usr_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_parse_wpa_ie_wpa &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_to_bitfield
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_selector_to_bitfield
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>

<P><STRONG><a name="[7bf]"></a>speex_bits_flush</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bits.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_whole_bytes
</UL>

<P><STRONG><a name="[7bd]"></a>speex_realloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = speex_realloc &rArr; mem_realloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_whole_bytes
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_from
</UL>

<P><STRONG><a name="[7be]"></a>speex_warning</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = speex_warning &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_whole_bytes
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_from
</UL>

<P><STRONG><a name="[7bc]"></a>speex_notify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = speex_notify &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_read_from
</UL>

<P><STRONG><a name="[7c7]"></a>compute_weighted_codebook</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, cb_search.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = compute_weighted_codebook &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
</UL>

<P><STRONG><a name="[7cb]"></a>target_update</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cb_search.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = target_update
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign_N1
</UL>

<P><STRONG><a name="[7c8]"></a>split_cb_search_shape_sign_N1</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, cb_search.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = split_cb_search_shape_sign_N1 &rArr; speex_bits_pack &rArr; speex_realloc &rArr; mem_realloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vq_nbest_sign
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vq_nbest
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syn_percep_zero16
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_update
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_weighted_codebook
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_bits_pack
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_cb_search_shape_sign
</UL>

<P><STRONG><a name="[7d0]"></a>spx_sqrt</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicomb
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms16
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms
</UL>

<P><STRONG><a name="[7d8]"></a>interp_pitch</STRONG> (Thumb, 380 bytes, Stack size 176 bytes, filters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = interp_pitch &rArr; inner_prod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_prod
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicomb
</UL>

<P><STRONG><a name="[7e0]"></a>spx_sqrt</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_acos
</UL>

<P><STRONG><a name="[7dc]"></a>cheb_poly_eva</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cheb_poly_eva
</UL>
<BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_to_lsp
</UL>

<P><STRONG><a name="[7dd]"></a>spx_acos</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spx_acos &rArr; spx_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_to_lsp
</UL>

<P><STRONG><a name="[7df]"></a>spx_cos</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, lsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_to_lpc
</UL>

<P><STRONG><a name="[7e4]"></a>spx_sqrt</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
</UL>

<P><STRONG><a name="[7e1]"></a>pitch_xcorr</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pitch_xcorr &rArr; inner_prod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_prod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_loop_nbest_pitch
</UL>

<P><STRONG><a name="[7e5]"></a>pitch_gain_search_3tap_vq</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pitch_gain_search_3tap_vq &rArr; compute_pitch_error
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_pitch_error
</UL>
<BR>[Called By]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap
</UL>

<P><STRONG><a name="[7e7]"></a>pitch_gain_search_3tap</STRONG> (Thumb, 1152 bytes, Stack size 192 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = pitch_gain_search_3tap &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap_vq
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inner_prod
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_mem16
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_mem16
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalize16
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_search_3tap
</UL>

<P><STRONG><a name="[7e6]"></a>compute_pitch_error</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, ltp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compute_pitch_error
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pitch_gain_search_3tap_vq
</UL>

<P><STRONG><a name="[805]"></a>speex_rand</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = speex_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode_lost
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[7f3]"></a>spx_sqrt</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spx_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[7e8]"></a>_speex_fatal</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _speex_fatal &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[804]"></a>nb_decode_lost</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nb_decode_lost &rArr; highpass &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_rand
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iir_mem16
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_rms16
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highpass
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bw_lpc
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[7e9]"></a>speex_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = speex_alloc &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encoder_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_init
</UL>

<P><STRONG><a name="[7ec]"></a>speex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = speex_free &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encoder_destroy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_destroy
</UL>

<P><STRONG><a name="[7ee]"></a>speex_warning_int</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = speex_warning_int &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_encoder_ctl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decoder_ctl
</UL>

<P><STRONG><a name="[807]"></a>speex_notify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nb_celp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = speex_notify &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_decode
</UL>

<P><STRONG><a name="[80b]"></a>compute_quant_weights</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, quant_lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = compute_quant_weights
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_high
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_nb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_lbr
</UL>

<P><STRONG><a name="[80c]"></a>lsp_quant</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, quant_lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lsp_quant
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_high
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_nb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_lbr
</UL>

<P><STRONG><a name="[80d]"></a>lsp_weight_quant</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, quant_lsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsp_weight_quant
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_high
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_nb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsp_quant_lbr
</UL>

<P><STRONG><a name="[813]"></a>speex_warning_int</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, speex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = speex_warning_int &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mode_query
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speex_lib_ctl
</UL>

<P><STRONG><a name="[826]"></a>DMA_DAC1Configuration</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA_DAC1Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_open
</UL>

<P><STRONG><a name="[a3]"></a>adc_recv_thread</STRONG> (Thumb, 716 bytes, Stack size 0 bytes, audio_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = adc_recv_thread &rArr; init_event &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_event_timeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_event
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_low_level.o(.text)
</UL>
<P><STRONG><a name="[83e]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, audio_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_low_level_close
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_low_level_close
</UL>

<P><STRONG><a name="[84c]"></a>DMA_DCMIConfiguration</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, camera.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA_DCMIConfiguration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dcmi_rcv
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_camera
</UL>

<P><STRONG><a name="[a4]"></a>ir_timer_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ir_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ir_timer_callback &rArr; ir_trig_send &rArr; ir_pwm_disable &rArr; TIM_SelectOCxM
</UL>
<BR>[Calls]<UL><LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_trig_send
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir_control.o(.text)
</UL>
<P><STRONG><a name="[8b7]"></a>ov2640_ConvertValue</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, ov2640.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov2640_Config
</UL>

<P><STRONG><a name="[8c6]"></a>CmdResp5Error</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CmdResp5Error &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct_host
</UL>

<P><STRONG><a name="[8ce]"></a>sdio_read_cis</STRONG> (Thumb, 580 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_io_rw_direct_host &rArr; mutex_lock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_common_cis
</UL>

<P><STRONG><a name="[8d1]"></a>CmdResp1Error</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
</UL>

<P><STRONG><a name="[8d3]"></a>CmdResp6Error</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
</UL>

<P><STRONG><a name="[8d5]"></a>CmdResp4Error</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp4Error
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
</UL>

<P><STRONG><a name="[8d7]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
</UL>

<P><STRONG><a name="[8d9]"></a>GPIO_Configuration</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Configuration &rArr; gpio_cfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8e6]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[8e0]"></a>DMA_TxConfiguration</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[8e3]"></a>DMA_RxConfiguration</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[8ef]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[900]"></a>read_sr</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_sr &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
</UL>

<P><STRONG><a name="[901]"></a>write_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_enable &rArr; spi_write_then_read &rArr; spi_r
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip
</UL>

<P><STRONG><a name="[902]"></a>wait_till_ready</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read_id
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_chip
</UL>

<P><STRONG><a name="[903]"></a>erase_chip</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = erase_chip &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
</UL>

<P><STRONG><a name="[905]"></a>m25p_addr2cmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m25p_addr2cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
</UL>

<P><STRONG><a name="[906]"></a>m25p_cmdsz</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w25p80.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_write
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_read
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_flash_data
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sector
</UL>

<P><STRONG><a name="[904]"></a>erase_sector</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, w25p80.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = erase_sector &rArr; wait_till_ready &rArr; sleep &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_cmdsz
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p_addr2cmd
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_till_ready
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m25p80_erase
</UL>

<P><STRONG><a name="[915]"></a>io_spi_trans_byte</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>

<P><STRONG><a name="[914]"></a>spi_r</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_r &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
</UL>

<P><STRONG><a name="[916]"></a>spi_w</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_read
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_then_write
</UL>

<P><STRONG><a name="[917]"></a>spi_write_then_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_write_then_write &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>

<P><STRONG><a name="[918]"></a>spi_write_then_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mfrc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_write_then_read &rArr; spi_w &rArr; io_spi_trans_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_w
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_r
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[92f]"></a>io_spi_trans_byte</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = io_spi_trans_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Buf
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Reg
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_Buf
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_Reg
</UL>

<P><STRONG><a name="[9cd]"></a>decode_header</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[9cf]"></a>free_bitrate</STRONG> (Thumb, 258 bytes, Stack size 144 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[9d7]"></a>III_sideinfo</STRONG> (Thumb, 502 bytes, Stack size 64 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = III_sideinfo &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[9d8]"></a>III_scalefactors_lsf</STRONG> (Thumb, 560 bytes, Stack size 88 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = III_scalefactors_lsf &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9d9]"></a>III_scalefactors</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = III_scalefactors &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9db]"></a>III_exponents</STRONG> (Thumb, 346 bytes, Stack size 36 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = III_exponents
</UL>
<BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[9dc]"></a>III_requantize</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = III_requantize
</UL>
<BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[9da]"></a>III_huffdecode</STRONG> (Thumb, 1556 bytes, Stack size 184 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = III_huffdecode &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_requantize
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_exponents
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9dd]"></a>III_reorder</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = III_reorder &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9de]"></a>III_stereo</STRONG> (Thumb, 1114 bytes, Stack size 80 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = III_stereo &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9e6]"></a>III_aliasreduce</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = III_aliasreduce
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9e0]"></a>fastsdct</STRONG> (Thumb, 626 bytes, Stack size 132 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>

<P><STRONG><a name="[9df]"></a>sdctII</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>

<P><STRONG><a name="[9e1]"></a>dctIV</STRONG> (Thumb, 256 bytes, Stack size 88 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>
<BR>[Called By]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>

<P><STRONG><a name="[9e2]"></a>imdct36</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>
<BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
</UL>

<P><STRONG><a name="[9e3]"></a>III_imdct_l</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = III_imdct_l &rArr; imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9e4]"></a>III_imdct_s</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = III_imdct_s &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc_ex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9e7]"></a>III_overlap</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = III_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9e8]"></a>III_freqinver</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = III_freqinver
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[9e5]"></a>III_decode</STRONG> (Thumb, 1136 bytes, Stack size 4856 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5244 + Unknown Stack Size
<LI>Call Chain = III_decode &rArr; III_imdct_l &rArr; imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_freqinver
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_overlap
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_s
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_aliasreduce
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_stereo
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[9e9]"></a>I_sample</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I_sample &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
</UL>

<P><STRONG><a name="[9ea]"></a>II_samples</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = II_samples &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
</UL>

<P><STRONG><a name="[9f0]"></a>reduce_timer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mad_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_add
</UL>

<P><STRONG><a name="[9ee]"></a>gcd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mad_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
</UL>

<P><STRONG><a name="[9ed]"></a>reduce_rational</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mad_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = reduce_rational &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>

<P><STRONG><a name="[9ef]"></a>scale_rational</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mad_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scale_rational &rArr; reduce_rational &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_fraction
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
</UL>

<P><STRONG><a name="[a00]"></a>MadFixedToSshort</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, madlld.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
</UL>

<P><STRONG><a name="[9fc]"></a>PrintFrameInfo</STRONG> (Thumb, 634 bytes, Stack size 48 bytes, madlld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PrintFrameInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
</UL>

<P><STRONG><a name="[9fe]"></a>ApplyFilter</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, madlld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ApplyFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MpegAudioDecoder
</UL>

<P><STRONG><a name="[a02]"></a>dct32</STRONG> (Thumb, 3284 bytes, Stack size 728 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = dct32
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_half
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_full
</UL>

<P><STRONG><a name="[aa]"></a>synth_full</STRONG> (Thumb, 814 bytes, Stack size 88 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = synth_full &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>synth_half</STRONG> (Thumb, 828 bytes, Stack size 88 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = synth_half &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(.text)
</UL>
<P><STRONG><a name="[a05]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>

<P><STRONG><a name="[a16]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, asn1parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_free_named_data
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
</UL>

<P><STRONG><a name="[a1c]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_shrink
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_grow
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_free
</UL>

<P><STRONG><a name="[a25]"></a>mbedtls_clz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bignum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_bitlen
</UL>

<P><STRONG><a name="[a34]"></a>mpi_get_digit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_read_string
</UL>

<P><STRONG><a name="[a2b]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_sub_abs
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[a31]"></a>mpi_mul_hlp</STRONG> (Thumb, 1584 bytes, Stack size 32 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[a39]"></a>mbedtls_int_div_int</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbedtls_int_div_int &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_mpi
</UL>

<P><STRONG><a name="[a3d]"></a>mpi_write_hlp</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_int
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_div_int
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_write_string
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_write_hlp
</UL>

<P><STRONG><a name="[a45]"></a>mpi_montg_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[a42]"></a>mpi_montmul</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_abs
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[a43]"></a>mpi_montred</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_mul_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
</UL>

<P><STRONG><a name="[a4d]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cipher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_free
</UL>

<P><STRONG><a name="[ac]"></a>get_no_padding</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cipher.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cipher.o(.text)
</UL>
<P><STRONG><a name="[a52]"></a>mbedtls_cipher_get_block_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cipher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_finish
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_update
</UL>

<P><STRONG><a name="[12e]"></a>aes_crypt_ecb_wrap</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = aes_crypt_ecb_wrap &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>aes_crypt_cbc_wrap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = aes_crypt_cbc_wrap &rArr; mbedtls_aes_crypt_cbc &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>aes_setkey_dec_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = aes_setkey_dec_wrap &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>aes_setkey_enc_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aes_setkey_enc_wrap &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>aes_ctx_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = aes_ctx_alloc &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>aes_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cipher_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = aes_ctx_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cipher_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a59]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
</UL>

<P><STRONG><a name="[134]"></a>md5_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>md5_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = md5_update_wrap &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>md5_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = md5_finish_wrap &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>md5_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = md5_ctx_alloc &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>md5_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = md5_ctx_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>md5_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = md5_clone_wrap &rArr; mbedtls_md5_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>md5_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = md5_process_wrap &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>sha1_starts_wrap</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha1_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>sha1_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>sha1_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>sha1_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sha1_ctx_alloc &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>sha1_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1_clone_wrap &rArr; mbedtls_sha1_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>sha1_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sha1_ctx_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>sha1_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>sha224_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha224_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>sha224_update_wrap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha224_update_wrap &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>sha224_finish_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = sha224_finish_wrap &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>sha224_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha224_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>sha224_ctx_alloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sha224_ctx_alloc &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>sha224_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sha224_ctx_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>sha224_clone_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha224_clone_wrap &rArr; mbedtls_sha256_clone &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>sha224_process_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha224_process_wrap &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>sha256_starts_wrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sha256_starts_wrap
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>sha256_wrap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, md_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sha256_wrap &rArr; mbedtls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[a77]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
</UL>

<P><STRONG><a name="[a79]"></a>net_prepare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_bind
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_connect
</UL>

<P><STRONG><a name="[a7d]"></a>net_would_block</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = net_would_block &rArr; aliyun_iot_network_get_nonblock &rArr; lwip_fcntl
</UL>
<BR>[Calls]<UL><LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_get_nonblock
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_send
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_net_recv
</UL>

<P><STRONG><a name="[a8f]"></a>oid_x520_attr_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_attr_short_name
</UL>

<P><STRONG><a name="[a91]"></a>oid_x509_ext_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_x509_ext_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>

<P><STRONG><a name="[a93]"></a>oid_ext_key_usage_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
</UL>

<P><STRONG><a name="[a95]"></a>oid_sig_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_sig_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_sig_alg_desc
</UL>

<P><STRONG><a name="[a98]"></a>oid_pk_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_pk_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>

<P><STRONG><a name="[a9a]"></a>oid_cipher_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_cipher_alg
</UL>

<P><STRONG><a name="[a9c]"></a>oid_md_alg_from_asn1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oid_md_alg_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_md_alg
</UL>

<P><STRONG><a name="[aa1]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_free
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
</UL>

<P><STRONG><a name="[a9f]"></a>pem_get_iv</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pem_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[aa0]"></a>pem_pbkdf1</STRONG> (Thumb, 186 bytes, Stack size 136 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = pem_pbkdf1 &rArr; mbedtls_md5_finish &rArr; mbedtls_md5_update &rArr; mbedtls_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_aes_decrypt
</UL>

<P><STRONG><a name="[aa2]"></a>pem_aes_decrypt</STRONG> (Thumb, 90 bytes, Stack size 352 bytes, pem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = pem_aes_decrypt &rArr; mbedtls_aes_setkey_dec &rArr; mbedtls_aes_setkey_enc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_cbc
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_dec
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pem_pbkdf1
<LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pem_read_buffer
</UL>

<P><STRONG><a name="[aa8]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>

<P><STRONG><a name="[aa9]"></a>pk_hashlen_helper</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify
</UL>

<P><STRONG><a name="[14f]"></a>rsa_can_do</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>rsa_get_bitlen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>rsa_verify_wrap</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = rsa_verify_wrap &rArr; mbedtls_rsa_pkcs1_verify &rArr; mbedtls_rsa_rsassa_pkcs1_v15_verify &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_verify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>rsa_sign_wrap</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = rsa_sign_wrap &rArr; mbedtls_rsa_pkcs1_sign &rArr; mbedtls_rsa_rsassa_pkcs1_v15_sign &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>rsa_decrypt_wrap</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = rsa_decrypt_wrap &rArr; mbedtls_rsa_pkcs1_decrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_decrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>rsa_encrypt_wrap</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = rsa_encrypt_wrap &rArr; mbedtls_rsa_pkcs1_encrypt &rArr; mbedtls_rsa_rsaes_pkcs1_v15_encrypt &rArr; mbedtls_rsa_private &rArr; rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_pkcs1_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>rsa_check_pair_wrap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = rsa_check_pair_wrap &rArr; mbedtls_rsa_check_pub_priv &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pub_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>rsa_alloc_wrap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = rsa_alloc_wrap &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>rsa_free_wrap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pk_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = rsa_free_wrap &rArr; mbedtls_rsa_free &rArr; mbedtls_mpi_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>rsa_debug</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pk_wrap.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pk_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[ab6]"></a>pk_get_rsapubkey</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_pubkey
</UL>
<BR>[Called By]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
</UL>

<P><STRONG><a name="[ab8]"></a>pk_get_pk_alg</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pk_get_pk_alg &rArr; mbedtls_asn1_get_alg &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_alg
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[abc]"></a>pk_parse_key_pkcs1_der</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_size
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_mpi
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_check_privkey
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_free
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs8_unencrypted_der
</UL>

<P><STRONG><a name="[abe]"></a>pk_parse_key_pkcs8_unencrypted_der</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, pkparse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = pk_parse_key_pkcs8_unencrypted_der &rArr; pk_parse_key_pkcs1_der &rArr; mbedtls_rsa_check_privkey &rArr; mbedtls_mpi_inv_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_parse_key_pkcs1_der
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pk_get_pk_alg
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_setup
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_info_from_type
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_key
</UL>

<P><STRONG><a name="[ac4]"></a>rsa_prepare_blinding</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = rsa_prepare_blinding &rArr; mbedtls_mpi_exp_mod &rArr; mbedtls_mpi_mod_mpi &rArr; mbedtls_mpi_div_mpi &rArr; mbedtls_mpi_mul_int &rArr; mbedtls_mpi_mul_mpi &rArr; mbedtls_mpi_copy &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_inv_mod
<LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_fill_random
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_gcd
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_exp_mod
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mod_mpi
<LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_cmp_int
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_mpi_mul_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_rsa_private
</UL>

<P><STRONG><a name="[acc]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha1_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>

<P><STRONG><a name="[acd]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
</UL>

<P><STRONG><a name="[ae5]"></a>mbedtls_ssl_own_key</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_cli.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_certificate_verify
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_certificate_request
</UL>

<P><STRONG><a name="[ad3]"></a>ssl_write_signature_algorithms_ext</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssl_write_signature_algorithms_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_hash_from_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[ad7]"></a>ssl_generate_random</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_generate_random
</UL>
<BR>[Called By]<UL><LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_hello
</UL>

<P><STRONG><a name="[ad5]"></a>ssl_write_client_hello</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ssl_write_client_hello &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_generate_random
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_signature_algorithms_ext
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ad9]"></a>ssl_parse_renegotiation_info</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ssl_parse_renegotiation_info &rArr; mbedtls_ssl_send_fatal_handshake_failure &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_server_hello
</UL>

<P><STRONG><a name="[adb]"></a>ssl_parse_server_hello</STRONG> (Thumb, 708 bytes, Stack size 56 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = ssl_parse_server_hello &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_fatal_handshake_failure
<LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
<LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_optimize_checksum
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_parse_renegotiation_info
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_ciphersuite_from_id
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ae1]"></a>ssl_write_encrypted_pms</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ssl_write_encrypted_pms &rArr; mbedtls_pk_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_version
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_encrypt
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_client_key_exchange
</UL>

<P><STRONG><a name="[ae3]"></a>ssl_parse_server_key_exchange</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ssl_parse_server_key_exchange &rArr; mbedtls_ssl_read_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ae4]"></a>ssl_parse_certificate_request</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ssl_parse_certificate_request &rArr; mbedtls_ssl_read_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ae6]"></a>ssl_parse_server_hello_done</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ssl_parse_server_hello_done &rArr; mbedtls_ssl_read_record &rArr; ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ae7]"></a>ssl_write_client_key_exchange</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ssl_write_client_key_exchange &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_write_encrypted_pms
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[ae8]"></a>ssl_write_certificate_verify</STRONG> (Thumb, 432 bytes, Stack size 104 bytes, ssl_cli.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_sig_from_pk
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_own_key
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_sign
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_can_do
</UL>
<BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_client_step
</UL>

<P><STRONG><a name="[b0c]"></a>mbedtls_ssl_own_cert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_certificate
</UL>

<P><STRONG><a name="[b06]"></a>mbedtls_ssl_safer_memcmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_ssl_safer_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_parse_finished
</UL>

<P><STRONG><a name="[af5]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
<LI><a href="#[b2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_free
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_ssl
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_calc_finished_tls_sha256
<LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls1_prf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl3_prf
<LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_derive_keys
</UL>

<P><STRONG><a name="[b1a]"></a>ssl_set_timer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_set_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read
<LI><a href="#[b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_timer_cb
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[b08]"></a>ssl_check_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_check_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[b07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_fetch_input
</UL>

<P><STRONG><a name="[af6]"></a>ssl_session_copy</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
<LI><a href="#[af7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_init
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_session
<LI><a href="#[b1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_set_session
</UL>

<P><STRONG><a name="[ad]"></a>ssl3_prf</STRONG> (Thumb, 176 bytes, Stack size 256 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ssl3_prf &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>tls1_prf</STRONG> (Thumb, 464 bytes, Stack size 232 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls1_prf &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[afa]"></a>tls_prf_generic</STRONG> (Thumb, 278 bytes, Stack size 232 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls_prf_generic &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_sha256
</UL>

<P><STRONG><a name="[b3]"></a>tls_prf_sha256</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = tls_prf_sha256 &rArr; tls_prf_generic &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[afa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_prf_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>ssl_calc_finished_tls_sha256</STRONG> (Thumb, 102 bytes, Stack size 184 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ssl_calc_finished_tls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>ssl_calc_verify_tls_sha256</STRONG> (Thumb, 44 bytes, Stack size 120 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ssl_calc_verify_tls_sha256 &rArr; mbedtls_sha256_finish &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_finish
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_free
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>ssl_calc_finished_tls</STRONG> (Thumb, 134 bytes, Stack size 256 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ssl_calc_finished_tls &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>ssl_calc_verify_tls</STRONG> (Thumb, 78 bytes, Stack size 192 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ssl_calc_verify_tls &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>ssl_calc_finished_ssl</STRONG> (Thumb, 300 bytes, Stack size 288 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ssl_calc_finished_ssl &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_zeroize
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>ssl_calc_verify_ssl</STRONG> (Thumb, 246 bytes, Stack size 288 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ssl_calc_verify_ssl &rArr; mbedtls_sha1_finish &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_free
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_finish
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_clone
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[afd]"></a>ssl_mac</STRONG> (Thumb, 202 bytes, Stack size 104 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[afe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_type
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[b01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_finish
<LI><a href="#[b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_update
<LI><a href="#[aff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_starts
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[b02]"></a>ssl_encrypt_buf</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
</UL>

<P><STRONG><a name="[b04]"></a>ssl_decrypt_buf</STRONG> (Thumb, 824 bytes, Stack size 96 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ssl_decrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_crypt
<LI><a href="#[b03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_get_cipher_mode
<LI><a href="#[afd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_mac
<LI><a href="#[b06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_safer_memcmp
<LI><a href="#[b05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_process
<LI><a href="#[af9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_reset
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_prepare_record_content
</UL>

<P><STRONG><a name="[b0b]"></a>ssl_prepare_handshake_record</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssl_prepare_handshake_record
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[b09]"></a>ssl_parse_record_header</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ssl_parse_record_header &rArr; mbedtls_ssl_send_alert_message &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_send_alert_message
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_version
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[b0a]"></a>ssl_prepare_record_content</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssl_prepare_record_content &rArr; ssl_decrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_read_record
</UL>

<P><STRONG><a name="[b7]"></a>ssl_update_checksum_sha256</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ssl_update_checksum_sha256 &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>ssl_update_checksum_md5sha1</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ssl_update_checksum_md5sha1 &rArr; mbedtls_sha1_update &rArr; mbedtls_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>ssl_update_checksum_start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ssl_update_checksum_start &rArr; mbedtls_sha256_update &rArr; mbedtls_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_update
<LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ssl_tls.o(.text)
</UL>
<P><STRONG><a name="[b12]"></a>ssl_handshake_wrapup_free_hs_transform</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ssl_handshake_wrapup_free_hs_transform &rArr; mbedtls_ssl_transform_free &rArr; mbedtls_md_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
</UL>
<BR>[Called By]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_wrapup
</UL>

<P><STRONG><a name="[b13]"></a>ssl_handshake_params_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_handshake_params_init &rArr; mbedtls_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_starts
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha256_init
<LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts
<LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_starts
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md5_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[b14]"></a>ssl_transform_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssl_transform_init &rArr; mbedtls_cipher_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_cipher_init
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
</UL>

<P><STRONG><a name="[b16]"></a>ssl_handshake_init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ssl_handshake_init &rArr; mbedtls_ssl_session_free &rArr; mbedtls_x509_crt_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[b15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_init
<LI><a href="#[b11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_handshake_free
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_transform_init
<LI><a href="#[b13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_params_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_setup
<LI><a href="#[b19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_session_reset_int
</UL>

<P><STRONG><a name="[b19]"></a>ssl_session_reset_int</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ssl_tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
<LI><a href="#[b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_transform_free
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_free
<LI><a href="#[b16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_handshake_init
<LI><a href="#[b1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_timer
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_session_reset
</UL>

<P><STRONG><a name="[b1e]"></a>ssl_append_key_cert</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ssl_append_key_cert &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
</UL>
<BR>[Called By]<UL><LI><a href="#[b1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_conf_own_cert
</UL>

<P><STRONG><a name="[b27]"></a>ssl_write_real</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ssl_write_real &rArr; mbedtls_ssl_write_record &rArr; ssl_encrypt_buf &rArr; ssl_mac &rArr; mbedtls_md_finish
</UL>
<BR>[Calls]<UL><LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write_record
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_flush_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_write
</UL>

<P><STRONG><a name="[b2a]"></a>ssl_key_cert_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl_tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssl_key_cert_free &rArr; mem_free2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free2
</UL>
<BR>[Called By]<UL><LI><a href="#[b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_config_free
</UL>

<P><STRONG><a name="[b03]"></a>mbedtls_cipher_get_cipher_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ssl_tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ssl_get_record_expansion
<LI><a href="#[b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_decrypt_buf
<LI><a href="#[b02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_encrypt_buf
</UL>

<P><STRONG><a name="[2]"></a>threading_mutex_init_pthread</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, threading.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = threading_mutex_init_pthread &rArr; aliyun_iot_mutex_init &rArr; sys_sem_new &rArr; sem_init &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>threading_mutex_free_pthread</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, threading.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = threading_mutex_free_pthread &rArr; aliyun_iot_mutex_destory &rArr; sys_sem_free &rArr; sem_destory &rArr; mem_free &rArr; plug_holes &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_destory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>threading_mutex_lock_pthread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, threading.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = threading_mutex_lock_pthread &rArr; aliyun_iot_mutex_lock &rArr; sys_arch_sem_wait &rArr; sem_wait &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>threading_mutex_unlock_pthread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, threading.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = threading_mutex_unlock_pthread &rArr; aliyun_iot_mutex_unlock &rArr; sys_sem_signal &rArr; sem_post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_mutex_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> threading.o(.data)
</UL>
<P><STRONG><a name="[b38]"></a>x509_get_attr_type_value</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509_get_attr_type_value &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
</UL>

<P><STRONG><a name="[b3b]"></a>x509_parse_int</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x509.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_parse_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>

<P><STRONG><a name="[b4e]"></a>mbedtls_zeroize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
</UL>

<P><STRONG><a name="[b60]"></a>x509_profile_check_md_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_md_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
</UL>

<P><STRONG><a name="[b61]"></a>x509_profile_check_pk_alg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = x509_profile_check_pk_alg
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b43]"></a>x509_profile_check_key</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509_profile_check_key &rArr; mbedtls_pk_get_bitlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_get_bitlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b45]"></a>x509_get_version</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_get_version &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b46]"></a>x509_get_dates</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = x509_get_dates &rArr; mbedtls_x509_get_time &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b47]"></a>x509_get_uid</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_get_uid &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b48]"></a>x509_get_basic_constraints</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = x509_get_basic_constraints &rArr; mbedtls_asn1_get_int &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_int
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[b49]"></a>x509_get_ns_cert_type</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = x509_get_ns_cert_type &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[b4a]"></a>x509_get_key_usage</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = x509_get_key_usage &rArr; mbedtls_asn1_get_bitstring &rArr; mbedtls_asn1_get_tag &rArr; mbedtls_asn1_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[b4b]"></a>x509_get_ext_key_usage</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_sequence_of
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[b4c]"></a>x509_get_subject_alt_name</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = x509_get_subject_alt_name &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
</UL>

<P><STRONG><a name="[b4d]"></a>x509_get_crt_ext</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = x509_get_crt_ext &rArr; x509_get_ext_key_usage &rArr; mbedtls_asn1_get_sequence_of &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_bool
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_subject_alt_name
<LI><a href="#[b4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ext_key_usage
<LI><a href="#[b4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_key_usage
<LI><a href="#[b49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_ns_cert_type
<LI><a href="#[b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_basic_constraints
<LI><a href="#[b3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_ext
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_x509_ext_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_parse_der_core
</UL>

<P><STRONG><a name="[b4f]"></a>x509_crt_parse_der_core</STRONG> (Thumb, 788 bytes, Stack size 80 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = x509_crt_parse_der_core &rArr; mbedtls_pk_parse_subpubkey &rArr; pk_get_rsapubkey &rArr; mbedtls_asn1_get_mpi &rArr; mbedtls_mpi_read_binary &rArr; mbedtls_mpi_lset &rArr; mbedtls_mpi_grow &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc2
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_asn1_get_tag
<LI><a href="#[b4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_crt_ext
<LI><a href="#[b47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_uid
<LI><a href="#[b46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_dates
<LI><a href="#[b45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_get_version
<LI><a href="#[b3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig_alg
<LI><a href="#[b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_sig
<LI><a href="#[b39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_name
<LI><a href="#[b37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_alg
<LI><a href="#[b35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_get_serial
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_free
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_parse_subpubkey
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_parse_der
</UL>

<P><STRONG><a name="[b56]"></a>x509_info_subject_alt_name</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = x509_info_subject_alt_name
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b51]"></a>x509_info_cert_type</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_cert_type &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b52]"></a>x509_info_key_usage</STRONG> (Thumb, 684 bytes, Stack size 32 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509_info_key_usage &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b53]"></a>x509_info_ext_key_usage</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = x509_info_ext_key_usage &rArr; mbedtls_oid_get_extended_key_usage &rArr; oid_ext_key_usage_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_oid_get_extended_key_usage
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
</UL>

<P><STRONG><a name="[b59]"></a>x509_memcasecmp</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = x509_memcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_check_wildcard
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b58]"></a>x509_check_wildcard</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = x509_check_wildcard &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b5a]"></a>x509_string_cmp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_memcasecmp
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
</UL>

<P><STRONG><a name="[b5b]"></a>x509_name_cmp</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_string_cmp
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
</UL>

<P><STRONG><a name="[b5c]"></a>x509_crt_check_parent</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = x509_crt_check_parent &rArr; x509_name_cmp &rArr; x509_string_cmp &rArr; x509_memcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b5d]"></a>x509_crt_verify_top</STRONG> (Thumb, 438 bytes, Stack size 96 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = x509_crt_verify_top &rArr; mbedtls_pk_verify_ext &rArr; mbedtls_pk_verify &rArr; pk_hashlen_helper
</UL>
<BR>[Calls]<UL><LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b63]"></a>x509_crt_verify_child</STRONG> (Thumb, 538 bytes, Stack size 120 bytes, x509_crt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = x509_crt_verify_child &rArr;  x509_crt_verify_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_top
<LI><a href="#[b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_check_parent
<LI><a href="#[b5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_name_cmp
<LI><a href="#[b43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_key
<LI><a href="#[b61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_pk_alg
<LI><a href="#[b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_profile_check_md_alg
<LI><a href="#[b5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_future
<LI><a href="#[b5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_time_is_past
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_pk_verify_ext
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_get_size
<LI><a href="#[b62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
</UL>
<BR>[Called By]<UL><LI><a href="#[b63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509_crt_verify_child
<LI><a href="#[b0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_verify_with_profile
</UL>

<P><STRONG><a name="[b68]"></a>errno_transform</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, aliyun_iot_platform_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = errno_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
</UL>

<P><STRONG><a name="[b9]"></a>mqtt_ssl_random</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mqtt_ssl_random &rArr; mqtt_avRandom
</UL>
<BR>[Calls]<UL><LI><a href="#[b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_avRandom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_network_ssl.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>mqtt_ssl_debug</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mqtt_ssl_debug &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aliyun_iot_network_ssl.o(.text)
</UL>
<P><STRONG><a name="[b6f]"></a>ssl_parse_crt</STRONG> (Thumb, 180 bytes, Stack size 1568 bytes, aliyun_iot_network_ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2004<LI>Call Chain = ssl_parse_crt &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_x509_crt_info
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_ssl_client_init
</UL>

<P><STRONG><a name="[b83]"></a>build_decoding_table</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, aliyun_iot_common_base64.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_common_base64decode
</UL>

<P><STRONG><a name="[b84]"></a>httpclient_base64enc</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, aliyun_iot_common_httpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = httpclient_base64enc &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpclient_send_auth
</UL>

<P><STRONG><a name="[b9c]"></a>read_tcp</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = read_tcp &rArr; aliyun_iot_network_recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_remain
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_cutdown
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_settimeout
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_select
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_recv
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_read
</UL>

<P><STRONG><a name="[b9d]"></a>write_tcp</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = write_tcp &rArr; aliyun_iot_network_send &rArr; lwip_send &rArr; lwip_sendto &rArr;  lwip_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_remain
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_cutdown
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_settimeout
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_send
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_select
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_get_errno
<LI><a href="#[b9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_timer_expired
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_write
</UL>

<P><STRONG><a name="[b9f]"></a>disconnect_tcp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = disconnect_tcp &rArr; aliyun_iot_network_shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_pthread_taskdelay
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_shutdown
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_disconnect
</UL>

<P><STRONG><a name="[ba0]"></a>connect_tcp</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = connect_tcp &rArr; aliyun_iot_network_create &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; msgget &rArr; mem_calloc_ex &rArr; mem_malloc_ex &rArr; mem_slide_check &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_create
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_connect
</UL>

<P><STRONG><a name="[ba1]"></a>read_ssl</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = read_ssl &rArr; aliyun_iot_network_ssl_read &rArr; mbedtls_ssl_read &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_read
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_read
</UL>

<P><STRONG><a name="[ba2]"></a>write_ssl</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = write_ssl &rArr; aliyun_iot_network_ssl_write &rArr; mbedtls_ssl_write &rArr; mbedtls_ssl_handshake &rArr; mbedtls_ssl_handshake_step &rArr; mbedtls_ssl_handshake_client_step &rArr; ssl_write_certificate_verify &rArr; mbedtls_ssl_derive_keys &rArr; mbedtls_md_setup &rArr; mem_calloc2 &rArr; mem_malloc2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_write
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_write
</UL>

<P><STRONG><a name="[ba3]"></a>disconnect_ssl</STRONG> (Thumb, 544 bytes, Stack size 8 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = disconnect_ssl &rArr; aliyun_iot_network_ssl_disconnect &rArr; mbedtls_net_free &rArr; aliyun_iot_network_shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; tcpip_apimsg &rArr; sys_mbox_post &rArr; msgsnd &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[b67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_free
<LI><a href="#[b76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_disconnect
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_disconnect
</UL>

<P><STRONG><a name="[ba4]"></a>connect_ssl</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, aliyun_iot_common_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2220 + Unknown Stack Size
<LI>Call Chain = connect_ssl &rArr; aliyun_iot_network_ssl_connect &rArr; TLSConnectNetwork &rArr; mqtt_ssl_client_init &rArr; ssl_parse_crt &rArr; mbedtls_x509_crt_info &rArr; mbedtls_x509_dn_gets &rArr; mbedtls_oid_get_attr_short_name &rArr; oid_x520_attr_from_asn1 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_memory_malloc
<LI><a href="#[b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_network_ssl_connect
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aliyun_iot_net_connect
</UL>

<P><STRONG><a name="[be9]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bd3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd8]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[bea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[beb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[bda]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[bd9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[bd7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[beb]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bea]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c4]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[c5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[bdb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[c0]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
